package avias.logs.http4s
import org.http4s.Method._
import avias.logs.circe._
import avias.logs.models
import avias.common.http4s.ClientUtils._
class AmazonlogsClient[F[_]: cats.effect.Sync](client: org.http4s.client.Client[F], awsData: avias.common.AwsData[F]) extends avias.logs.Amazonlogs[F] {
  private[this] final val ServiceType: String = "logs"
  private[this] final val ServiceAndPrefix: Option[String] = Some("Logs_20140328")
  override def putRetentionPolicy(input: avias.logs.models.PutRetentionPolicyRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.PutRetentionPolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "PutRetentionPolicy", POST, "/", input)
  override def disassociateKmsKey(input: avias.logs.models.DisassociateKmsKeyRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.DisassociateKmsKeyRequest](client, awsData, ServiceType, ServiceAndPrefix, "DisassociateKmsKey", POST, "/", input)
  override def putLogEvents(input: avias.logs.models.PutLogEventsRequest): F[avias.logs.models.PutLogEventsResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.logs.models.PutLogEventsResponse, avias.logs.models.PutLogEventsRequest](client, awsData, ServiceType, ServiceAndPrefix, "PutLogEvents", POST, "/", input)
  override def describeResourcePolicies(input: avias.logs.models.DescribeResourcePoliciesRequest): F[avias.logs.models.DescribeResourcePoliciesResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.logs.models.DescribeResourcePoliciesResponse, avias.logs.models.DescribeResourcePoliciesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeResourcePolicies", POST, "/", input)
  override def describeExportTasks(input: avias.logs.models.DescribeExportTasksRequest): F[avias.logs.models.DescribeExportTasksResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.logs.models.DescribeExportTasksResponse, avias.logs.models.DescribeExportTasksRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeExportTasks", POST, "/", input)
  override def putDestination(input: avias.logs.models.PutDestinationRequest): F[avias.logs.models.PutDestinationResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.logs.models.PutDestinationResponse, avias.logs.models.PutDestinationRequest](client, awsData, ServiceType, ServiceAndPrefix, "PutDestination", POST, "/", input)
  override def describeSubscriptionFilters(input: avias.logs.models.DescribeSubscriptionFiltersRequest): F[avias.logs.models.DescribeSubscriptionFiltersResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.logs.models.DescribeSubscriptionFiltersResponse, avias.logs.models.DescribeSubscriptionFiltersRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeSubscriptionFilters", POST, "/", input)
  override def listTagsLogGroup(input: avias.logs.models.ListTagsLogGroupRequest): F[avias.logs.models.ListTagsLogGroupResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.logs.models.ListTagsLogGroupResponse, avias.logs.models.ListTagsLogGroupRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListTagsLogGroup", POST, "/", input)
  override def tagLogGroup(input: avias.logs.models.TagLogGroupRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.TagLogGroupRequest](client, awsData, ServiceType, ServiceAndPrefix, "TagLogGroup", POST, "/", input)
  override def deleteResourcePolicy(input: avias.logs.models.DeleteResourcePolicyRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.DeleteResourcePolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteResourcePolicy", POST, "/", input)
  override def createExportTask(input: avias.logs.models.CreateExportTaskRequest): F[avias.logs.models.CreateExportTaskResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.logs.models.CreateExportTaskResponse, avias.logs.models.CreateExportTaskRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateExportTask", POST, "/", input)
  override def deleteDestination(input: avias.logs.models.DeleteDestinationRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.DeleteDestinationRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteDestination", POST, "/", input)
  override def deleteRetentionPolicy(input: avias.logs.models.DeleteRetentionPolicyRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.DeleteRetentionPolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteRetentionPolicy", POST, "/", input)
  override def deleteLogStream(input: avias.logs.models.DeleteLogStreamRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.DeleteLogStreamRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteLogStream", POST, "/", input)
  override def deleteLogGroup(input: avias.logs.models.DeleteLogGroupRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.DeleteLogGroupRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteLogGroup", POST, "/", input)
  override def getLogEvents(input: avias.logs.models.GetLogEventsRequest): F[avias.logs.models.GetLogEventsResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.logs.models.GetLogEventsResponse, avias.logs.models.GetLogEventsRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetLogEvents", POST, "/", input)
  override def describeMetricFilters(input: avias.logs.models.DescribeMetricFiltersRequest): F[avias.logs.models.DescribeMetricFiltersResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.logs.models.DescribeMetricFiltersResponse, avias.logs.models.DescribeMetricFiltersRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeMetricFilters", POST, "/", input)
  override def putDestinationPolicy(input: avias.logs.models.PutDestinationPolicyRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.PutDestinationPolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "PutDestinationPolicy", POST, "/", input)
  override def putSubscriptionFilter(input: avias.logs.models.PutSubscriptionFilterRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.PutSubscriptionFilterRequest](client, awsData, ServiceType, ServiceAndPrefix, "PutSubscriptionFilter", POST, "/", input)
  override def describeLogStreams(input: avias.logs.models.DescribeLogStreamsRequest): F[avias.logs.models.DescribeLogStreamsResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.logs.models.DescribeLogStreamsResponse, avias.logs.models.DescribeLogStreamsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeLogStreams", POST, "/", input)
  override def associateKmsKey(input: avias.logs.models.AssociateKmsKeyRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.AssociateKmsKeyRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssociateKmsKey", POST, "/", input)
  override def filterLogEvents(input: avias.logs.models.FilterLogEventsRequest): F[avias.logs.models.FilterLogEventsResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.logs.models.FilterLogEventsResponse, avias.logs.models.FilterLogEventsRequest](client, awsData, ServiceType, ServiceAndPrefix, "FilterLogEvents", POST, "/", input)
  override def describeDestinations(input: avias.logs.models.DescribeDestinationsRequest): F[avias.logs.models.DescribeDestinationsResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.logs.models.DescribeDestinationsResponse, avias.logs.models.DescribeDestinationsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeDestinations", POST, "/", input)
  override def createLogStream(input: avias.logs.models.CreateLogStreamRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.CreateLogStreamRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateLogStream", POST, "/", input)
  override def cancelExportTask(input: avias.logs.models.CancelExportTaskRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.CancelExportTaskRequest](client, awsData, ServiceType, ServiceAndPrefix, "CancelExportTask", POST, "/", input)
  override def deleteSubscriptionFilter(input: avias.logs.models.DeleteSubscriptionFilterRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.DeleteSubscriptionFilterRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteSubscriptionFilter", POST, "/", input)
  override def untagLogGroup(input: avias.logs.models.UntagLogGroupRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.UntagLogGroupRequest](client, awsData, ServiceType, ServiceAndPrefix, "UntagLogGroup", POST, "/", input)
  override def deleteMetricFilter(input: avias.logs.models.DeleteMetricFilterRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.DeleteMetricFilterRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteMetricFilter", POST, "/", input)
  override def testMetricFilter(input: avias.logs.models.TestMetricFilterRequest): F[avias.logs.models.TestMetricFilterResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.logs.models.TestMetricFilterResponse, avias.logs.models.TestMetricFilterRequest](client, awsData, ServiceType, ServiceAndPrefix, "TestMetricFilter", POST, "/", input)
  override def putResourcePolicy(input: avias.logs.models.PutResourcePolicyRequest): F[avias.logs.models.PutResourcePolicyResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.logs.models.PutResourcePolicyResponse, avias.logs.models.PutResourcePolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "PutResourcePolicy", POST, "/", input)
  override def putMetricFilter(input: avias.logs.models.PutMetricFilterRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.PutMetricFilterRequest](client, awsData, ServiceType, ServiceAndPrefix, "PutMetricFilter", POST, "/", input)
  override def createLogGroup(input: avias.logs.models.CreateLogGroupRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.logs.models.CreateLogGroupRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateLogGroup", POST, "/", input)
  override def describeLogGroups(input: avias.logs.models.DescribeLogGroupsRequest): F[avias.logs.models.DescribeLogGroupsResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.logs.models.DescribeLogGroupsResponse, avias.logs.models.DescribeLogGroupsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeLogGroups", POST, "/", input)
}