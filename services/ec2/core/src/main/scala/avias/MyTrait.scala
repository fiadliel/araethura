package avias.ec2
trait Amazonec2[F[_]] {
  def replaceRouteTableAssociation(input: avias.ec2.models.ReplaceRouteTableAssociationRequest): F[avias.ec2.models.ReplaceRouteTableAssociationResult]
  def describeNetworkInterfaces(input: avias.ec2.models.DescribeNetworkInterfacesRequest): F[avias.ec2.models.DescribeNetworkInterfacesResult]
  def deleteEgressOnlyInternetGateway(input: avias.ec2.models.DeleteEgressOnlyInternetGatewayRequest): F[avias.ec2.models.DeleteEgressOnlyInternetGatewayResult]
  def monitorInstances(input: avias.ec2.models.MonitorInstancesRequest): F[avias.ec2.models.MonitorInstancesResult]
  def describeVpnGateways(input: avias.ec2.models.DescribeVpnGatewaysRequest): F[avias.ec2.models.DescribeVpnGatewaysResult]
  def deleteVpcEndpoints(input: avias.ec2.models.DeleteVpcEndpointsRequest): F[avias.ec2.models.DeleteVpcEndpointsResult]
  def createFpgaImage(input: avias.ec2.models.CreateFpgaImageRequest): F[avias.ec2.models.CreateFpgaImageResult]
  def enableVgwRoutePropagation(input: avias.ec2.models.EnableVgwRoutePropagationRequest): F[scala.Unit]
  def createVpcEndpoint(input: avias.ec2.models.CreateVpcEndpointRequest): F[avias.ec2.models.CreateVpcEndpointResult]
  def deleteSnapshot(input: avias.ec2.models.DeleteSnapshotRequest): F[scala.Unit]
  def getReservedInstancesExchangeQuote(input: avias.ec2.models.GetReservedInstancesExchangeQuoteRequest): F[avias.ec2.models.GetReservedInstancesExchangeQuoteResult]
  def revokeSecurityGroupIngress(input: avias.ec2.models.RevokeSecurityGroupIngressRequest): F[scala.Unit]
  def cancelSpotFleetRequests(input: avias.ec2.models.CancelSpotFleetRequestsRequest): F[avias.ec2.models.CancelSpotFleetRequestsResponse]
  def deleteTags(input: avias.ec2.models.DeleteTagsRequest): F[scala.Unit]
  def associateAddress(input: avias.ec2.models.AssociateAddressRequest): F[avias.ec2.models.AssociateAddressResult]
  def describeAccountAttributes(input: avias.ec2.models.DescribeAccountAttributesRequest): F[avias.ec2.models.DescribeAccountAttributesResult]
  def createRouteTable(input: avias.ec2.models.CreateRouteTableRequest): F[avias.ec2.models.CreateRouteTableResult]
  def unassignPrivateIpAddresses(input: avias.ec2.models.UnassignPrivateIpAddressesRequest): F[scala.Unit]
  def describeExportTasks(input: avias.ec2.models.DescribeExportTasksRequest): F[avias.ec2.models.DescribeExportTasksResult]
  def createNetworkInterfacePermission(input: avias.ec2.models.CreateNetworkInterfacePermissionRequest): F[avias.ec2.models.CreateNetworkInterfacePermissionResult]
  def cancelImportTask(input: avias.ec2.models.CancelImportTaskRequest): F[avias.ec2.models.CancelImportTaskResult]
  def describeNetworkInterfacePermissions(input: avias.ec2.models.DescribeNetworkInterfacePermissionsRequest): F[avias.ec2.models.DescribeNetworkInterfacePermissionsResult]
  def modifySubnetAttribute(input: avias.ec2.models.ModifySubnetAttributeRequest): F[scala.Unit]
  def disassociateIamInstanceProfile(input: avias.ec2.models.DisassociateIamInstanceProfileRequest): F[avias.ec2.models.DisassociateIamInstanceProfileResult]
  def describeKeyPairs(input: avias.ec2.models.DescribeKeyPairsRequest): F[avias.ec2.models.DescribeKeyPairsResult]
  def createDefaultSubnet(input: avias.ec2.models.CreateDefaultSubnetRequest): F[avias.ec2.models.CreateDefaultSubnetResult]
  def attachClassicLinkVpc(input: avias.ec2.models.AttachClassicLinkVpcRequest): F[avias.ec2.models.AttachClassicLinkVpcResult]
  def describeVpcs(input: avias.ec2.models.DescribeVpcsRequest): F[avias.ec2.models.DescribeVpcsResult]
  def replaceNetworkAclAssociation(input: avias.ec2.models.ReplaceNetworkAclAssociationRequest): F[avias.ec2.models.ReplaceNetworkAclAssociationResult]
  def enableVpcClassicLink(input: avias.ec2.models.EnableVpcClassicLinkRequest): F[avias.ec2.models.EnableVpcClassicLinkResult]
  def copyImage(input: avias.ec2.models.CopyImageRequest): F[avias.ec2.models.CopyImageResult]
  def createVpnConnectionRoute(input: avias.ec2.models.CreateVpnConnectionRouteRequest): F[scala.Unit]
  def deleteNetworkInterface(input: avias.ec2.models.DeleteNetworkInterfaceRequest): F[scala.Unit]
  def deleteVpnConnectionRoute(input: avias.ec2.models.DeleteVpnConnectionRouteRequest): F[scala.Unit]
  def deleteDhcpOptions(input: avias.ec2.models.DeleteDhcpOptionsRequest): F[scala.Unit]
  def deleteInternetGateway(input: avias.ec2.models.DeleteInternetGatewayRequest): F[scala.Unit]
  def acceptVpcPeeringConnection(input: avias.ec2.models.AcceptVpcPeeringConnectionRequest): F[avias.ec2.models.AcceptVpcPeeringConnectionResult]
  def describeEgressOnlyInternetGateways(input: avias.ec2.models.DescribeEgressOnlyInternetGatewaysRequest): F[avias.ec2.models.DescribeEgressOnlyInternetGatewaysResult]
  def allocateAddress(input: avias.ec2.models.AllocateAddressRequest): F[avias.ec2.models.AllocateAddressResult]
  def createTags(input: avias.ec2.models.CreateTagsRequest): F[scala.Unit]
  def modifyVpcAttribute(input: avias.ec2.models.ModifyVpcAttributeRequest): F[scala.Unit]
  def describeVpcAttribute(input: avias.ec2.models.DescribeVpcAttributeRequest): F[avias.ec2.models.DescribeVpcAttributeResult]
  def runScheduledInstances(input: avias.ec2.models.RunScheduledInstancesRequest): F[avias.ec2.models.RunScheduledInstancesResult]
  def deleteVolume(input: avias.ec2.models.DeleteVolumeRequest): F[scala.Unit]
  def assignPrivateIpAddresses(input: avias.ec2.models.AssignPrivateIpAddressesRequest): F[scala.Unit]
  def importInstance(input: avias.ec2.models.ImportInstanceRequest): F[avias.ec2.models.ImportInstanceResult]
  def createNetworkAclEntry(input: avias.ec2.models.CreateNetworkAclEntryRequest): F[scala.Unit]
  def restoreAddressToClassic(input: avias.ec2.models.RestoreAddressToClassicRequest): F[avias.ec2.models.RestoreAddressToClassicResult]
  def unassignIpv6Addresses(input: avias.ec2.models.UnassignIpv6AddressesRequest): F[avias.ec2.models.UnassignIpv6AddressesResult]
  def disableVgwRoutePropagation(input: avias.ec2.models.DisableVgwRoutePropagationRequest): F[scala.Unit]
  def attachNetworkInterface(input: avias.ec2.models.AttachNetworkInterfaceRequest): F[avias.ec2.models.AttachNetworkInterfaceResult]
  def resetNetworkInterfaceAttribute(input: avias.ec2.models.ResetNetworkInterfaceAttributeRequest): F[scala.Unit]
  def reportInstanceStatus(input: avias.ec2.models.ReportInstanceStatusRequest): F[scala.Unit]
  def deleteNetworkAclEntry(input: avias.ec2.models.DeleteNetworkAclEntryRequest): F[scala.Unit]
  def modifyVolume(input: avias.ec2.models.ModifyVolumeRequest): F[avias.ec2.models.ModifyVolumeResult]
  def detachVolume(input: avias.ec2.models.DetachVolumeRequest): F[avias.ec2.models.VolumeAttachment]
  def associateIamInstanceProfile(input: avias.ec2.models.AssociateIamInstanceProfileRequest): F[avias.ec2.models.AssociateIamInstanceProfileResult]
  def describeSpotFleetRequests(input: avias.ec2.models.DescribeSpotFleetRequestsRequest): F[avias.ec2.models.DescribeSpotFleetRequestsResponse]
  def describeReservedInstances(input: avias.ec2.models.DescribeReservedInstancesRequest): F[avias.ec2.models.DescribeReservedInstancesResult]
  def resetInstanceAttribute(input: avias.ec2.models.ResetInstanceAttributeRequest): F[scala.Unit]
  def createCustomerGateway(input: avias.ec2.models.CreateCustomerGatewayRequest): F[avias.ec2.models.CreateCustomerGatewayResult]
  def modifyNetworkInterfaceAttribute(input: avias.ec2.models.ModifyNetworkInterfaceAttributeRequest): F[scala.Unit]
  def describeImportImageTasks(input: avias.ec2.models.DescribeImportImageTasksRequest): F[avias.ec2.models.DescribeImportImageTasksResult]
  def resetImageAttribute(input: avias.ec2.models.ResetImageAttributeRequest): F[scala.Unit]
  def describeMovingAddresses(input: avias.ec2.models.DescribeMovingAddressesRequest): F[avias.ec2.models.DescribeMovingAddressesResult]
  def cancelConversionTask(input: avias.ec2.models.CancelConversionRequest): F[scala.Unit]
  def describeSecurityGroupReferences(input: avias.ec2.models.DescribeSecurityGroupReferencesRequest): F[avias.ec2.models.DescribeSecurityGroupReferencesResult]
  def describeIamInstanceProfileAssociations(input: avias.ec2.models.DescribeIamInstanceProfileAssociationsRequest): F[avias.ec2.models.DescribeIamInstanceProfileAssociationsResult]
  def importVolume(input: avias.ec2.models.ImportVolumeRequest): F[avias.ec2.models.ImportVolumeResult]
  def createNetworkInterface(input: avias.ec2.models.CreateNetworkInterfaceRequest): F[avias.ec2.models.CreateNetworkInterfaceResult]
  def createVpnGateway(input: avias.ec2.models.CreateVpnGatewayRequest): F[avias.ec2.models.CreateVpnGatewayResult]
  def deleteVpcPeeringConnection(input: avias.ec2.models.DeleteVpcPeeringConnectionRequest): F[avias.ec2.models.DeleteVpcPeeringConnectionResult]
  def createSnapshot(input: avias.ec2.models.CreateSnapshotRequest): F[avias.ec2.models.Snapshot]
  def describeVolumes(input: avias.ec2.models.DescribeVolumesRequest): F[avias.ec2.models.DescribeVolumesResult]
  def describeAddresses(input: avias.ec2.models.DescribeAddressesRequest): F[avias.ec2.models.DescribeAddressesResult]
  def createImage(input: avias.ec2.models.CreateImageRequest): F[avias.ec2.models.CreateImageResult]
  def copyFpgaImage(input: avias.ec2.models.CopyFpgaImageRequest): F[avias.ec2.models.CopyFpgaImageResult]
  def disassociateVpcCidrBlock(input: avias.ec2.models.DisassociateVpcCidrBlockRequest): F[avias.ec2.models.DisassociateVpcCidrBlockResult]
  def describeIdFormat(input: avias.ec2.models.DescribeIdFormatRequest): F[avias.ec2.models.DescribeIdFormatResult]
  def describeSpotFleetRequestHistory(input: avias.ec2.models.DescribeSpotFleetRequestHistoryRequest): F[avias.ec2.models.DescribeSpotFleetRequestHistoryResponse]
  def createVolume(input: avias.ec2.models.CreateVolumeRequest): F[avias.ec2.models.Volume]
  def describeHosts(input: avias.ec2.models.DescribeHostsRequest): F[avias.ec2.models.DescribeHostsResult]
  def stopInstances(input: avias.ec2.models.StopInstancesRequest): F[avias.ec2.models.StopInstancesResult]
  def describeScheduledInstanceAvailability(input: avias.ec2.models.DescribeScheduledInstanceAvailabilityRequest): F[avias.ec2.models.DescribeScheduledInstanceAvailabilityResult]
  def describeInstances(input: avias.ec2.models.DescribeInstancesRequest): F[avias.ec2.models.DescribeInstancesResult]
  def terminateInstances(input: avias.ec2.models.TerminateInstancesRequest): F[avias.ec2.models.TerminateInstancesResult]
  def describeNetworkInterfaceAttribute(input: avias.ec2.models.DescribeNetworkInterfaceAttributeRequest): F[avias.ec2.models.DescribeNetworkInterfaceAttributeResult]
  def describeVpcEndpointServices(input: avias.ec2.models.DescribeVpcEndpointServicesRequest): F[avias.ec2.models.DescribeVpcEndpointServicesResult]
  def disassociateRouteTable(input: avias.ec2.models.DisassociateRouteTableRequest): F[scala.Unit]
  def describeVpcPeeringConnections(input: avias.ec2.models.DescribeVpcPeeringConnectionsRequest): F[avias.ec2.models.DescribeVpcPeeringConnectionsResult]
  def attachVolume(input: avias.ec2.models.AttachVolumeRequest): F[avias.ec2.models.VolumeAttachment]
  def cancelBundleTask(input: avias.ec2.models.CancelBundleTaskRequest): F[avias.ec2.models.CancelBundleTaskResult]
  def describeCustomerGateways(input: avias.ec2.models.DescribeCustomerGatewaysRequest): F[avias.ec2.models.DescribeCustomerGatewaysResult]
  def modifyVpcTenancy(input: avias.ec2.models.ModifyVpcTenancyRequest): F[avias.ec2.models.ModifyVpcTenancyResult]
  def describeReservedInstancesListings(input: avias.ec2.models.DescribeReservedInstancesListingsRequest): F[avias.ec2.models.DescribeReservedInstancesListingsResult]
  def replaceRoute(input: avias.ec2.models.ReplaceRouteRequest): F[scala.Unit]
  def describeNatGateways(input: avias.ec2.models.DescribeNatGatewaysRequest): F[avias.ec2.models.DescribeNatGatewaysResult]
  def modifyHosts(input: avias.ec2.models.ModifyHostsRequest): F[avias.ec2.models.ModifyHostsResult]
  def deleteFlowLogs(input: avias.ec2.models.DeleteFlowLogsRequest): F[avias.ec2.models.DeleteFlowLogsResult]
  def createDefaultVpc(input: avias.ec2.models.CreateDefaultVpcRequest): F[avias.ec2.models.CreateDefaultVpcResult]
  def describeVpcClassicLink(input: avias.ec2.models.DescribeVpcClassicLinkRequest): F[avias.ec2.models.DescribeVpcClassicLinkResult]
  def authorizeSecurityGroupIngress(input: avias.ec2.models.AuthorizeSecurityGroupIngressRequest): F[scala.Unit]
  def deleteSubnet(input: avias.ec2.models.DeleteSubnetRequest): F[scala.Unit]
  def createEgressOnlyInternetGateway(input: avias.ec2.models.CreateEgressOnlyInternetGatewayRequest): F[avias.ec2.models.CreateEgressOnlyInternetGatewayResult]
  def createSecurityGroup(input: avias.ec2.models.CreateSecurityGroupRequest): F[avias.ec2.models.CreateSecurityGroupResult]
  def describeFlowLogs(input: avias.ec2.models.DescribeFlowLogsRequest): F[avias.ec2.models.DescribeFlowLogsResult]
  def describeReservedInstancesModifications(input: avias.ec2.models.DescribeReservedInstancesModificationsRequest): F[avias.ec2.models.DescribeReservedInstancesModificationsResult]
  def createInternetGateway(input: avias.ec2.models.CreateInternetGatewayRequest): F[avias.ec2.models.CreateInternetGatewayResult]
  def createSpotDatafeedSubscription(input: avias.ec2.models.CreateSpotDatafeedSubscriptionRequest): F[avias.ec2.models.CreateSpotDatafeedSubscriptionResult]
  def describeInstanceAttribute(input: avias.ec2.models.DescribeInstanceAttributeRequest): F[avias.ec2.models.InstanceAttribute]
  def modifyInstanceAttribute(input: avias.ec2.models.ModifyInstanceAttributeRequest): F[scala.Unit]
  def rejectVpcPeeringConnection(input: avias.ec2.models.RejectVpcPeeringConnectionRequest): F[avias.ec2.models.RejectVpcPeeringConnectionResult]
  def createNetworkAcl(input: avias.ec2.models.CreateNetworkAclRequest): F[avias.ec2.models.CreateNetworkAclResult]
  def deleteNetworkInterfacePermission(input: avias.ec2.models.DeleteNetworkInterfacePermissionRequest): F[avias.ec2.models.DeleteNetworkInterfacePermissionResult]
  def detachClassicLinkVpc(input: avias.ec2.models.DetachClassicLinkVpcRequest): F[avias.ec2.models.DetachClassicLinkVpcResult]
  def registerImage(input: avias.ec2.models.RegisterImageRequest): F[avias.ec2.models.RegisterImageResult]
  def deleteSecurityGroup(input: avias.ec2.models.DeleteSecurityGroupRequest): F[scala.Unit]
  def bundleInstance(input: avias.ec2.models.BundleInstanceRequest): F[avias.ec2.models.BundleInstanceResult]
  def importKeyPair(input: avias.ec2.models.ImportKeyPairRequest): F[avias.ec2.models.ImportKeyPairResult]
  def getConsoleOutput(input: avias.ec2.models.GetConsoleOutputRequest): F[avias.ec2.models.GetConsoleOutputResult]
  def unmonitorInstances(input: avias.ec2.models.UnmonitorInstancesRequest): F[avias.ec2.models.UnmonitorInstancesResult]
  def createFlowLogs(input: avias.ec2.models.CreateFlowLogsRequest): F[avias.ec2.models.CreateFlowLogsResult]
  def createVpnConnection(input: avias.ec2.models.CreateVpnConnectionRequest): F[avias.ec2.models.CreateVpnConnectionResult]
  def describeFpgaImages(input: avias.ec2.models.DescribeFpgaImagesRequest): F[avias.ec2.models.DescribeFpgaImagesResult]
  def attachInternetGateway(input: avias.ec2.models.AttachInternetGatewayRequest): F[scala.Unit]
  def getConsoleScreenshot(input: avias.ec2.models.GetConsoleScreenshotRequest): F[avias.ec2.models.GetConsoleScreenshotResult]
  def purchaseScheduledInstances(input: avias.ec2.models.PurchaseScheduledInstancesRequest): F[avias.ec2.models.PurchaseScheduledInstancesResult]
  def purchaseReservedInstancesOffering(input: avias.ec2.models.PurchaseReservedInstancesOfferingRequest): F[avias.ec2.models.PurchaseReservedInstancesOfferingResult]
  def disableVpcClassicLink(input: avias.ec2.models.DisableVpcClassicLinkRequest): F[avias.ec2.models.DisableVpcClassicLinkResult]
  def assignIpv6Addresses(input: avias.ec2.models.AssignIpv6AddressesRequest): F[avias.ec2.models.AssignIpv6AddressesResult]
  def attachVpnGateway(input: avias.ec2.models.AttachVpnGatewayRequest): F[avias.ec2.models.AttachVpnGatewayResult]
  def allocateHosts(input: avias.ec2.models.AllocateHostsRequest): F[avias.ec2.models.AllocateHostsResult]
  def deleteVpnConnection(input: avias.ec2.models.DeleteVpnConnectionRequest): F[scala.Unit]
  def disableVpcClassicLinkDnsSupport(input: avias.ec2.models.DisableVpcClassicLinkDnsSupportRequest): F[avias.ec2.models.DisableVpcClassicLinkDnsSupportResult]
  def describeScheduledInstances(input: avias.ec2.models.DescribeScheduledInstancesRequest): F[avias.ec2.models.DescribeScheduledInstancesResult]
  def describeHostReservationOfferings(input: avias.ec2.models.DescribeHostReservationOfferingsRequest): F[avias.ec2.models.DescribeHostReservationOfferingsResult]
  def cancelExportTask(input: avias.ec2.models.CancelExportTaskRequest): F[scala.Unit]
  def replaceIamInstanceProfileAssociation(input: avias.ec2.models.ReplaceIamInstanceProfileAssociationRequest): F[avias.ec2.models.ReplaceIamInstanceProfileAssociationResult]
  def describeClassicLinkInstances(input: avias.ec2.models.DescribeClassicLinkInstancesRequest): F[avias.ec2.models.DescribeClassicLinkInstancesResult]
  def describeVolumesModifications(input: avias.ec2.models.DescribeVolumesModificationsRequest): F[avias.ec2.models.DescribeVolumesModificationsResult]
  def createVpc(input: avias.ec2.models.CreateVpcRequest): F[avias.ec2.models.CreateVpcResult]
  def requestSpotFleet(input: avias.ec2.models.RequestSpotFleetRequest): F[avias.ec2.models.RequestSpotFleetResponse]
  def getHostReservationPurchasePreview(input: avias.ec2.models.GetHostReservationPurchasePreviewRequest): F[avias.ec2.models.GetHostReservationPurchasePreviewResult]
  def releaseAddress(input: avias.ec2.models.ReleaseAddressRequest): F[scala.Unit]
  def resetFpgaImageAttribute(input: avias.ec2.models.ResetFpgaImageAttributeRequest): F[avias.ec2.models.ResetFpgaImageAttributeResult]
  def describePrefixLists(input: avias.ec2.models.DescribePrefixListsRequest): F[avias.ec2.models.DescribePrefixListsResult]
  def modifyVpcEndpoint(input: avias.ec2.models.ModifyVpcEndpointRequest): F[avias.ec2.models.ModifyVpcEndpointResult]
  def describeSnapshotAttribute(input: avias.ec2.models.DescribeSnapshotAttributeRequest): F[avias.ec2.models.DescribeSnapshotAttributeResult]
  def deleteCustomerGateway(input: avias.ec2.models.DeleteCustomerGatewayRequest): F[scala.Unit]
  def describeVpcEndpoints(input: avias.ec2.models.DescribeVpcEndpointsRequest): F[avias.ec2.models.DescribeVpcEndpointsResult]
  def disassociateSubnetCidrBlock(input: avias.ec2.models.DisassociateSubnetCidrBlockRequest): F[avias.ec2.models.DisassociateSubnetCidrBlockResult]
  def describeSubnets(input: avias.ec2.models.DescribeSubnetsRequest): F[avias.ec2.models.DescribeSubnetsResult]
  def requestSpotInstances(input: avias.ec2.models.RequestSpotInstancesRequest): F[avias.ec2.models.RequestSpotInstancesResult]
  def modifyImageAttribute(input: avias.ec2.models.ModifyImageAttributeRequest): F[scala.Unit]
  def startInstances(input: avias.ec2.models.StartInstancesRequest): F[avias.ec2.models.StartInstancesResult]
  def createDhcpOptions(input: avias.ec2.models.CreateDhcpOptionsRequest): F[avias.ec2.models.CreateDhcpOptionsResult]
  def describeImportSnapshotTasks(input: avias.ec2.models.DescribeImportSnapshotTasksRequest): F[avias.ec2.models.DescribeImportSnapshotTasksResult]
  def createRoute(input: avias.ec2.models.CreateRouteRequest): F[avias.ec2.models.CreateRouteResult]
  def describeImageAttribute(input: avias.ec2.models.DescribeImageAttributeRequest): F[avias.ec2.models.ImageAttribute]
  def modifySnapshotAttribute(input: avias.ec2.models.ModifySnapshotAttributeRequest): F[scala.Unit]
  def getPasswordData(input: avias.ec2.models.GetPasswordDataRequest): F[avias.ec2.models.GetPasswordDataResult]
  def copySnapshot(input: avias.ec2.models.CopySnapshotRequest): F[avias.ec2.models.CopySnapshotResult]
  def describeReservedInstancesOfferings(input: avias.ec2.models.DescribeReservedInstancesOfferingsRequest): F[avias.ec2.models.DescribeReservedInstancesOfferingsResult]
  def detachVpnGateway(input: avias.ec2.models.DetachVpnGatewayRequest): F[scala.Unit]
  def modifyVolumeAttribute(input: avias.ec2.models.ModifyVolumeAttributeRequest): F[scala.Unit]
  def deleteNetworkAcl(input: avias.ec2.models.DeleteNetworkAclRequest): F[scala.Unit]
  def rebootInstances(input: avias.ec2.models.RebootInstancesRequest): F[scala.Unit]
  def modifyInstancePlacement(input: avias.ec2.models.ModifyInstancePlacementRequest): F[avias.ec2.models.ModifyInstancePlacementResult]
  def replaceNetworkAclEntry(input: avias.ec2.models.ReplaceNetworkAclEntryRequest): F[scala.Unit]
  def describeSnapshots(input: avias.ec2.models.DescribeSnapshotsRequest): F[avias.ec2.models.DescribeSnapshotsResult]
  def describeVolumeAttribute(input: avias.ec2.models.DescribeVolumeAttributeRequest): F[avias.ec2.models.DescribeVolumeAttributeResult]
  def describeHostReservations(input: avias.ec2.models.DescribeHostReservationsRequest): F[avias.ec2.models.DescribeHostReservationsResult]
  def modifySpotFleetRequest(input: avias.ec2.models.ModifySpotFleetRequestRequest): F[avias.ec2.models.ModifySpotFleetRequestResponse]
  def createSubnet(input: avias.ec2.models.CreateSubnetRequest): F[avias.ec2.models.CreateSubnetResult]
  def importSnapshot(input: avias.ec2.models.ImportSnapshotRequest): F[avias.ec2.models.ImportSnapshotResult]
  def describeRegions(input: avias.ec2.models.DescribeRegionsRequest): F[avias.ec2.models.DescribeRegionsResult]
  def describeRouteTables(input: avias.ec2.models.DescribeRouteTablesRequest): F[avias.ec2.models.DescribeRouteTablesResult]
  def releaseHosts(input: avias.ec2.models.ReleaseHostsRequest): F[avias.ec2.models.ReleaseHostsResult]
  def deleteRouteTable(input: avias.ec2.models.DeleteRouteTableRequest): F[scala.Unit]
  def deleteNatGateway(input: avias.ec2.models.DeleteNatGatewayRequest): F[avias.ec2.models.DeleteNatGatewayResult]
  def enableVolumeIO(input: avias.ec2.models.EnableVolumeIORequest): F[scala.Unit]
  def describeNetworkAcls(input: avias.ec2.models.DescribeNetworkAclsRequest): F[avias.ec2.models.DescribeNetworkAclsResult]
  def revokeSecurityGroupEgress(input: avias.ec2.models.RevokeSecurityGroupEgressRequest): F[scala.Unit]
  def describeElasticGpus(input: avias.ec2.models.DescribeElasticGpusRequest): F[avias.ec2.models.DescribeElasticGpusResult]
  def describeVpcClassicLinkDnsSupport(input: avias.ec2.models.DescribeVpcClassicLinkDnsSupportRequest): F[avias.ec2.models.DescribeVpcClassicLinkDnsSupportResult]
  def modifyIdFormat(input: avias.ec2.models.ModifyIdFormatRequest): F[scala.Unit]
  def associateVpcCidrBlock(input: avias.ec2.models.AssociateVpcCidrBlockRequest): F[avias.ec2.models.AssociateVpcCidrBlockResult]
  def deleteVpc(input: avias.ec2.models.DeleteVpcRequest): F[scala.Unit]
  def associateRouteTable(input: avias.ec2.models.AssociateRouteTableRequest): F[avias.ec2.models.AssociateRouteTableResult]
  def modifyIdentityIdFormat(input: avias.ec2.models.ModifyIdentityIdFormatRequest): F[scala.Unit]
  def acceptReservedInstancesExchangeQuote(input: avias.ec2.models.AcceptReservedInstancesExchangeQuoteRequest): F[avias.ec2.models.AcceptReservedInstancesExchangeQuoteResult]
  def deleteKeyPair(input: avias.ec2.models.DeleteKeyPairRequest): F[scala.Unit]
  def deregisterImage(input: avias.ec2.models.DeregisterImageRequest): F[scala.Unit]
  def resetSnapshotAttribute(input: avias.ec2.models.ResetSnapshotAttributeRequest): F[scala.Unit]
  def detachNetworkInterface(input: avias.ec2.models.DetachNetworkInterfaceRequest): F[scala.Unit]
  def describeSecurityGroups(input: avias.ec2.models.DescribeSecurityGroupsRequest): F[avias.ec2.models.DescribeSecurityGroupsResult]
  def disassociateAddress(input: avias.ec2.models.DisassociateAddressRequest): F[scala.Unit]
  def deleteVpnGateway(input: avias.ec2.models.DeleteVpnGatewayRequest): F[scala.Unit]
  def createInstanceExportTask(input: avias.ec2.models.CreateInstanceExportTaskRequest): F[avias.ec2.models.CreateInstanceExportTaskResult]
  def createPlacementGroup(input: avias.ec2.models.CreatePlacementGroupRequest): F[scala.Unit]
  def createKeyPair(input: avias.ec2.models.CreateKeyPairRequest): F[avias.ec2.models.KeyPair]
  def describeTags(input: avias.ec2.models.DescribeTagsRequest): F[avias.ec2.models.DescribeTagsResult]
  def updateSecurityGroupRuleDescriptionsIngress(input: avias.ec2.models.UpdateSecurityGroupRuleDescriptionsIngressRequest): F[avias.ec2.models.UpdateSecurityGroupRuleDescriptionsIngressResult]
  def detachInternetGateway(input: avias.ec2.models.DetachInternetGatewayRequest): F[scala.Unit]
  def cancelSpotInstanceRequests(input: avias.ec2.models.CancelSpotInstanceRequestsRequest): F[avias.ec2.models.CancelSpotInstanceRequestsResult]
  def describeSpotPriceHistory(input: avias.ec2.models.DescribeSpotPriceHistoryRequest): F[avias.ec2.models.DescribeSpotPriceHistoryResult]
  def describeConversionTasks(input: avias.ec2.models.DescribeConversionTasksRequest): F[avias.ec2.models.DescribeConversionTasksResult]
  def describeSpotInstanceRequests(input: avias.ec2.models.DescribeSpotInstanceRequestsRequest): F[avias.ec2.models.DescribeSpotInstanceRequestsResult]
  def associateDhcpOptions(input: avias.ec2.models.AssociateDhcpOptionsRequest): F[scala.Unit]
  def describeDhcpOptions(input: avias.ec2.models.DescribeDhcpOptionsRequest): F[avias.ec2.models.DescribeDhcpOptionsResult]
  def deleteRoute(input: avias.ec2.models.DeleteRouteRequest): F[scala.Unit]
  def associateSubnetCidrBlock(input: avias.ec2.models.AssociateSubnetCidrBlockRequest): F[avias.ec2.models.AssociateSubnetCidrBlockResult]
  def authorizeSecurityGroupEgress(input: avias.ec2.models.AuthorizeSecurityGroupEgressRequest): F[scala.Unit]
  def createVpcPeeringConnection(input: avias.ec2.models.CreateVpcPeeringConnectionRequest): F[avias.ec2.models.CreateVpcPeeringConnectionResult]
  def confirmProductInstance(input: avias.ec2.models.ConfirmProductInstanceRequest): F[avias.ec2.models.ConfirmProductInstanceResult]
  def describeStaleSecurityGroups(input: avias.ec2.models.DescribeStaleSecurityGroupsRequest): F[avias.ec2.models.DescribeStaleSecurityGroupsResult]
  def describeInternetGateways(input: avias.ec2.models.DescribeInternetGatewaysRequest): F[avias.ec2.models.DescribeInternetGatewaysResult]
  def describeBundleTasks(input: avias.ec2.models.DescribeBundleTasksRequest): F[avias.ec2.models.DescribeBundleTasksResult]
  def describeVpnConnections(input: avias.ec2.models.DescribeVpnConnectionsRequest): F[avias.ec2.models.DescribeVpnConnectionsResult]
  def describeFpgaImageAttribute(input: avias.ec2.models.DescribeFpgaImageAttributeRequest): F[avias.ec2.models.DescribeFpgaImageAttributeResult]
  def cancelReservedInstancesListing(input: avias.ec2.models.CancelReservedInstancesListingRequest): F[avias.ec2.models.CancelReservedInstancesListingResult]
  def describeAvailabilityZones(input: avias.ec2.models.DescribeAvailabilityZonesRequest): F[avias.ec2.models.DescribeAvailabilityZonesResult]
  def deletePlacementGroup(input: avias.ec2.models.DeletePlacementGroupRequest): F[scala.Unit]
  def createReservedInstancesListing(input: avias.ec2.models.CreateReservedInstancesListingRequest): F[avias.ec2.models.CreateReservedInstancesListingResult]
  def enableVpcClassicLinkDnsSupport(input: avias.ec2.models.EnableVpcClassicLinkDnsSupportRequest): F[avias.ec2.models.EnableVpcClassicLinkDnsSupportResult]
  def describeIdentityIdFormat(input: avias.ec2.models.DescribeIdentityIdFormatRequest): F[avias.ec2.models.DescribeIdentityIdFormatResult]
  def runInstances(input: avias.ec2.models.RunInstancesRequest): F[avias.ec2.models.Reservation]
  def modifyVpcPeeringConnectionOptions(input: avias.ec2.models.ModifyVpcPeeringConnectionOptionsRequest): F[avias.ec2.models.ModifyVpcPeeringConnectionOptionsResult]
  def describePlacementGroups(input: avias.ec2.models.DescribePlacementGroupsRequest): F[avias.ec2.models.DescribePlacementGroupsResult]
  def purchaseHostReservation(input: avias.ec2.models.PurchaseHostReservationRequest): F[avias.ec2.models.PurchaseHostReservationResult]
  def describeInstanceStatus(input: avias.ec2.models.DescribeInstanceStatusRequest): F[avias.ec2.models.DescribeInstanceStatusResult]
  def deleteSpotDatafeedSubscription(input: avias.ec2.models.DeleteSpotDatafeedSubscriptionRequest): F[scala.Unit]
  def updateSecurityGroupRuleDescriptionsEgress(input: avias.ec2.models.UpdateSecurityGroupRuleDescriptionsEgressRequest): F[avias.ec2.models.UpdateSecurityGroupRuleDescriptionsEgressResult]
  def modifyFpgaImageAttribute(input: avias.ec2.models.ModifyFpgaImageAttributeRequest): F[avias.ec2.models.ModifyFpgaImageAttributeResult]
  def describeSpotDatafeedSubscription(input: avias.ec2.models.DescribeSpotDatafeedSubscriptionRequest): F[avias.ec2.models.DescribeSpotDatafeedSubscriptionResult]
  def describeImages(input: avias.ec2.models.DescribeImagesRequest): F[avias.ec2.models.DescribeImagesResult]
  def importImage(input: avias.ec2.models.ImportImageRequest): F[avias.ec2.models.ImportImageResult]
  def moveAddressToVpc(input: avias.ec2.models.MoveAddressToVpcRequest): F[avias.ec2.models.MoveAddressToVpcResult]
  def describeVolumeStatus(input: avias.ec2.models.DescribeVolumeStatusRequest): F[avias.ec2.models.DescribeVolumeStatusResult]
  def modifyReservedInstances(input: avias.ec2.models.ModifyReservedInstancesRequest): F[avias.ec2.models.ModifyReservedInstancesResult]
  def deleteFpgaImage(input: avias.ec2.models.DeleteFpgaImageRequest): F[avias.ec2.models.DeleteFpgaImageResult]
  def describeSpotFleetInstances(input: avias.ec2.models.DescribeSpotFleetInstancesRequest): F[avias.ec2.models.DescribeSpotFleetInstancesResponse]
  def createNatGateway(input: avias.ec2.models.CreateNatGatewayRequest): F[avias.ec2.models.CreateNatGatewayResult]
}