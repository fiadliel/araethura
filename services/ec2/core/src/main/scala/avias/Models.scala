package avias.ec2.models
final case class DescribeEgressOnlyInternetGatewaysResult(egressOnlyInternetGatewaySet: scala.Option[scala.List[avias.ec2.models.EgressOnlyInternetGateway]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class PrivateIpAddressSpecification(privateIpAddress: java.lang.String, primary: scala.Option[scala.Boolean] = scala.None)
final case class DescribeVolumeStatusRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, volumeId: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class AcceptVpcPeeringConnectionRequest(dryRun: scala.Option[scala.Boolean] = scala.None, vpcPeeringConnectionId: scala.Option[java.lang.String] = scala.None)
final case class RestoreAddressToClassicResult(publicIp: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None)
final case class PurchaseHostReservationRequest(hostIdSet: scala.List[java.lang.String], offeringId: java.lang.String, clientToken: scala.Option[java.lang.String] = scala.None, limitPrice: scala.Option[java.lang.String] = scala.None, currencyCode: scala.Option[java.lang.String] = scala.None)
final case class DescribeSpotFleetRequestHistoryResponse(historyRecordSet: scala.List[avias.ec2.models.HistoryRecord], lastEvaluatedTime: java.time.Instant, startTime: java.time.Instant, spotFleetRequestId: java.lang.String, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DescribeSpotFleetInstancesResponse(activeInstanceSet: scala.List[avias.ec2.models.ActiveInstance], spotFleetRequestId: java.lang.String, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DescribeMovingAddressesResult(movingAddressStatusSet: scala.Option[scala.List[avias.ec2.models.MovingAddressStatus]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class ReservedInstancesModificationResult(reservedInstancesId: scala.Option[java.lang.String] = scala.None, targetConfiguration: scala.Option[avias.ec2.models.ReservedInstancesConfiguration] = scala.None)
final case class DescribeSecurityGroupReferencesResult(securityGroupReferenceSet: scala.Option[scala.List[avias.ec2.models.SecurityGroupReference]] = scala.None)
final case class UnassignIpv6AddressesRequest(ipv6Addresses: scala.List[java.lang.String], networkInterfaceId: java.lang.String)
final case class DescribeIdFormatResult(statusSet: scala.Option[scala.List[avias.ec2.models.IdFormat]] = scala.None)
final case class VpnGateway(amazonSideAsn: scala.Option[scala.Long] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, vpnGatewayId: scala.Option[java.lang.String] = scala.None, attachments: scala.Option[scala.List[avias.ec2.models.VpcAttachment]] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, `type`: scala.Option[java.lang.String] = scala.None, state: scala.Option[java.lang.String] = scala.None)
final case class VpcCidrBlockState(state: scala.Option[java.lang.String] = scala.None, statusMessage: scala.Option[java.lang.String] = scala.None)
final case class DeleteVpcEndpointsResult(unsuccessful: scala.Option[scala.List[avias.ec2.models.UnsuccessfulItem]] = scala.None)
final case class FpgaImageAttribute(fpgaImageId: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, loadPermissions: scala.Option[scala.List[avias.ec2.models.LoadPermission]] = scala.None, productCodes: scala.Option[scala.List[avias.ec2.models.ProductCode]] = scala.None)
final case class IamInstanceProfileAssociation(associationId: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, iamInstanceProfile: scala.Option[avias.ec2.models.IamInstanceProfile] = scala.None, state: scala.Option[java.lang.String] = scala.None, timestamp: scala.Option[java.time.Instant] = scala.None)
final case class ElasticGpus(elasticGpuId: scala.Option[java.lang.String] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, elasticGpuType: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, elasticGpuHealth: scala.Option[avias.ec2.models.ElasticGpuHealth] = scala.None, elasticGpuState: scala.Option[java.lang.String] = scala.None)
final case class DescribeReservedInstancesResult(reservedInstancesSet: scala.Option[scala.List[avias.ec2.models.ReservedInstances]] = scala.None)
final case class VolumeStatusItem(actionsSet: scala.Option[scala.List[avias.ec2.models.VolumeStatusAction]] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, volumeId: scala.Option[java.lang.String] = scala.None, eventsSet: scala.Option[scala.List[avias.ec2.models.VolumeStatusEvent]] = scala.None, volumeStatus: scala.Option[avias.ec2.models.VolumeStatusInfo] = scala.None)
final case class ModifyVolumeRequest(volumeId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None, size: scala.Option[scala.Int] = scala.None, iops: scala.Option[scala.Int] = scala.None, volumeType: scala.Option[java.lang.String] = scala.None)
final case class CreateSnapshotRequest(volumeId: java.lang.String, description: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class AuthorizeSecurityGroupIngressRequest(sourceSecurityGroupName: scala.Option[java.lang.String] = scala.None, groupId: scala.Option[java.lang.String] = scala.None, ipProtocol: scala.Option[java.lang.String] = scala.None, groupName: scala.Option[java.lang.String] = scala.None, sourceSecurityGroupOwnerId: scala.Option[java.lang.String] = scala.None, cidrIp: scala.Option[java.lang.String] = scala.None, fromPort: scala.Option[scala.Int] = scala.None, toPort: scala.Option[scala.Int] = scala.None, ipPermissions: scala.Option[scala.List[avias.ec2.models.IpPermission]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ReservedInstancesConfiguration(availabilityZone: scala.Option[java.lang.String] = scala.None, platform: scala.Option[java.lang.String] = scala.None, instanceCount: scala.Option[scala.Int] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None, scope: scala.Option[java.lang.String] = scala.None)
final case class UnmonitorInstancesRequest(instanceId: scala.List[java.lang.String], dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CreateNetworkInterfacePermissionResult(interfacePermission: scala.Option[avias.ec2.models.NetworkInterfacePermission] = scala.None)
final case class CopyFpgaImageResult(fpgaImageId: scala.Option[java.lang.String] = scala.None)
final case class GetReservedInstancesExchangeQuoteResult(reservedInstanceValueRollup: scala.Option[avias.ec2.models.ReservationValue] = scala.None, targetConfigurationValueRollup: scala.Option[avias.ec2.models.ReservationValue] = scala.None, targetConfigurationValueSet: scala.Option[scala.List[avias.ec2.models.TargetReservationValue]] = scala.None, currencyCode: scala.Option[java.lang.String] = scala.None, paymentDue: scala.Option[java.lang.String] = scala.None, validationFailureReason: scala.Option[java.lang.String] = scala.None, outputReservedInstancesWillExpireAt: scala.Option[java.time.Instant] = scala.None, isValidExchange: scala.Option[scala.Boolean] = scala.None, reservedInstanceValueSet: scala.Option[scala.List[avias.ec2.models.ReservedInstanceReservationValue]] = scala.None)
final case class AuthorizeSecurityGroupEgressRequest(groupId: java.lang.String, ipProtocol: scala.Option[java.lang.String] = scala.None, sourceSecurityGroupOwnerId: scala.Option[java.lang.String] = scala.None, sourceSecurityGroupName: scala.Option[java.lang.String] = scala.None, cidrIp: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, ipPermissions: scala.Option[scala.List[avias.ec2.models.IpPermission]] = scala.None, fromPort: scala.Option[scala.Int] = scala.None, toPort: scala.Option[scala.Int] = scala.None)
final case class DeleteNetworkAclEntryRequest(egress: scala.Boolean, networkAclId: java.lang.String, ruleNumber: scala.Int, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ModifyReservedInstancesRequest(reservedInstancesId: scala.List[java.lang.String], reservedInstancesConfigurationSetItemType: scala.List[avias.ec2.models.ReservedInstancesConfiguration], clientToken: scala.Option[java.lang.String] = scala.None)
final case class DescribeVpnConnectionsResult(vpnConnectionSet: scala.Option[scala.List[avias.ec2.models.VpnConnection]] = scala.None)
final case class ModifyInstancePlacementRequest(instanceId: java.lang.String, hostId: scala.Option[java.lang.String] = scala.None, affinity: scala.Option[java.lang.String] = scala.None, tenancy: scala.Option[java.lang.String] = scala.None)
final case class ModifyVpcAttributeRequest(vpcId: java.lang.String, enableDnsHostnames: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None, enableDnsSupport: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None)
final case class SpotInstanceStateFault(code: scala.Option[java.lang.String] = scala.None, message: scala.Option[java.lang.String] = scala.None)
final case class CreateVolumePermission(group: scala.Option[java.lang.String] = scala.None, userId: scala.Option[java.lang.String] = scala.None)
final case class UnsuccessfulItemError(code: java.lang.String, message: java.lang.String)
final case class DescribeImportImageTasksRequest(importTaskId: scala.Option[scala.List[java.lang.String]] = scala.None, filters: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeSnapshotAttributeResult(createVolumePermission: scala.Option[scala.List[avias.ec2.models.CreateVolumePermission]] = scala.None, productCodes: scala.Option[scala.List[avias.ec2.models.ProductCode]] = scala.None, snapshotId: scala.Option[java.lang.String] = scala.None)
final case class Ipv6Range(cidrIpv6: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None)
final case class ModifyVpcEndpointRequest(vpcEndpointId: java.lang.String, policyDocument: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, resetPolicy: scala.Option[scala.Boolean] = scala.None, privateDnsEnabled: scala.Option[scala.Boolean] = scala.None, addSecurityGroupId: scala.Option[scala.List[java.lang.String]] = scala.None, addRouteTableId: scala.Option[scala.List[java.lang.String]] = scala.None, addSubnetId: scala.Option[scala.List[java.lang.String]] = scala.None, removeSecurityGroupId: scala.Option[scala.List[java.lang.String]] = scala.None, removeRouteTableId: scala.Option[scala.List[java.lang.String]] = scala.None, removeSubnetId: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class DisassociateSubnetCidrBlockResult(ipv6CidrBlockAssociation: scala.Option[avias.ec2.models.SubnetIpv6CidrBlockAssociation] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None)
final case class DescribeClassicLinkInstancesRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CreateVpcResult(vpc: scala.Option[avias.ec2.models.Vpc] = scala.None)
final case class CreatePlacementGroupRequest(groupName: java.lang.String, strategy: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class NetworkAclAssociation(networkAclAssociationId: scala.Option[java.lang.String] = scala.None, networkAclId: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None)
final case class DescribeNetworkInterfacesResult(networkInterfaceSet: scala.Option[scala.List[avias.ec2.models.NetworkInterface]] = scala.None)
final case class CancelReservedInstancesListingRequest(reservedInstancesListingId: java.lang.String)
final case class CreateSecurityGroupRequest(groupDescription: java.lang.String, groupName: java.lang.String, vpcId: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DnsEntry(dnsName: scala.Option[java.lang.String] = scala.None, hostedZoneId: scala.Option[java.lang.String] = scala.None)
final case class DescribeSubnetsResult(subnetSet: scala.Option[scala.List[avias.ec2.models.Subnet]] = scala.None)
final case class Route(destinationPrefixListId: scala.Option[java.lang.String] = scala.None, networkInterfaceId: scala.Option[java.lang.String] = scala.None, natGatewayId: scala.Option[java.lang.String] = scala.None, egressOnlyInternetGatewayId: scala.Option[java.lang.String] = scala.None, instanceOwnerId: scala.Option[java.lang.String] = scala.None, destinationIpv6CidrBlock: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, vpcPeeringConnectionId: scala.Option[java.lang.String] = scala.None, destinationCidrBlock: scala.Option[java.lang.String] = scala.None, gatewayId: scala.Option[java.lang.String] = scala.None, origin: scala.Option[java.lang.String] = scala.None, state: scala.Option[java.lang.String] = scala.None)
final case class DeleteSnapshotRequest(snapshotId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CreateNetworkInterfaceRequest(subnetId: java.lang.String, privateIpAddresses: scala.Option[scala.List[avias.ec2.models.PrivateIpAddressSpecification]] = scala.None, description: scala.Option[java.lang.String] = scala.None, privateIpAddress: scala.Option[java.lang.String] = scala.None, ipv6Addresses: scala.Option[scala.List[avias.ec2.models.InstanceIpv6Address]] = scala.None, securityGroupId: scala.Option[scala.List[java.lang.String]] = scala.None, ipv6AddressCount: scala.Option[scala.Int] = scala.None, secondaryPrivateIpAddressCount: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeVolumesModificationsResult(volumeModificationSet: scala.Option[scala.List[avias.ec2.models.VolumeModification]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DescribeNatGatewaysResult(natGatewaySet: scala.Option[scala.List[avias.ec2.models.NatGateway]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class ReservationValue(hourlyPrice: scala.Option[java.lang.String] = scala.None, remainingTotalValue: scala.Option[java.lang.String] = scala.None, remainingUpfrontValue: scala.Option[java.lang.String] = scala.None)
final case class DescribeVolumesModificationsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, volumeId: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ReleaseAddressRequest(allocationId: scala.Option[java.lang.String] = scala.None, publicIp: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class NetworkInterfacePermission(networkInterfacePermissionId: scala.Option[java.lang.String] = scala.None, networkInterfaceId: scala.Option[java.lang.String] = scala.None, awsAccountId: scala.Option[java.lang.String] = scala.None, awsService: scala.Option[java.lang.String] = scala.None, permission: scala.Option[java.lang.String] = scala.None, permissionState: scala.Option[avias.ec2.models.NetworkInterfacePermissionState] = scala.None)
final case class ModifyImageAttributeRequest(imageId: java.lang.String, userId: scala.Option[scala.List[java.lang.String]] = scala.None, attribute: scala.Option[java.lang.String] = scala.None, value: scala.Option[java.lang.String] = scala.None, operationType: scala.Option[java.lang.String] = scala.None, launchPermission: scala.Option[avias.ec2.models.LaunchPermissionModifications] = scala.None, description: scala.Option[avias.ec2.models.AttributeValue] = scala.None, userGroup: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, productCode: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class DescribeVolumeAttributeRequest(volumeId: java.lang.String, attribute: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeVpcClassicLinkResult(vpcSet: scala.Option[scala.List[avias.ec2.models.VpcClassicLink]] = scala.None)
final case class PurchaseHostReservationResult(clientToken: scala.Option[java.lang.String] = scala.None, totalHourlyPrice: scala.Option[java.lang.String] = scala.None, totalUpfrontPrice: scala.Option[java.lang.String] = scala.None, currencyCode: scala.Option[java.lang.String] = scala.None, purchase: scala.Option[scala.List[avias.ec2.models.Purchase]] = scala.None)
final case class DisableVpcClassicLinkResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class AllocateHostsResult(hostIdSet: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class GetConsoleScreenshotRequest(instanceId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None, wakeUp: scala.Option[scala.Boolean] = scala.None)
final case class BlockDeviceMapping(deviceName: scala.Option[java.lang.String] = scala.None, virtualName: scala.Option[java.lang.String] = scala.None, noDevice: scala.Option[java.lang.String] = scala.None, ebs: scala.Option[avias.ec2.models.EbsBlockDevice] = scala.None)
final case class ImportImageRequest(roleName: scala.Option[java.lang.String] = scala.None, hypervisor: scala.Option[java.lang.String] = scala.None, licenseType: scala.Option[java.lang.String] = scala.None, clientToken: scala.Option[java.lang.String] = scala.None, platform: scala.Option[java.lang.String] = scala.None, architecture: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, clientData: scala.Option[avias.ec2.models.ClientData] = scala.None, diskContainer: scala.Option[scala.List[avias.ec2.models.ImageDiskContainer]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CreateVpnGatewayResult(vpnGateway: scala.Option[avias.ec2.models.VpnGateway] = scala.None)
final case class DeleteNetworkAclRequest(networkAclId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class SnapshotDetail(url: scala.Option[java.lang.String] = scala.None, progress: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, format: scala.Option[java.lang.String] = scala.None, snapshotId: scala.Option[java.lang.String] = scala.None, statusMessage: scala.Option[java.lang.String] = scala.None, deviceName: scala.Option[java.lang.String] = scala.None, diskImageSize: scala.Option[scala.Double] = scala.None, userBucket: scala.Option[avias.ec2.models.UserBucketDetails] = scala.None)
final case class ConfirmProductInstanceResult(ownerId: scala.Option[java.lang.String] = scala.None, `return`: scala.Option[scala.Boolean] = scala.None)
final case class CreateSpotDatafeedSubscriptionRequest(bucket: java.lang.String, prefix: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DeleteKeyPairRequest(keyName: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ScheduledInstancesMonitoring(enabled: scala.Option[scala.Boolean] = scala.None)
final case class DescribeInternetGatewaysResult(internetGatewaySet: scala.Option[scala.List[avias.ec2.models.InternetGateway]] = scala.None)
final case class ClientData(comment: scala.Option[java.lang.String] = scala.None, uploadEnd: scala.Option[java.time.Instant] = scala.None, uploadStart: scala.Option[java.time.Instant] = scala.None, uploadSize: scala.Option[scala.Double] = scala.None)
final case class DescribeVolumesRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, volumeId: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ConfirmProductInstanceRequest(instanceId: java.lang.String, productCode: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class AttachVolumeRequest(device: java.lang.String, instanceId: java.lang.String, volumeId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CancelReservedInstancesListingResult(reservedInstancesListingsSet: scala.Option[scala.List[avias.ec2.models.ReservedInstancesListing]] = scala.None)
final case class DisableVpcClassicLinkDnsSupportRequest(vpcId: scala.Option[java.lang.String] = scala.None)
final case class CreateNetworkAclEntryRequest(networkAclId: java.lang.String, protocol: java.lang.String, ruleAction: java.lang.String, ruleNumber: scala.Int, egress: scala.Boolean, cidrBlock: scala.Option[java.lang.String] = scala.None, ipv6CidrBlock: scala.Option[java.lang.String] = scala.None, icmp: scala.Option[avias.ec2.models.IcmpTypeCode] = scala.None, portRange: scala.Option[avias.ec2.models.PortRange] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class StartInstancesRequest(instanceId: scala.List[java.lang.String], additionalInfo: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class NewDhcpConfiguration(key: scala.Option[java.lang.String] = scala.None, value: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class DisassociateSubnetCidrBlockRequest(associationId: java.lang.String)
final case class Purchase(paymentOption: scala.Option[java.lang.String] = scala.None, hostIdSet: scala.Option[scala.List[java.lang.String]] = scala.None, hostReservationId: scala.Option[java.lang.String] = scala.None, hourlyPrice: scala.Option[java.lang.String] = scala.None, instanceFamily: scala.Option[java.lang.String] = scala.None, upfrontPrice: scala.Option[java.lang.String] = scala.None, duration: scala.Option[scala.Int] = scala.None, currencyCode: scala.Option[java.lang.String] = scala.None)
final case class CreateFpgaImageResult(fpgaImageId: scala.Option[java.lang.String] = scala.None, fpgaImageGlobalId: scala.Option[java.lang.String] = scala.None)
final case class ImportKeyPairRequest(keyName: java.lang.String, publicKeyMaterial: scala.Array[scala.Byte], dryRun: scala.Option[scala.Boolean] = scala.None)
final case class RequestSpotFleetRequest(spotFleetRequestConfig: avias.ec2.models.SpotFleetRequestConfigData, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ImportInstanceLaunchSpecification(architecture: scala.Option[java.lang.String] = scala.None, instanceInitiatedShutdownBehavior: scala.Option[java.lang.String] = scala.None, additionalInfo: scala.Option[java.lang.String] = scala.None, privateIpAddress: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None, placement: scala.Option[avias.ec2.models.Placement] = scala.None, groupName: scala.Option[scala.List[java.lang.String]] = scala.None, groupId: scala.Option[scala.List[java.lang.String]] = scala.None, monitoring: scala.Option[scala.Boolean] = scala.None, userData: scala.Option[avias.ec2.models.UserData] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None)
final case class DescribeImportImageTasksResult(importImageTaskSet: scala.Option[scala.List[avias.ec2.models.ImportImageTask]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DescribeAddressesResult(addressesSet: scala.Option[scala.List[avias.ec2.models.Address]] = scala.None)
final case class DeleteNatGatewayRequest(natGatewayId: java.lang.String)
final case class ElasticGpuHealth(status: scala.Option[java.lang.String] = scala.None)
final case class RegisterImageResult(imageId: scala.Option[java.lang.String] = scala.None)
final case class DescribeFpgaImagesResult(fpgaImageSet: scala.Option[scala.List[avias.ec2.models.FpgaImage]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DeleteVpcEndpointsRequest(vpcEndpointId: scala.List[java.lang.String], dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CreateDefaultVpcRequest(dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ModifyNetworkInterfaceAttributeRequest(networkInterfaceId: java.lang.String, attachment: scala.Option[avias.ec2.models.NetworkInterfaceAttachmentChanges] = scala.None, description: scala.Option[avias.ec2.models.AttributeValue] = scala.None, securityGroupId: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, sourceDestCheck: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None)
final case class AssociateAddressResult(associationId: scala.Option[java.lang.String] = scala.None)
final case class DescribeIamInstanceProfileAssociationsResult(iamInstanceProfileAssociationSet: scala.Option[scala.List[avias.ec2.models.IamInstanceProfileAssociation]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class AccountAttribute(attributeName: scala.Option[java.lang.String] = scala.None, attributeValueSet: scala.Option[scala.List[avias.ec2.models.AccountAttributeValue]] = scala.None)
final case class DescribeConversionTasksRequest(conversionTaskId: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CreateVpnConnectionRouteRequest(destinationCidrBlock: java.lang.String, vpnConnectionId: java.lang.String)
final case class SecurityGroup(groupId: scala.Option[java.lang.String] = scala.None, groupDescription: scala.Option[java.lang.String] = scala.None, ownerId: scala.Option[java.lang.String] = scala.None, groupName: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, ipPermissions: scala.Option[scala.List[avias.ec2.models.IpPermission]] = scala.None, ipPermissionsEgress: scala.Option[scala.List[avias.ec2.models.IpPermission]] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None)
final case class ModifyIdFormatRequest(resource: java.lang.String, useLongIds: scala.Boolean)
final case class DiskImageDetail(bytes: scala.Long, format: java.lang.String, importManifestUrl: java.lang.String)
final case class DescribeSpotPriceHistoryRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, productDescription: scala.Option[scala.List[java.lang.String]] = scala.None, endTime: scala.Option[java.time.Instant] = scala.None, startTime: scala.Option[java.time.Instant] = scala.None, instanceType: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class FpgaImageState(code: scala.Option[java.lang.String] = scala.None, message: scala.Option[java.lang.String] = scala.None)
final case class ResetFpgaImageAttributeResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class DeleteFlowLogsResult(unsuccessful: scala.Option[scala.List[avias.ec2.models.UnsuccessfulItem]] = scala.None)
final case class EgressOnlyInternetGateway(attachmentSet: scala.Option[scala.List[avias.ec2.models.InternetGatewayAttachment]] = scala.None, egressOnlyInternetGatewayId: scala.Option[java.lang.String] = scala.None)
final case class DescribeSpotFleetRequestsRequest(dryRun: scala.Option[scala.Boolean] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, spotFleetRequestId: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class CreateVolumePermissionModifications(add: scala.Option[scala.List[avias.ec2.models.CreateVolumePermission]] = scala.None, remove: scala.Option[scala.List[avias.ec2.models.CreateVolumePermission]] = scala.None)
final case class DescribeVpcsResult(vpcSet: scala.Option[scala.List[avias.ec2.models.Vpc]] = scala.None)
final case class DescribeNetworkInterfacesRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, networkInterfaceId: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class KeyPairInfo(keyFingerprint: scala.Option[java.lang.String] = scala.None, keyName: scala.Option[java.lang.String] = scala.None)
final case class VpcAttachment(state: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None)
final case class DescribeKeyPairsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, keyName: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class MovingAddressStatus(moveStatus: scala.Option[java.lang.String] = scala.None, publicIp: scala.Option[java.lang.String] = scala.None)
final case class SnapshotDiskContainer(description: scala.Option[java.lang.String] = scala.None, format: scala.Option[java.lang.String] = scala.None, url: scala.Option[java.lang.String] = scala.None, userBucket: scala.Option[avias.ec2.models.UserBucket] = scala.None)
final case class DescribeIdFormatRequest(resource: scala.Option[java.lang.String] = scala.None)
final case class ExportToS3Task(containerFormat: scala.Option[java.lang.String] = scala.None, diskImageFormat: scala.Option[java.lang.String] = scala.None, s3Bucket: scala.Option[java.lang.String] = scala.None, s3Key: scala.Option[java.lang.String] = scala.None)
final case class Reservation(groupSet: scala.Option[scala.List[avias.ec2.models.GroupIdentifier]] = scala.None, instancesSet: scala.Option[scala.List[avias.ec2.models.Instance]] = scala.None, ownerId: scala.Option[java.lang.String] = scala.None, requesterId: scala.Option[java.lang.String] = scala.None, reservationId: scala.Option[java.lang.String] = scala.None)
final case class ReleaseHostsRequest(hostId: scala.List[java.lang.String])
final case class Image(productCodes: scala.Option[scala.List[avias.ec2.models.ProductCode]] = scala.None, architecture: scala.Option[java.lang.String] = scala.None, platform: scala.Option[java.lang.String] = scala.None, imageOwnerAlias: scala.Option[java.lang.String] = scala.None, rootDeviceName: scala.Option[java.lang.String] = scala.None, ramdiskId: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, imageLocation: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, kernelId: scala.Option[java.lang.String] = scala.None, imageOwnerId: scala.Option[java.lang.String] = scala.None, imageId: scala.Option[java.lang.String] = scala.None, creationDate: scala.Option[java.lang.String] = scala.None, sriovNetSupport: scala.Option[java.lang.String] = scala.None, stateReason: scala.Option[avias.ec2.models.StateReason] = scala.None, rootDeviceType: scala.Option[java.lang.String] = scala.None, imageType: scala.Option[java.lang.String] = scala.None, imageState: scala.Option[java.lang.String] = scala.None, virtualizationType: scala.Option[java.lang.String] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, blockDeviceMapping: scala.Option[scala.List[avias.ec2.models.BlockDeviceMapping]] = scala.None, isPublic: scala.Option[scala.Boolean] = scala.None, enaSupport: scala.Option[scala.Boolean] = scala.None, hypervisor: scala.Option[java.lang.String] = scala.None)
final case class InstanceNetworkInterfaceAttachment(attachmentId: scala.Option[java.lang.String] = scala.None, attachTime: scala.Option[java.time.Instant] = scala.None, deviceIndex: scala.Option[scala.Int] = scala.None, deleteOnTermination: scala.Option[scala.Boolean] = scala.None, status: scala.Option[java.lang.String] = scala.None)
final case class DisableVgwRoutePropagationRequest(gatewayId: java.lang.String, routeTableId: java.lang.String)
final case class DeregisterImageRequest(imageId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CreateVpnGatewayRequest(`type`: java.lang.String, availabilityZone: scala.Option[java.lang.String] = scala.None, amazonSideAsn: scala.Option[scala.Long] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class RevokeSecurityGroupEgressRequest(groupId: java.lang.String, ipProtocol: scala.Option[java.lang.String] = scala.None, sourceSecurityGroupOwnerId: scala.Option[java.lang.String] = scala.None, sourceSecurityGroupName: scala.Option[java.lang.String] = scala.None, cidrIp: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, ipPermissions: scala.Option[scala.List[avias.ec2.models.IpPermission]] = scala.None, fromPort: scala.Option[scala.Int] = scala.None, toPort: scala.Option[scala.Int] = scala.None)
final case class PrefixListId(description: scala.Option[java.lang.String] = scala.None, prefixListId: scala.Option[java.lang.String] = scala.None)
final case class DescribePlacementGroupsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, groupName: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class ServiceDetail(serviceName: scala.Option[java.lang.String] = scala.None, owner: scala.Option[java.lang.String] = scala.None, privateDnsName: scala.Option[java.lang.String] = scala.None, serviceType: scala.Option[scala.List[avias.ec2.models.ServiceTypeDetail]] = scala.None, availabilityZoneSet: scala.Option[scala.List[java.lang.String]] = scala.None, baseEndpointDnsNameSet: scala.Option[scala.List[java.lang.String]] = scala.None, vpcEndpointPolicySupported: scala.Option[scala.Boolean] = scala.None, acceptanceRequired: scala.Option[scala.Boolean] = scala.None)
final case class DescribeSpotInstanceRequestsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, spotInstanceRequestId: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class CancelSpotFleetRequestsResponse(successfulFleetRequestSet: scala.Option[scala.List[avias.ec2.models.CancelSpotFleetRequestsSuccessItem]] = scala.None, unsuccessfulFleetRequestSet: scala.Option[scala.List[avias.ec2.models.CancelSpotFleetRequestsErrorItem]] = scala.None)
final case class ModifyVpcPeeringConnectionOptionsResult(accepterPeeringConnectionOptions: scala.Option[avias.ec2.models.PeeringConnectionOptions] = scala.None, requesterPeeringConnectionOptions: scala.Option[avias.ec2.models.PeeringConnectionOptions] = scala.None)
final case class ConversionTask(conversionTaskId: java.lang.String, state: java.lang.String, expirationTime: scala.Option[java.lang.String] = scala.None, statusMessage: scala.Option[java.lang.String] = scala.None, importInstance: scala.Option[avias.ec2.models.ImportInstanceTaskDetails] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, importVolume: scala.Option[avias.ec2.models.ImportVolumeTaskDetails] = scala.None)
final case class DiskImageVolumeDescription(id: java.lang.String, size: scala.Option[scala.Long] = scala.None)
final case class ModifyInstancePlacementResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class RestoreAddressToClassicRequest(publicIp: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeScheduledInstanceAvailabilityResult(nextToken: scala.Option[java.lang.String] = scala.None, scheduledInstanceAvailabilitySet: scala.Option[scala.List[avias.ec2.models.ScheduledInstanceAvailability]] = scala.None)
final case class EbsInstanceBlockDevice(attachTime: scala.Option[java.time.Instant] = scala.None, deleteOnTermination: scala.Option[scala.Boolean] = scala.None, status: scala.Option[java.lang.String] = scala.None, volumeId: scala.Option[java.lang.String] = scala.None)
final case class NetworkAcl(networkAclId: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, entrySet: scala.Option[scala.List[avias.ec2.models.NetworkAclEntry]] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, associationSet: scala.Option[scala.List[avias.ec2.models.NetworkAclAssociation]] = scala.None, default: scala.Option[scala.Boolean] = scala.None)
final case class DeleteInternetGatewayRequest(internetGatewayId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeElasticGpusRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, elasticGpuId: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class LoadPermissionRequest(group: scala.Option[java.lang.String] = scala.None, userId: scala.Option[java.lang.String] = scala.None)
final case class RequestSpotInstancesResult(spotInstanceRequestSet: scala.Option[scala.List[avias.ec2.models.SpotInstanceRequest]] = scala.None)
final case class UpdateSecurityGroupRuleDescriptionsEgressResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class DeleteDhcpOptionsRequest(dhcpOptionsId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ImportKeyPairResult(keyFingerprint: scala.Option[java.lang.String] = scala.None, keyName: scala.Option[java.lang.String] = scala.None)
final case class DetachVolumeRequest(volumeId: java.lang.String, device: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, force: scala.Option[scala.Boolean] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ScheduledInstancesPrivateIpAddressConfig(primary: scala.Option[scala.Boolean] = scala.None, privateIpAddress: scala.Option[java.lang.String] = scala.None)
final case class VpnStaticRoute(destinationCidrBlock: scala.Option[java.lang.String] = scala.None, source: scala.Option[java.lang.String] = scala.None, state: scala.Option[java.lang.String] = scala.None)
final case class IcmpTypeCode(code: scala.Option[scala.Int] = scala.None, `type`: scala.Option[scala.Int] = scala.None)
final case class DeleteSubnetRequest(subnetId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class VolumeAttachment(attachTime: scala.Option[java.time.Instant] = scala.None, device: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, volumeId: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, deleteOnTermination: scala.Option[scala.Boolean] = scala.None)
final case class RunInstancesRequest(imageId: java.lang.String, maxCount: scala.Int, minCount: scala.Int, instanceInitiatedShutdownBehavior: scala.Option[java.lang.String] = scala.None, ramdiskId: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None, clientToken: scala.Option[java.lang.String] = scala.None, additionalInfo: scala.Option[java.lang.String] = scala.None, privateIpAddress: scala.Option[java.lang.String] = scala.None, keyName: scala.Option[java.lang.String] = scala.None, kernelId: scala.Option[java.lang.String] = scala.None, userData: scala.Option[java.lang.String] = scala.None, elasticGpuSpecification: scala.Option[scala.List[avias.ec2.models.ElasticGpuSpecification]] = scala.None, placement: scala.Option[avias.ec2.models.Placement] = scala.None, ipv6Address: scala.Option[scala.List[avias.ec2.models.InstanceIpv6Address]] = scala.None, tagSpecification: scala.Option[scala.List[avias.ec2.models.TagSpecification]] = scala.None, iamInstanceProfile: scala.Option[avias.ec2.models.IamInstanceProfileSpecification] = scala.None, monitoring: scala.Option[avias.ec2.models.RunInstancesMonitoringEnabled] = scala.None, securityGroup: scala.Option[scala.List[java.lang.String]] = scala.None, securityGroupId: scala.Option[scala.List[java.lang.String]] = scala.None, networkInterface: scala.Option[scala.List[avias.ec2.models.InstanceNetworkInterfaceSpecification]] = scala.None, ipv6AddressCount: scala.Option[scala.Int] = scala.None, disableApiTermination: scala.Option[scala.Boolean] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, ebsOptimized: scala.Option[scala.Boolean] = scala.None, blockDeviceMapping: scala.Option[scala.List[avias.ec2.models.BlockDeviceMapping]] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None)
final case class PriceSchedule(active: scala.Option[scala.Boolean] = scala.None, currencyCode: scala.Option[java.lang.String] = scala.None, price: scala.Option[scala.Double] = scala.None, term: scala.Option[scala.Long] = scala.None)
final case class ModifyVpcTenancyRequest(vpcId: java.lang.String, instanceTenancy: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeSpotFleetRequestsResponse(spotFleetRequestConfigSet: scala.List[avias.ec2.models.SpotFleetRequestConfig], nextToken: scala.Option[java.lang.String] = scala.None)
final case class HostOffering(currencyCode: scala.Option[java.lang.String] = scala.None, duration: scala.Option[scala.Int] = scala.None, hourlyPrice: scala.Option[java.lang.String] = scala.None, instanceFamily: scala.Option[java.lang.String] = scala.None, offeringId: scala.Option[java.lang.String] = scala.None, upfrontPrice: scala.Option[java.lang.String] = scala.None, paymentOption: scala.Option[java.lang.String] = scala.None)
final case class EnableVpcClassicLinkDnsSupportRequest(vpcId: scala.Option[java.lang.String] = scala.None)
final case class AssociateAddressRequest(networkInterfaceId: scala.Option[java.lang.String] = scala.None, privateIpAddress: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, publicIp: scala.Option[java.lang.String] = scala.None, allocationId: scala.Option[java.lang.String] = scala.None, allowReassociation: scala.Option[scala.Boolean] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DisassociateVpcCidrBlockResult(ipv6CidrBlockAssociation: scala.Option[avias.ec2.models.VpcIpv6CidrBlockAssociation] = scala.None, cidrBlockAssociation: scala.Option[avias.ec2.models.VpcCidrBlockAssociation] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None)
final case class ClassicLoadBalancersConfig(classicLoadBalancers: scala.List[avias.ec2.models.ClassicLoadBalancer])
final case class DescribeFlowLogsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, flowLogId: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DescribeHostReservationOfferingsResult(nextToken: scala.Option[java.lang.String] = scala.None, offeringSet: scala.Option[scala.List[avias.ec2.models.HostOffering]] = scala.None)
final case class CreateSecurityGroupResult(groupId: scala.Option[java.lang.String] = scala.None)
final case class DescribeNetworkInterfacePermissionsRequest(networkInterfacePermissionId: scala.Option[scala.List[java.lang.String]] = scala.None, filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, maxResults: scala.Option[scala.Int] = scala.None)
final case class CreateInstanceExportTaskRequest(instanceId: java.lang.String, description: scala.Option[java.lang.String] = scala.None, exportToS3: scala.Option[avias.ec2.models.ExportToS3TaskSpecification] = scala.None, targetEnvironment: scala.Option[java.lang.String] = scala.None)
final case class StateReason(code: scala.Option[java.lang.String] = scala.None, message: scala.Option[java.lang.String] = scala.None)
final case class RouteTable(routeTableId: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, associationSet: scala.Option[scala.List[avias.ec2.models.RouteTableAssociation]] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, routeSet: scala.Option[scala.List[avias.ec2.models.Route]] = scala.None, propagatingVgwSet: scala.Option[scala.List[avias.ec2.models.PropagatingVgw]] = scala.None)
final case class CreateRouteRequest(routeTableId: java.lang.String, networkInterfaceId: scala.Option[java.lang.String] = scala.None, natGatewayId: scala.Option[java.lang.String] = scala.None, egressOnlyInternetGatewayId: scala.Option[java.lang.String] = scala.None, destinationIpv6CidrBlock: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, vpcPeeringConnectionId: scala.Option[java.lang.String] = scala.None, destinationCidrBlock: scala.Option[java.lang.String] = scala.None, gatewayId: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class BundleTaskError(code: scala.Option[java.lang.String] = scala.None, message: scala.Option[java.lang.String] = scala.None)
final case class GetConsoleOutputResult(instanceId: scala.Option[java.lang.String] = scala.None, output: scala.Option[java.lang.String] = scala.None, timestamp: scala.Option[java.time.Instant] = scala.None)
final case class AvailabilityZoneMessage(message: scala.Option[java.lang.String] = scala.None)
final case class ResetImageAttributeRequest(attribute: java.lang.String, imageId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeHostsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, hostId: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class ModifyIdentityIdFormatRequest(principalArn: java.lang.String, resource: java.lang.String, useLongIds: scala.Boolean)
final case class Ipv6CidrBlock(ipv6CidrBlock: scala.Option[java.lang.String] = scala.None)
final case class VolumeDetail(size: scala.Long)
final case class CreateDefaultSubnetRequest(availabilityZone: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ReplaceRouteTableAssociationResult(newAssociationId: scala.Option[java.lang.String] = scala.None)
final case class MoveAddressToVpcResult(allocationId: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None)
final case class DescribeReservedInstancesOfferingsResult(reservedInstancesOfferingsSet: scala.Option[scala.List[avias.ec2.models.ReservedInstancesOffering]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class VolumeStatusDetails(name: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None)
final case class DescribeVpnConnectionsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, vpnConnectionId: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DeletePlacementGroupRequest(groupName: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ReplaceNetworkAclEntryRequest(networkAclId: java.lang.String, protocol: java.lang.String, ruleAction: java.lang.String, ruleNumber: scala.Int, egress: scala.Boolean, cidrBlock: scala.Option[java.lang.String] = scala.None, ipv6CidrBlock: scala.Option[java.lang.String] = scala.None, icmp: scala.Option[avias.ec2.models.IcmpTypeCode] = scala.None, portRange: scala.Option[avias.ec2.models.PortRange] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class AvailabilityZone(zoneState: scala.Option[java.lang.String] = scala.None, messageSet: scala.Option[scala.List[avias.ec2.models.AvailabilityZoneMessage]] = scala.None, regionName: scala.Option[java.lang.String] = scala.None, zoneName: scala.Option[java.lang.String] = scala.None)
final case class CreateEgressOnlyInternetGatewayResult(clientToken: scala.Option[java.lang.String] = scala.None, egressOnlyInternetGateway: scala.Option[avias.ec2.models.EgressOnlyInternetGateway] = scala.None)
final case class AcceptVpcPeeringConnectionResult(vpcPeeringConnection: scala.Option[avias.ec2.models.VpcPeeringConnection] = scala.None)
final case class SlotStartTimeRangeRequest(earliestTime: scala.Option[java.time.Instant] = scala.None, latestTime: scala.Option[java.time.Instant] = scala.None)
final case class UnsuccessfulItem(error: avias.ec2.models.UnsuccessfulItemError, resourceId: scala.Option[java.lang.String] = scala.None)
final case class ModifyVpcTenancyResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class DescribeReservedInstancesRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, reservedInstancesId: scala.Option[scala.List[java.lang.String]] = scala.None, offeringClass: scala.Option[java.lang.String] = scala.None, offeringType: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class RecurringCharge(amount: scala.Option[scala.Double] = scala.None, frequency: scala.Option[java.lang.String] = scala.None)
final case class CreateNatGatewayResult(clientToken: scala.Option[java.lang.String] = scala.None, natGateway: scala.Option[avias.ec2.models.NatGateway] = scala.None)
final case class AttachNetworkInterfaceResult(attachmentId: scala.Option[java.lang.String] = scala.None)
final case class ScheduledInstancesPlacement(availabilityZone: scala.Option[java.lang.String] = scala.None, groupName: scala.Option[java.lang.String] = scala.None)
final case class DescribeConversionTasksResult(conversionTasks: scala.Option[scala.List[avias.ec2.models.ConversionTask]] = scala.None)
final case class HistoryRecord(eventInformation: avias.ec2.models.EventInformation, eventType: java.lang.String, timestamp: java.time.Instant)
final case class CancelConversionRequest(conversionTaskId: java.lang.String, reasonMessage: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ImportInstanceTaskDetails(volumes: scala.List[avias.ec2.models.ImportInstanceVolumeDetailItem], description: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, platform: scala.Option[java.lang.String] = scala.None)
final case class TargetReservationValue(reservationValue: scala.Option[avias.ec2.models.ReservationValue] = scala.None, targetConfiguration: scala.Option[avias.ec2.models.TargetConfiguration] = scala.None)
final case class Subnet(state: scala.Option[java.lang.String] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, cidrBlock: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, ipv6CidrBlockAssociationSet: scala.Option[scala.List[avias.ec2.models.SubnetIpv6CidrBlockAssociation]] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, availableIpAddressCount: scala.Option[scala.Int] = scala.None, defaultForAz: scala.Option[scala.Boolean] = scala.None, mapPublicIpOnLaunch: scala.Option[scala.Boolean] = scala.None, assignIpv6AddressOnCreation: scala.Option[scala.Boolean] = scala.None)
final case class ProductCode(productCode: scala.Option[java.lang.String] = scala.None, `type`: scala.Option[java.lang.String] = scala.None)
final case class DescribeKeyPairsResult(keySet: scala.Option[scala.List[avias.ec2.models.KeyPairInfo]] = scala.None)
final case class DescribeSnapshotsResult(snapshotSet: scala.Option[scala.List[avias.ec2.models.Snapshot]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DescribeVpcEndpointServicesResult(serviceNameSet: scala.Option[scala.List[java.lang.String]] = scala.None, serviceDetailSet: scala.Option[scala.List[avias.ec2.models.ServiceDetail]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class AssociateDhcpOptionsRequest(dhcpOptionsId: java.lang.String, vpcId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class GetHostReservationPurchasePreviewResult(currencyCode: scala.Option[java.lang.String] = scala.None, purchase: scala.Option[scala.List[avias.ec2.models.Purchase]] = scala.None, totalHourlyPrice: scala.Option[java.lang.String] = scala.None, totalUpfrontPrice: scala.Option[java.lang.String] = scala.None)
final case class Snapshot(progress: scala.Option[java.lang.String] = scala.None, dataEncryptionKeyId: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, ownerAlias: scala.Option[java.lang.String] = scala.None, ownerId: scala.Option[java.lang.String] = scala.None, kmsKeyId: scala.Option[java.lang.String] = scala.None, volumeId: scala.Option[java.lang.String] = scala.None, snapshotId: scala.Option[java.lang.String] = scala.None, statusMessage: scala.Option[java.lang.String] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, status: scala.Option[java.lang.String] = scala.None, startTime: scala.Option[java.time.Instant] = scala.None, volumeSize: scala.Option[scala.Int] = scala.None, encrypted: scala.Option[scala.Boolean] = scala.None)
final case class CreateCustomerGatewayRequest(bgpAsn: scala.Int, ipAddress: java.lang.String, `type`: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class RequestSpotLaunchSpecification(ramdiskId: scala.Option[java.lang.String] = scala.None, userData: scala.Option[java.lang.String] = scala.None, keyName: scala.Option[java.lang.String] = scala.None, kernelId: scala.Option[java.lang.String] = scala.None, addressingType: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None, imageId: scala.Option[java.lang.String] = scala.None, iamInstanceProfile: scala.Option[avias.ec2.models.IamInstanceProfileSpecification] = scala.None, monitoring: scala.Option[avias.ec2.models.RunInstancesMonitoringEnabled] = scala.None, networkInterface: scala.Option[scala.List[avias.ec2.models.InstanceNetworkInterfaceSpecification]] = scala.None, blockDeviceMapping: scala.Option[scala.List[avias.ec2.models.BlockDeviceMapping]] = scala.None, placement: scala.Option[avias.ec2.models.SpotPlacement] = scala.None, securityGroupId: scala.Option[scala.List[java.lang.String]] = scala.None, securityGroup: scala.Option[scala.List[java.lang.String]] = scala.None, ebsOptimized: scala.Option[scala.Boolean] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None)
final case class InstanceCapacity(availableCapacity: scala.Option[scala.Int] = scala.None, totalCapacity: scala.Option[scala.Int] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None)
final case class VpcIpv6CidrBlockAssociation(associationId: scala.Option[java.lang.String] = scala.None, ipv6CidrBlock: scala.Option[java.lang.String] = scala.None, ipv6CidrBlockState: scala.Option[avias.ec2.models.VpcCidrBlockState] = scala.None)
final case class HostInstance(instanceId: scala.Option[java.lang.String] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None)
final case class CreateVpnConnectionResult(vpnConnection: scala.Option[avias.ec2.models.VpnConnection] = scala.None)
final case class ImportInstanceVolumeDetailItem(availabilityZone: java.lang.String, status: java.lang.String, bytesConverted: scala.Long, image: avias.ec2.models.DiskImageDescription, volume: avias.ec2.models.DiskImageVolumeDescription, description: scala.Option[java.lang.String] = scala.None, statusMessage: scala.Option[java.lang.String] = scala.None)
final case class DescribeSpotDatafeedSubscriptionResult(spotDatafeedSubscription: scala.Option[avias.ec2.models.SpotDatafeedSubscription] = scala.None)
final case class DisassociateAddressRequest(associationId: scala.Option[java.lang.String] = scala.None, publicIp: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeImportSnapshotTasksRequest(importTaskId: scala.Option[scala.List[java.lang.String]] = scala.None, filters: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ClassicLoadBalancer(name: java.lang.String)
final case class DescribeReservedInstancesModificationsResult(nextToken: scala.Option[java.lang.String] = scala.None, reservedInstancesModificationsSet: scala.Option[scala.List[avias.ec2.models.ReservedInstancesModification]] = scala.None)
final case class DeleteVpnGatewayRequest(vpnGatewayId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ModifyVolumeResult(volumeModification: scala.Option[avias.ec2.models.VolumeModification] = scala.None)
final case class DetachClassicLinkVpcResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class CreateVpcEndpointRequest(vpcId: java.lang.String, serviceName: java.lang.String, policyDocument: scala.Option[java.lang.String] = scala.None, clientToken: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, privateDnsEnabled: scala.Option[scala.Boolean] = scala.None, vpcEndpointType: scala.Option[java.lang.String] = scala.None, routeTableId: scala.Option[scala.List[java.lang.String]] = scala.None, subnetId: scala.Option[scala.List[java.lang.String]] = scala.None, securityGroupId: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class CopySnapshotResult(snapshotId: scala.Option[java.lang.String] = scala.None)
final case class NetworkInterface(privateDnsName: scala.Option[java.lang.String] = scala.None, macAddress: scala.Option[java.lang.String] = scala.None, networkInterfaceId: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, privateIpAddress: scala.Option[java.lang.String] = scala.None, ownerId: scala.Option[java.lang.String] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, requesterId: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, groupSet: scala.Option[scala.List[avias.ec2.models.GroupIdentifier]] = scala.None, interfaceType: scala.Option[java.lang.String] = scala.None, association: scala.Option[avias.ec2.models.NetworkInterfaceAssociation] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, status: scala.Option[java.lang.String] = scala.None, attachment: scala.Option[avias.ec2.models.NetworkInterfaceAttachment] = scala.None, ipv6AddressesSet: scala.Option[scala.List[avias.ec2.models.NetworkInterfaceIpv6Address]] = scala.None, requesterManaged: scala.Option[scala.Boolean] = scala.None, sourceDestCheck: scala.Option[scala.Boolean] = scala.None, privateIpAddressesSet: scala.Option[scala.List[avias.ec2.models.NetworkInterfacePrivateIpAddress]] = scala.None)
final case class PriceScheduleSpecification(currencyCode: scala.Option[java.lang.String] = scala.None, price: scala.Option[scala.Double] = scala.None, term: scala.Option[scala.Long] = scala.None)
final case class VpcPeeringConnectionStateReason(code: scala.Option[java.lang.String] = scala.None, message: scala.Option[java.lang.String] = scala.None)
final case class InternetGateway(attachmentSet: scala.Option[scala.List[avias.ec2.models.InternetGatewayAttachment]] = scala.None, internetGatewayId: scala.Option[java.lang.String] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None)
final case class DetachClassicLinkVpcRequest(instanceId: java.lang.String, vpcId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class AssociateVpcCidrBlockResult(ipv6CidrBlockAssociation: scala.Option[avias.ec2.models.VpcIpv6CidrBlockAssociation] = scala.None, cidrBlockAssociation: scala.Option[avias.ec2.models.VpcCidrBlockAssociation] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None)
final case class GetHostReservationPurchasePreviewRequest(hostIdSet: scala.List[java.lang.String], offeringId: java.lang.String)
final case class ImportInstanceResult(conversionTask: scala.Option[avias.ec2.models.ConversionTask] = scala.None)
final case class NetworkAclEntry(cidrBlock: scala.Option[java.lang.String] = scala.None, ipv6CidrBlock: scala.Option[java.lang.String] = scala.None, protocol: scala.Option[java.lang.String] = scala.None, ruleAction: scala.Option[java.lang.String] = scala.None, icmpTypeCode: scala.Option[avias.ec2.models.IcmpTypeCode] = scala.None, portRange: scala.Option[avias.ec2.models.PortRange] = scala.None, ruleNumber: scala.Option[scala.Int] = scala.None, egress: scala.Option[scala.Boolean] = scala.None)
final case class NetworkInterfaceAttachmentChanges(attachmentId: scala.Option[java.lang.String] = scala.None, deleteOnTermination: scala.Option[scala.Boolean] = scala.None)
final case class AssociateVpcCidrBlockRequest(vpcId: java.lang.String, cidrBlock: scala.Option[java.lang.String] = scala.None, amazonProvidedIpv6CidrBlock: scala.Option[scala.Boolean] = scala.None)
final case class Instance(productCodes: scala.Option[scala.List[avias.ec2.models.ProductCode]] = scala.None, instanceLifecycle: scala.Option[java.lang.String] = scala.None, architecture: scala.Option[java.lang.String] = scala.None, elasticGpuAssociationSet: scala.Option[scala.List[avias.ec2.models.ElasticGpuAssociation]] = scala.None, platform: scala.Option[java.lang.String] = scala.None, blockDeviceMapping: scala.Option[scala.List[avias.ec2.models.InstanceBlockDeviceMapping]] = scala.None, ipAddress: scala.Option[java.lang.String] = scala.None, privateDnsName: scala.Option[java.lang.String] = scala.None, rootDeviceName: scala.Option[java.lang.String] = scala.None, ramdiskId: scala.Option[java.lang.String] = scala.None, clientToken: scala.Option[java.lang.String] = scala.None, privateIpAddress: scala.Option[java.lang.String] = scala.None, keyName: scala.Option[java.lang.String] = scala.None, kernelId: scala.Option[java.lang.String] = scala.None, reason: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, spotInstanceRequestId: scala.Option[java.lang.String] = scala.None, dnsName: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None, imageId: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, sriovNetSupport: scala.Option[java.lang.String] = scala.None, stateReason: scala.Option[avias.ec2.models.StateReason] = scala.None, rootDeviceType: scala.Option[java.lang.String] = scala.None, placement: scala.Option[avias.ec2.models.Placement] = scala.None, groupSet: scala.Option[scala.List[avias.ec2.models.GroupIdentifier]] = scala.None, virtualizationType: scala.Option[java.lang.String] = scala.None, iamInstanceProfile: scala.Option[avias.ec2.models.IamInstanceProfile] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, launchTime: scala.Option[java.time.Instant] = scala.None, networkInterfaceSet: scala.Option[scala.List[avias.ec2.models.InstanceNetworkInterface]] = scala.None, amiLaunchIndex: scala.Option[scala.Int] = scala.None, ebsOptimized: scala.Option[scala.Boolean] = scala.None, enaSupport: scala.Option[scala.Boolean] = scala.None, sourceDestCheck: scala.Option[scala.Boolean] = scala.None, monitoring: scala.Option[avias.ec2.models.Monitoring] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None, instanceState: scala.Option[avias.ec2.models.InstanceState] = scala.None, hypervisor: scala.Option[java.lang.String] = scala.None)
final case class Region(regionEndpoint: scala.Option[java.lang.String] = scala.None, regionName: scala.Option[java.lang.String] = scala.None)
final case class ImportImageTask(hypervisor: scala.Option[java.lang.String] = scala.None, platform: scala.Option[java.lang.String] = scala.None, progress: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, licenseType: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, architecture: scala.Option[java.lang.String] = scala.None, importTaskId: scala.Option[java.lang.String] = scala.None, imageId: scala.Option[java.lang.String] = scala.None, statusMessage: scala.Option[java.lang.String] = scala.None, snapshotDetailSet: scala.Option[scala.List[avias.ec2.models.SnapshotDetail]] = scala.None)
final case class UnassignPrivateIpAddressesRequest(networkInterfaceId: java.lang.String, privateIpAddress: scala.List[java.lang.String])
final case class InstanceMonitoring(instanceId: scala.Option[java.lang.String] = scala.None, monitoring: scala.Option[avias.ec2.models.Monitoring] = scala.None)
final case class DescribeReservedInstancesModificationsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, reservedInstancesModificationId: scala.Option[scala.List[java.lang.String]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class UpdateSecurityGroupRuleDescriptionsIngressResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class DeleteCustomerGatewayRequest(customerGatewayId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeTagsResult(nextToken: scala.Option[java.lang.String] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.TagDescription]] = scala.None)
final case class DescribeImageAttributeRequest(attribute: java.lang.String, imageId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class PurchaseReservedInstancesOfferingRequest(instanceCount: scala.Int, reservedInstancesOfferingId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None, limitPrice: scala.Option[avias.ec2.models.ReservedInstanceLimitPrice] = scala.None)
final case class Placement(spreadDomain: scala.Option[java.lang.String] = scala.None, hostId: scala.Option[java.lang.String] = scala.None, groupName: scala.Option[java.lang.String] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, affinity: scala.Option[java.lang.String] = scala.None, tenancy: scala.Option[java.lang.String] = scala.None)
final case class AssignIpv6AddressesResult(assignedIpv6Addresses: scala.Option[scala.List[java.lang.String]] = scala.None, networkInterfaceId: scala.Option[java.lang.String] = scala.None)
final case class CopyFpgaImageRequest(sourceFpgaImageId: java.lang.String, sourceRegion: java.lang.String, clientToken: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeAvailabilityZonesRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, zoneName: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CancelBundleTaskResult(bundleInstanceTask: scala.Option[avias.ec2.models.BundleTask] = scala.None)
final case class DescribeNetworkInterfaceAttributeRequest(networkInterfaceId: java.lang.String, attribute: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeVolumesResult(volumeSet: scala.Option[scala.List[avias.ec2.models.Volume]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class LaunchPermissionModifications(add: scala.Option[scala.List[avias.ec2.models.LaunchPermission]] = scala.None, remove: scala.Option[scala.List[avias.ec2.models.LaunchPermission]] = scala.None)
final case class SubnetIpv6CidrBlockAssociation(associationId: scala.Option[java.lang.String] = scala.None, ipv6CidrBlock: scala.Option[java.lang.String] = scala.None, ipv6CidrBlockState: scala.Option[avias.ec2.models.SubnetCidrBlockState] = scala.None)
final case class InstanceCount(instanceCount: scala.Option[scala.Int] = scala.None, state: scala.Option[java.lang.String] = scala.None)
final case class UnmonitorInstancesResult(instancesSet: scala.Option[scala.List[avias.ec2.models.InstanceMonitoring]] = scala.None)
final case class UpdateSecurityGroupRuleDescriptionsEgressRequest(ipPermissions: scala.List[avias.ec2.models.IpPermission], dryRun: scala.Option[scala.Boolean] = scala.None, groupId: scala.Option[java.lang.String] = scala.None, groupName: scala.Option[java.lang.String] = scala.None)
final case class MoveAddressToVpcRequest(publicIp: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class NatGateway(natGatewayId: scala.Option[java.lang.String] = scala.None, failureCode: scala.Option[java.lang.String] = scala.None, failureMessage: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, natGatewayAddressSet: scala.Option[scala.List[avias.ec2.models.NatGatewayAddress]] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, state: scala.Option[java.lang.String] = scala.None, createTime: scala.Option[java.time.Instant] = scala.None, deleteTime: scala.Option[java.time.Instant] = scala.None, provisionedBandwidth: scala.Option[avias.ec2.models.ProvisionedBandwidth] = scala.None)
final case class DescribeNetworkAclsResult(networkAclSet: scala.Option[scala.List[avias.ec2.models.NetworkAcl]] = scala.None)
final case class AssociateRouteTableRequest(routeTableId: java.lang.String, subnetId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ScheduledInstanceRecurrenceRequest(frequency: scala.Option[java.lang.String] = scala.None, occurrenceUnit: scala.Option[java.lang.String] = scala.None, interval: scala.Option[scala.Int] = scala.None, occurrenceDay: scala.Option[scala.List[scala.Int]] = scala.None, occurrenceRelativeToEnd: scala.Option[scala.Boolean] = scala.None)
final case class DescribeSpotInstanceRequestsResult(spotInstanceRequestSet: scala.Option[scala.List[avias.ec2.models.SpotInstanceRequest]] = scala.None)
final case class DiskImage(description: scala.Option[java.lang.String] = scala.None, image: scala.Option[avias.ec2.models.DiskImageDetail] = scala.None, volume: scala.Option[avias.ec2.models.VolumeDetail] = scala.None)
final case class ScheduledInstancesIpv6Address(ipv6Address: scala.Option[java.lang.String] = scala.None)
final case class SnapshotTaskDetail(url: scala.Option[java.lang.String] = scala.None, progress: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, format: scala.Option[java.lang.String] = scala.None, snapshotId: scala.Option[java.lang.String] = scala.None, statusMessage: scala.Option[java.lang.String] = scala.None, diskImageSize: scala.Option[scala.Double] = scala.None, userBucket: scala.Option[avias.ec2.models.UserBucketDetails] = scala.None)
final case class CreateFpgaImageRequest(inputStorageLocation: avias.ec2.models.StorageLocation, logsStorageLocation: scala.Option[avias.ec2.models.StorageLocation] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, description: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, clientToken: scala.Option[java.lang.String] = scala.None)
final case class EventInformation(eventDescription: scala.Option[java.lang.String] = scala.None, eventSubType: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None)
final case class AcceptReservedInstancesExchangeQuoteResult(exchangeId: scala.Option[java.lang.String] = scala.None)
final case class CopyImageResult(imageId: scala.Option[java.lang.String] = scala.None)
final case class DeleteRouteTableRequest(routeTableId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeScheduledInstanceAvailabilityRequest(recurrence: avias.ec2.models.ScheduledInstanceRecurrenceRequest, firstSlotStartTimeRange: avias.ec2.models.SlotDateTimeRangeRequest, filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, maxSlotDurationInHours: scala.Option[scala.Int] = scala.None, minSlotDurationInHours: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class SpotFleetMonitoring(enabled: scala.Option[scala.Boolean] = scala.None)
final case class DisassociateIamInstanceProfileResult(iamInstanceProfileAssociation: scala.Option[avias.ec2.models.IamInstanceProfileAssociation] = scala.None)
final case class DeleteVpcPeeringConnectionRequest(vpcPeeringConnectionId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ActiveInstance(instanceId: scala.Option[java.lang.String] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None, spotInstanceRequestId: scala.Option[java.lang.String] = scala.None, instanceHealth: scala.Option[java.lang.String] = scala.None)
final case class ImportVolumeRequest(availabilityZone: java.lang.String, image: avias.ec2.models.DiskImageDetail, volume: avias.ec2.models.VolumeDetail, description: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CreateEgressOnlyInternetGatewayRequest(vpcId: java.lang.String, clientToken: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class VpcEndpoint(vpcEndpointType: scala.Option[java.lang.String] = scala.None, dnsEntrySet: scala.Option[scala.List[avias.ec2.models.DnsEntry]] = scala.None, vpcEndpointId: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, serviceName: scala.Option[java.lang.String] = scala.None, policyDocument: scala.Option[java.lang.String] = scala.None, state: scala.Option[java.lang.String] = scala.None, creationTimestamp: scala.Option[java.time.Instant] = scala.None, routeTableIdSet: scala.Option[scala.List[java.lang.String]] = scala.None, subnetIdSet: scala.Option[scala.List[java.lang.String]] = scala.None, networkInterfaceIdSet: scala.Option[scala.List[java.lang.String]] = scala.None, privateDnsEnabled: scala.Option[scala.Boolean] = scala.None, groupSet: scala.Option[scala.List[avias.ec2.models.SecurityGroupIdentifier]] = scala.None)
final case class DeleteFlowLogsRequest(flowLogId: scala.List[java.lang.String])
final case class DescribeSpotFleetRequestHistoryRequest(spotFleetRequestId: java.lang.String, startTime: java.time.Instant, nextToken: scala.Option[java.lang.String] = scala.None, eventType: scala.Option[java.lang.String] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ResetSnapshotAttributeRequest(attribute: java.lang.String, snapshotId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeSecurityGroupsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, groupId: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, groupName: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class LoadPermissionModifications(add: scala.Option[scala.List[avias.ec2.models.LoadPermissionRequest]] = scala.None, remove: scala.Option[scala.List[avias.ec2.models.LoadPermissionRequest]] = scala.None)
final case class DescribeFlowLogsResult(flowLogSet: scala.Option[scala.List[avias.ec2.models.FlowLog]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class CreateTagsRequest(resourceId: scala.List[java.lang.String], tag: scala.List[avias.ec2.models.Tag], dryRun: scala.Option[scala.Boolean] = scala.None)
final case class AssociateIamInstanceProfileResult(iamInstanceProfileAssociation: scala.Option[avias.ec2.models.IamInstanceProfileAssociation] = scala.None)
final case class AllocateAddressResult(publicIp: scala.Option[java.lang.String] = scala.None, allocationId: scala.Option[java.lang.String] = scala.None, domain: scala.Option[java.lang.String] = scala.None)
final case class DetachNetworkInterfaceRequest(attachmentId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None, force: scala.Option[scala.Boolean] = scala.None)
final case class SpotInstanceStatus(code: scala.Option[java.lang.String] = scala.None, message: scala.Option[java.lang.String] = scala.None, updateTime: scala.Option[java.time.Instant] = scala.None)
final case class Host(instances: scala.Option[scala.List[avias.ec2.models.HostInstance]] = scala.None, state: scala.Option[java.lang.String] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, clientToken: scala.Option[java.lang.String] = scala.None, hostId: scala.Option[java.lang.String] = scala.None, hostReservationId: scala.Option[java.lang.String] = scala.None, autoPlacement: scala.Option[java.lang.String] = scala.None, availableCapacity: scala.Option[avias.ec2.models.AvailableCapacity] = scala.None, hostProperties: scala.Option[avias.ec2.models.HostProperties] = scala.None)
final case class UserIdGroupPair(groupId: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, userId: scala.Option[java.lang.String] = scala.None, groupName: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, vpcPeeringConnectionId: scala.Option[java.lang.String] = scala.None, peeringStatus: scala.Option[java.lang.String] = scala.None)
final case class LoadPermission(userId: scala.Option[java.lang.String] = scala.None, group: scala.Option[java.lang.String] = scala.None)
final case class DeleteVpnConnectionRequest(vpnConnectionId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CreateKeyPairRequest(keyName: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class SecurityGroupReference(groupId: java.lang.String, referencingVpcId: java.lang.String, vpcPeeringConnectionId: scala.Option[java.lang.String] = scala.None)
final case class ImportImageResult(hypervisor: scala.Option[java.lang.String] = scala.None, platform: scala.Option[java.lang.String] = scala.None, progress: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, licenseType: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, architecture: scala.Option[java.lang.String] = scala.None, importTaskId: scala.Option[java.lang.String] = scala.None, imageId: scala.Option[java.lang.String] = scala.None, statusMessage: scala.Option[java.lang.String] = scala.None, snapshotDetailSet: scala.Option[scala.List[avias.ec2.models.SnapshotDetail]] = scala.None)
final case class ModifySpotFleetRequestResponse(`return`: scala.Option[scala.Boolean] = scala.None)
final case class SpotFleetRequestConfigData(iamFleetRole: java.lang.String, spotPrice: java.lang.String, launchSpecifications: scala.List[avias.ec2.models.SpotFleetLaunchSpecification], targetCapacity: scala.Int, allocationStrategy: scala.Option[java.lang.String] = scala.None, clientToken: scala.Option[java.lang.String] = scala.None, instanceInterruptionBehavior: scala.Option[java.lang.String] = scala.None, `type`: scala.Option[java.lang.String] = scala.None, excessCapacityTerminationPolicy: scala.Option[java.lang.String] = scala.None, validFrom: scala.Option[java.time.Instant] = scala.None, validUntil: scala.Option[java.time.Instant] = scala.None, terminateInstancesWithExpiration: scala.Option[scala.Boolean] = scala.None, replaceUnhealthyInstances: scala.Option[scala.Boolean] = scala.None, fulfilledCapacity: scala.Option[scala.Double] = scala.None, loadBalancersConfig: scala.Option[avias.ec2.models.LoadBalancersConfig] = scala.None)
final case class CreateRouteResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class Volume(status: scala.Option[java.lang.String] = scala.None, volumeType: scala.Option[java.lang.String] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, kmsKeyId: scala.Option[java.lang.String] = scala.None, snapshotId: scala.Option[java.lang.String] = scala.None, volumeId: scala.Option[java.lang.String] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, createTime: scala.Option[java.time.Instant] = scala.None, size: scala.Option[scala.Int] = scala.None, iops: scala.Option[scala.Int] = scala.None, encrypted: scala.Option[scala.Boolean] = scala.None, attachmentSet: scala.Option[scala.List[avias.ec2.models.VolumeAttachment]] = scala.None)
final case class UnassignIpv6AddressesResult(networkInterfaceId: scala.Option[java.lang.String] = scala.None, unassignedIpv6Addresses: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class DeleteSecurityGroupRequest(groupId: scala.Option[java.lang.String] = scala.None, groupName: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class AttributeValue(value: scala.Option[java.lang.String] = scala.None)
final case class ElasticGpuSpecification(`type`: java.lang.String)
final case class DescribeAccountAttributesResult(accountAttributeSet: scala.Option[scala.List[avias.ec2.models.AccountAttribute]] = scala.None)
final case class BlobAttributeValue(value: scala.Option[scala.Array[scala.Byte]] = scala.None)
final case class DeleteFpgaImageResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class PurchaseRequest(instanceCount: scala.Int, purchaseToken: java.lang.String)
final case class Storage(s3: scala.Option[avias.ec2.models.S3Storage] = scala.None)
final case class CreateVpcPeeringConnectionResult(vpcPeeringConnection: scala.Option[avias.ec2.models.VpcPeeringConnection] = scala.None)
final case class ModifyFpgaImageAttributeRequest(fpgaImageId: java.lang.String, userId: scala.Option[scala.List[java.lang.String]] = scala.None, description: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, operationType: scala.Option[java.lang.String] = scala.None, loadPermission: scala.Option[avias.ec2.models.LoadPermissionModifications] = scala.None, attribute: scala.Option[java.lang.String] = scala.None, userGroup: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, productCode: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class UserBucketDetails(s3Bucket: scala.Option[java.lang.String] = scala.None, s3Key: scala.Option[java.lang.String] = scala.None)
final case class CreateFlowLogsResult(clientToken: scala.Option[java.lang.String] = scala.None, flowLogIdSet: scala.Option[scala.List[java.lang.String]] = scala.None, unsuccessful: scala.Option[scala.List[avias.ec2.models.UnsuccessfulItem]] = scala.None)
final case class CustomerGateway(ipAddress: scala.Option[java.lang.String] = scala.None, customerGatewayId: scala.Option[java.lang.String] = scala.None, state: scala.Option[java.lang.String] = scala.None, bgpAsn: scala.Option[java.lang.String] = scala.None, `type`: scala.Option[java.lang.String] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None)
final case class EnableVolumeIORequest(volumeId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class EbsBlockDevice(encrypted: scala.Option[scala.Boolean] = scala.None, deleteOnTermination: scala.Option[scala.Boolean] = scala.None, iops: scala.Option[scala.Int] = scala.None, volumeSize: scala.Option[scala.Int] = scala.None, snapshotId: scala.Option[java.lang.String] = scala.None, volumeType: scala.Option[java.lang.String] = scala.None)
final case class DescribeInstanceStatusRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, includeAllInstances: scala.Option[scala.Boolean] = scala.None)
final case class DescribeIamInstanceProfileAssociationsRequest(associationId: scala.Option[scala.List[java.lang.String]] = scala.None, filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DescribeImagesRequest(owner: scala.Option[scala.List[java.lang.String]] = scala.None, filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, imageId: scala.Option[scala.List[java.lang.String]] = scala.None, executableBy: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class SpotFleetRequestConfig(spotFleetRequestId: java.lang.String, spotFleetRequestConfig: avias.ec2.models.SpotFleetRequestConfigData, createTime: java.time.Instant, spotFleetRequestState: java.lang.String, activityStatus: scala.Option[java.lang.String] = scala.None)
final case class CancelSpotFleetRequestsErrorItem(error: avias.ec2.models.CancelSpotFleetRequestsError, spotFleetRequestId: java.lang.String)
final case class DescribePrefixListsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, prefixListId: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeRegionsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, regionName: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class RebootInstancesRequest(instanceId: scala.List[java.lang.String], dryRun: scala.Option[scala.Boolean] = scala.None)
final case class IamInstanceProfileSpecification(arn: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None)
final case class ReportInstanceStatusRequest(instanceId: scala.List[java.lang.String], status: java.lang.String, reasonCode: scala.List[java.lang.String], description: scala.Option[java.lang.String] = scala.None, endTime: scala.Option[java.time.Instant] = scala.None, startTime: scala.Option[java.time.Instant] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class IamInstanceProfile(arn: scala.Option[java.lang.String] = scala.None, id: scala.Option[java.lang.String] = scala.None)
final case class DescribeAvailabilityZonesResult(availabilityZoneInfo: scala.Option[scala.List[avias.ec2.models.AvailabilityZone]] = scala.None)
final case class TargetGroup(arn: java.lang.String)
final case class DescribeRouteTablesRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, routeTableId: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class UserBucket(s3Bucket: scala.Option[java.lang.String] = scala.None, s3Key: scala.Option[java.lang.String] = scala.None)
final case class InstanceBlockDeviceMappingSpecification(deviceName: scala.Option[java.lang.String] = scala.None, noDevice: scala.Option[java.lang.String] = scala.None, virtualName: scala.Option[java.lang.String] = scala.None, ebs: scala.Option[avias.ec2.models.EbsInstanceBlockDeviceSpecification] = scala.None)
final case class CancelImportTaskResult(importTaskId: scala.Option[java.lang.String] = scala.None, previousState: scala.Option[java.lang.String] = scala.None, state: scala.Option[java.lang.String] = scala.None)
final case class NetworkInterfaceAssociation(associationId: scala.Option[java.lang.String] = scala.None, publicDnsName: scala.Option[java.lang.String] = scala.None, allocationId: scala.Option[java.lang.String] = scala.None, ipOwnerId: scala.Option[java.lang.String] = scala.None, publicIp: scala.Option[java.lang.String] = scala.None)
final case class CreateNetworkInterfacePermissionRequest(networkInterfaceId: java.lang.String, permission: java.lang.String, awsAccountId: scala.Option[java.lang.String] = scala.None, awsService: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeReservedInstancesOfferingsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, maxDuration: scala.Option[scala.Long] = scala.None, minDuration: scala.Option[scala.Long] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, offeringClass: scala.Option[java.lang.String] = scala.None, productDescription: scala.Option[java.lang.String] = scala.None, reservedInstancesOfferingId: scala.Option[scala.List[java.lang.String]] = scala.None, offeringType: scala.Option[java.lang.String] = scala.None, instanceTenancy: scala.Option[java.lang.String] = scala.None, maxInstanceCount: scala.Option[scala.Int] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, includeMarketplace: scala.Option[scala.Boolean] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None)
final case class CreateImageResult(imageId: scala.Option[java.lang.String] = scala.None)
final case class SpotInstanceRequest(fault: scala.Option[avias.ec2.models.SpotInstanceStateFault] = scala.None, `type`: scala.Option[java.lang.String] = scala.None, launchedAvailabilityZone: scala.Option[java.lang.String] = scala.None, availabilityZoneGroup: scala.Option[java.lang.String] = scala.None, actualBlockHourlyPrice: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, launchGroup: scala.Option[java.lang.String] = scala.None, spotInstanceRequestId: scala.Option[java.lang.String] = scala.None, spotPrice: scala.Option[java.lang.String] = scala.None, instanceInterruptionBehavior: scala.Option[java.lang.String] = scala.None, status: scala.Option[avias.ec2.models.SpotInstanceStatus] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, productDescription: scala.Option[java.lang.String] = scala.None, createTime: scala.Option[java.time.Instant] = scala.None, validFrom: scala.Option[java.time.Instant] = scala.None, validUntil: scala.Option[java.time.Instant] = scala.None, blockDurationMinutes: scala.Option[scala.Int] = scala.None, launchSpecification: scala.Option[avias.ec2.models.LaunchSpecification] = scala.None, state: scala.Option[java.lang.String] = scala.None)
final case class DescribeBundleTasksResult(bundleInstanceTasksSet: scala.Option[scala.List[avias.ec2.models.BundleTask]] = scala.None)
final case class CidrBlock(cidrBlock: scala.Option[java.lang.String] = scala.None)
final case class ModifyReservedInstancesResult(reservedInstancesModificationId: scala.Option[java.lang.String] = scala.None)
final case class GroupIdentifier(groupName: scala.Option[java.lang.String] = scala.None, groupId: scala.Option[java.lang.String] = scala.None)
final case class DescribeExportTasksRequest(exportTaskId: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class ModifyVolumeAttributeRequest(volumeId: java.lang.String, autoEnableIO: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DisassociateVpcCidrBlockRequest(associationId: java.lang.String)
final case class DeleteVpcRequest(vpcId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DeleteNetworkInterfaceRequest(networkInterfaceId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ScheduledInstancesNetworkInterface(description: scala.Option[java.lang.String] = scala.None, networkInterfaceId: scala.Option[java.lang.String] = scala.None, privateIpAddress: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None, privateIpAddressConfig: scala.Option[scala.List[avias.ec2.models.ScheduledInstancesPrivateIpAddressConfig]] = scala.None, ipv6Address: scala.Option[scala.List[avias.ec2.models.ScheduledInstancesIpv6Address]] = scala.None, deviceIndex: scala.Option[scala.Int] = scala.None, ipv6AddressCount: scala.Option[scala.Int] = scala.None, secondaryPrivateIpAddressCount: scala.Option[scala.Int] = scala.None, associatePublicIpAddress: scala.Option[scala.Boolean] = scala.None, deleteOnTermination: scala.Option[scala.Boolean] = scala.None, group: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class ExportToS3TaskSpecification(containerFormat: scala.Option[java.lang.String] = scala.None, diskImageFormat: scala.Option[java.lang.String] = scala.None, s3Bucket: scala.Option[java.lang.String] = scala.None, s3Prefix: scala.Option[java.lang.String] = scala.None)
final case class DescribeClassicLinkInstancesResult(instancesSet: scala.Option[scala.List[avias.ec2.models.ClassicLinkInstance]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DescribeInstancesResult(reservationSet: scala.Option[scala.List[avias.ec2.models.Reservation]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class VpnTunnelOptionsSpecification(tunnelInsideCidr: scala.Option[java.lang.String] = scala.None, preSharedKey: scala.Option[java.lang.String] = scala.None)
final case class DescribeNetworkInterfaceAttributeResult(networkInterfaceId: scala.Option[java.lang.String] = scala.None, groupSet: scala.Option[scala.List[avias.ec2.models.GroupIdentifier]] = scala.None, description: scala.Option[avias.ec2.models.AttributeValue] = scala.None, attachment: scala.Option[avias.ec2.models.NetworkInterfaceAttachment] = scala.None, sourceDestCheck: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None)
final case class InstanceNetworkInterfaceAssociation(ipOwnerId: scala.Option[java.lang.String] = scala.None, publicDnsName: scala.Option[java.lang.String] = scala.None, publicIp: scala.Option[java.lang.String] = scala.None)
final case class DescribeInstancesRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ImportInstanceRequest(platform: java.lang.String, launchSpecification: scala.Option[avias.ec2.models.ImportInstanceLaunchSpecification] = scala.None, description: scala.Option[java.lang.String] = scala.None, diskImage: scala.Option[scala.List[avias.ec2.models.DiskImage]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeFpgaImageAttributeResult(fpgaImageAttribute: scala.Option[avias.ec2.models.FpgaImageAttribute] = scala.None)
final case class ImportSnapshotTask(description: scala.Option[java.lang.String] = scala.None, importTaskId: scala.Option[java.lang.String] = scala.None, snapshotTaskDetail: scala.Option[avias.ec2.models.SnapshotTaskDetail] = scala.None)
final case class VpnConnectionOptionsSpecification(staticRoutesOnly: scala.Option[scala.Boolean] = scala.None, tunnelOptions: scala.Option[scala.List[avias.ec2.models.VpnTunnelOptionsSpecification]] = scala.None)
final case class ReplaceNetworkAclAssociationResult(newAssociationId: scala.Option[java.lang.String] = scala.None)
final case class InstanceStatusDetails(impairedSince: scala.Option[java.time.Instant] = scala.None, name: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None)
final case class DescribeImagesResult(imagesSet: scala.Option[scala.List[avias.ec2.models.Image]] = scala.None)
final case class ExportTask(description: scala.Option[java.lang.String] = scala.None, exportTaskId: scala.Option[java.lang.String] = scala.None, statusMessage: scala.Option[java.lang.String] = scala.None, exportToS3: scala.Option[avias.ec2.models.ExportToS3Task] = scala.None, instanceExport: scala.Option[avias.ec2.models.InstanceExportDetails] = scala.None, state: scala.Option[java.lang.String] = scala.None)
final case class DescribePlacementGroupsResult(placementGroupSet: scala.Option[scala.List[avias.ec2.models.PlacementGroup]] = scala.None)
final case class GetPasswordDataRequest(instanceId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DeleteNetworkInterfacePermissionResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class CreateDefaultVpcResult(vpc: scala.Option[avias.ec2.models.Vpc] = scala.None)
final case class VpcPeeringConnectionOptionsDescription(allowDnsResolutionFromRemoteVpc: scala.Option[scala.Boolean] = scala.None, allowEgressFromLocalClassicLinkToRemoteVpc: scala.Option[scala.Boolean] = scala.None, allowEgressFromLocalVpcToRemoteClassicLink: scala.Option[scala.Boolean] = scala.None)
final case class Address(networkInterfaceId: scala.Option[java.lang.String] = scala.None, privateIpAddress: scala.Option[java.lang.String] = scala.None, associationId: scala.Option[java.lang.String] = scala.None, allocationId: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, networkInterfaceOwnerId: scala.Option[java.lang.String] = scala.None, publicIp: scala.Option[java.lang.String] = scala.None, domain: scala.Option[java.lang.String] = scala.None)
final case class InstanceStatusEvent(code: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, notAfter: scala.Option[java.time.Instant] = scala.None, notBefore: scala.Option[java.time.Instant] = scala.None)
final case class DescribeVpcsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, vpcId: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class AccountAttributeValue(attributeValue: scala.Option[java.lang.String] = scala.None)
final case class PeeringConnectionOptions(allowDnsResolutionFromRemoteVpc: scala.Option[scala.Boolean] = scala.None, allowEgressFromLocalClassicLinkToRemoteVpc: scala.Option[scala.Boolean] = scala.None, allowEgressFromLocalVpcToRemoteClassicLink: scala.Option[scala.Boolean] = scala.None)
final case class DescribeAddressesRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, publicIp: scala.Option[scala.List[java.lang.String]] = scala.None, allocationId: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeNetworkAclsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, networkAclId: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class CreateDhcpOptionsResult(dhcpOptions: scala.Option[avias.ec2.models.DhcpOptions] = scala.None)
final case class RunInstancesMonitoringEnabled(enabled: scala.Boolean)
final case class FpgaImage(productCodes: scala.Option[scala.List[avias.ec2.models.ProductCode]] = scala.None, state: scala.Option[avias.ec2.models.FpgaImageState] = scala.None, description: scala.Option[java.lang.String] = scala.None, shellVersion: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None, ownerAlias: scala.Option[java.lang.String] = scala.None, ownerId: scala.Option[java.lang.String] = scala.None, fpgaImageId: scala.Option[java.lang.String] = scala.None, fpgaImageGlobalId: scala.Option[java.lang.String] = scala.None, tags: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, createTime: scala.Option[java.time.Instant] = scala.None, updateTime: scala.Option[java.time.Instant] = scala.None, public: scala.Option[scala.Boolean] = scala.None, pciId: scala.Option[avias.ec2.models.PciId] = scala.None)
final case class TargetGroupsConfig(targetGroups: scala.List[avias.ec2.models.TargetGroup])
final case class CreateVpcEndpointResult(vpcEndpoint: scala.Option[avias.ec2.models.VpcEndpoint] = scala.None, clientToken: scala.Option[java.lang.String] = scala.None)
final case class CreateSubnetResult(subnet: scala.Option[avias.ec2.models.Subnet] = scala.None)
final case class VpnConnectionOptions(staticRoutesOnly: scala.Option[scala.Boolean] = scala.None)
final case class AssociateSubnetCidrBlockRequest(ipv6CidrBlock: java.lang.String, subnetId: java.lang.String)
final case class ReservedInstanceReservationValue(reservationValue: scala.Option[avias.ec2.models.ReservationValue] = scala.None, reservedInstanceId: scala.Option[java.lang.String] = scala.None)
final case class CreateReservedInstancesListingResult(reservedInstancesListingsSet: scala.Option[scala.List[avias.ec2.models.ReservedInstancesListing]] = scala.None)
final case class Tag(key: scala.Option[java.lang.String] = scala.None, value: scala.Option[java.lang.String] = scala.None)
final case class RequestSpotFleetResponse(spotFleetRequestId: java.lang.String)
final case class VolumeModification(targetVolumeType: scala.Option[java.lang.String] = scala.None, originalVolumeType: scala.Option[java.lang.String] = scala.None, progress: scala.Option[scala.Long] = scala.None, volumeId: scala.Option[java.lang.String] = scala.None, statusMessage: scala.Option[java.lang.String] = scala.None, modificationState: scala.Option[java.lang.String] = scala.None, startTime: scala.Option[java.time.Instant] = scala.None, endTime: scala.Option[java.time.Instant] = scala.None, targetSize: scala.Option[scala.Int] = scala.None, targetIops: scala.Option[scala.Int] = scala.None, originalSize: scala.Option[scala.Int] = scala.None, originalIops: scala.Option[scala.Int] = scala.None)
final case class VpcPeeringConnectionVpcInfo(cidrBlock: scala.Option[java.lang.String] = scala.None, ownerId: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, ipv6CidrBlockSet: scala.Option[scala.List[avias.ec2.models.Ipv6CidrBlock]] = scala.None, cidrBlockSet: scala.Option[scala.List[avias.ec2.models.CidrBlock]] = scala.None, peeringOptions: scala.Option[avias.ec2.models.VpcPeeringConnectionOptionsDescription] = scala.None)
final case class DeleteEgressOnlyInternetGatewayResult(returnCode: scala.Option[scala.Boolean] = scala.None)
final case class VolumeStatusEvent(description: scala.Option[java.lang.String] = scala.None, eventId: scala.Option[java.lang.String] = scala.None, eventType: scala.Option[java.lang.String] = scala.None, notAfter: scala.Option[java.time.Instant] = scala.None, notBefore: scala.Option[java.time.Instant] = scala.None)
final case class ServiceTypeDetail(serviceType: scala.Option[java.lang.String] = scala.None)
final case class CopySnapshotRequest(sourceSnapshotId: java.lang.String, sourceRegion: java.lang.String, presignedUrl: scala.Option[java.lang.String] = scala.None, destinationRegion: scala.Option[java.lang.String] = scala.None, kmsKeyId: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, encrypted: scala.Option[scala.Boolean] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DetachInternetGatewayRequest(internetGatewayId: java.lang.String, vpcId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DeleteVolumeRequest(volumeId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ClassicLinkDnsSupport(classicLinkDnsSupported: scala.Option[scala.Boolean] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None)
final case class AssociateIamInstanceProfileRequest(iamInstanceProfile: avias.ec2.models.IamInstanceProfileSpecification, instanceId: java.lang.String)
final case class TargetConfiguration(instanceCount: scala.Option[scala.Int] = scala.None, offeringId: scala.Option[java.lang.String] = scala.None)
final case class CreateNetworkInterfaceResult(networkInterface: scala.Option[avias.ec2.models.NetworkInterface] = scala.None)
final case class CreateSpotDatafeedSubscriptionResult(spotDatafeedSubscription: scala.Option[avias.ec2.models.SpotDatafeedSubscription] = scala.None)
final case class TagSpecification(resourceType: scala.Option[java.lang.String] = scala.None, tag: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None)
final case class DescribeIdentityIdFormatResult(statusSet: scala.Option[scala.List[avias.ec2.models.IdFormat]] = scala.None)
final case class InstanceExportDetails(instanceId: scala.Option[java.lang.String] = scala.None, targetEnvironment: scala.Option[java.lang.String] = scala.None)
final case class AvailableCapacity(availableInstanceCapacity: scala.Option[scala.List[avias.ec2.models.InstanceCapacity]] = scala.None, availableVCpus: scala.Option[scala.Int] = scala.None)
final case class CreateInternetGatewayRequest(dryRun: scala.Option[scala.Boolean] = scala.None)
final case class EnableVpcClassicLinkResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class CancelBundleTaskRequest(bundleId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class RouteTableAssociation(main: scala.Option[scala.Boolean] = scala.None, routeTableAssociationId: scala.Option[java.lang.String] = scala.None, routeTableId: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None)
final case class CreateVpcRequest(cidrBlock: java.lang.String, amazonProvidedIpv6CidrBlock: scala.Option[scala.Boolean] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, instanceTenancy: scala.Option[java.lang.String] = scala.None)
final case class DisassociateRouteTableRequest(associationId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ResetFpgaImageAttributeRequest(fpgaImageId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None, attribute: scala.Option[java.lang.String] = scala.None)
final case class DescribeDhcpOptionsResult(dhcpOptionsSet: scala.Option[scala.List[avias.ec2.models.DhcpOptions]] = scala.None)
final case class ModifyVpcEndpointResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class CreateVolumeRequest(availabilityZone: java.lang.String, volumeType: scala.Option[java.lang.String] = scala.None, kmsKeyId: scala.Option[java.lang.String] = scala.None, snapshotId: scala.Option[java.lang.String] = scala.None, tagSpecification: scala.Option[scala.List[avias.ec2.models.TagSpecification]] = scala.None, iops: scala.Option[scala.Int] = scala.None, size: scala.Option[scala.Int] = scala.None, encrypted: scala.Option[scala.Boolean] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeSecurityGroupReferencesRequest(groupId: scala.List[java.lang.String], dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DisassociateIamInstanceProfileRequest(associationId: java.lang.String)
final case class DescribeRegionsResult(regionInfo: scala.Option[scala.List[avias.ec2.models.Region]] = scala.None)
final case class SecurityGroupIdentifier(groupId: scala.Option[java.lang.String] = scala.None, groupName: scala.Option[java.lang.String] = scala.None)
final case class DescribeReservedInstancesListingsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, reservedInstancesId: scala.Option[java.lang.String] = scala.None, reservedInstancesListingId: scala.Option[java.lang.String] = scala.None)
final case class IdFormat(deadline: scala.Option[java.time.Instant] = scala.None, resource: scala.Option[java.lang.String] = scala.None, useLongIds: scala.Option[scala.Boolean] = scala.None)
final case class EnableVgwRoutePropagationRequest(gatewayId: java.lang.String, routeTableId: java.lang.String)
final case class ReservedInstancesId(reservedInstancesId: scala.Option[java.lang.String] = scala.None)
final case class CancelledSpotInstanceRequest(spotInstanceRequestId: scala.Option[java.lang.String] = scala.None, state: scala.Option[java.lang.String] = scala.None)
final case class EnableVpcClassicLinkDnsSupportResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class InstancePrivateIpAddress(association: scala.Option[avias.ec2.models.InstanceNetworkInterfaceAssociation] = scala.None, primary: scala.Option[scala.Boolean] = scala.None, privateDnsName: scala.Option[java.lang.String] = scala.None, privateIpAddress: scala.Option[java.lang.String] = scala.None)
final case class CreateRouteTableResult(routeTable: scala.Option[avias.ec2.models.RouteTable] = scala.None)
final case class TerminateInstancesResult(instancesSet: scala.Option[scala.List[avias.ec2.models.InstanceStateChange]] = scala.None)
final case class DeleteEgressOnlyInternetGatewayRequest(egressOnlyInternetGatewayId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeVolumeStatusResult(nextToken: scala.Option[java.lang.String] = scala.None, volumeStatusSet: scala.Option[scala.List[avias.ec2.models.VolumeStatusItem]] = scala.None)
final case class Vpc(state: scala.Option[java.lang.String] = scala.None, cidrBlockAssociationSet: scala.Option[scala.List[avias.ec2.models.VpcCidrBlockAssociation]] = scala.None, cidrBlock: scala.Option[java.lang.String] = scala.None, dhcpOptionsId: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, ipv6CidrBlockAssociationSet: scala.Option[scala.List[avias.ec2.models.VpcIpv6CidrBlockAssociation]] = scala.None, instanceTenancy: scala.Option[java.lang.String] = scala.None, isDefault: scala.Option[scala.Boolean] = scala.None)
final case class SlotDateTimeRangeRequest(earliestTime: java.time.Instant, latestTime: java.time.Instant)
final case class DeleteNetworkInterfacePermissionRequest(networkInterfacePermissionId: java.lang.String, force: scala.Option[scala.Boolean] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class UpdateSecurityGroupRuleDescriptionsIngressRequest(ipPermissions: scala.List[avias.ec2.models.IpPermission], dryRun: scala.Option[scala.Boolean] = scala.None, groupId: scala.Option[java.lang.String] = scala.None, groupName: scala.Option[java.lang.String] = scala.None)
final case class ReservedInstancesModification(clientToken: scala.Option[java.lang.String] = scala.None, reservedInstancesModificationId: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None, statusMessage: scala.Option[java.lang.String] = scala.None, createDate: scala.Option[java.time.Instant] = scala.None, effectiveDate: scala.Option[java.time.Instant] = scala.None, updateDate: scala.Option[java.time.Instant] = scala.None, modificationResultSet: scala.Option[scala.List[avias.ec2.models.ReservedInstancesModificationResult]] = scala.None, reservedInstancesSet: scala.Option[scala.List[avias.ec2.models.ReservedInstancesId]] = scala.None)
final case class DescribeImportSnapshotTasksResult(importSnapshotTaskSet: scala.Option[scala.List[avias.ec2.models.ImportSnapshotTask]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DescribeMovingAddressesRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, publicIp: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeEgressOnlyInternetGatewaysRequest(dryRun: scala.Option[scala.Boolean] = scala.None, egressOnlyInternetGatewayId: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DescribeNetworkInterfacePermissionsResult(networkInterfacePermissions: scala.Option[scala.List[avias.ec2.models.NetworkInterfacePermission]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class EnableVpcClassicLinkRequest(vpcId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class VpcCidrBlockAssociation(associationId: scala.Option[java.lang.String] = scala.None, cidrBlock: scala.Option[java.lang.String] = scala.None, cidrBlockState: scala.Option[avias.ec2.models.VpcCidrBlockState] = scala.None)
final case class CancelSpotInstanceRequestsResult(spotInstanceRequestSet: scala.Option[scala.List[avias.ec2.models.CancelledSpotInstanceRequest]] = scala.None)
final case class DescribeTagsRequest(dryRun: scala.Option[scala.Boolean] = scala.None, filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DisableVpcClassicLinkRequest(vpcId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class RequestSpotInstancesRequest(spotPrice: java.lang.String, `type`: scala.Option[java.lang.String] = scala.None, availabilityZoneGroup: scala.Option[java.lang.String] = scala.None, clientToken: scala.Option[java.lang.String] = scala.None, launchGroup: scala.Option[java.lang.String] = scala.None, launchSpecification: scala.Option[avias.ec2.models.RequestSpotLaunchSpecification] = scala.None, instanceInterruptionBehavior: scala.Option[java.lang.String] = scala.None, validFrom: scala.Option[java.time.Instant] = scala.None, validUntil: scala.Option[java.time.Instant] = scala.None, blockDurationMinutes: scala.Option[scala.Int] = scala.None, instanceCount: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ReservedInstanceLimitPrice(amount: scala.Option[scala.Double] = scala.None, currencyCode: scala.Option[java.lang.String] = scala.None)
final case class ResetNetworkInterfaceAttributeRequest(networkInterfaceId: java.lang.String, sourceDestCheck: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class AssociateRouteTableResult(associationId: scala.Option[java.lang.String] = scala.None)
final case class AllocateHostsRequest(availabilityZone: java.lang.String, instanceType: java.lang.String, quantity: scala.Int, clientToken: scala.Option[java.lang.String] = scala.None, autoPlacement: scala.Option[java.lang.String] = scala.None)
final case class ReservedInstancesOffering(duration: scala.Option[scala.Long] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, reservedInstancesOfferingId: scala.Option[java.lang.String] = scala.None, offeringClass: scala.Option[java.lang.String] = scala.None, productDescription: scala.Option[java.lang.String] = scala.None, pricingDetailsSet: scala.Option[scala.List[avias.ec2.models.PricingDetail]] = scala.None, offeringType: scala.Option[java.lang.String] = scala.None, recurringCharges: scala.Option[scala.List[avias.ec2.models.RecurringCharge]] = scala.None, instanceTenancy: scala.Option[java.lang.String] = scala.None, scope: scala.Option[java.lang.String] = scala.None, marketplace: scala.Option[scala.Boolean] = scala.None, currencyCode: scala.Option[java.lang.String] = scala.None, fixedPrice: scala.Option[scala.Float] = scala.None, usagePrice: scala.Option[scala.Float] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None)
final case class DescribeAccountAttributesRequest(attributeName: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ModifyHostsResult(successful: scala.Option[scala.List[java.lang.String]] = scala.None, unsuccessful: scala.Option[scala.List[avias.ec2.models.UnsuccessfulItem]] = scala.None)
final case class LaunchPermission(group: scala.Option[java.lang.String] = scala.None, userId: scala.Option[java.lang.String] = scala.None)
final case class ScheduledInstancesEbs(deleteOnTermination: scala.Option[scala.Boolean] = scala.None, encrypted: scala.Option[scala.Boolean] = scala.None, iops: scala.Option[scala.Int] = scala.None, volumeSize: scala.Option[scala.Int] = scala.None, snapshotId: scala.Option[java.lang.String] = scala.None, volumeType: scala.Option[java.lang.String] = scala.None)
final case class DeleteNatGatewayResult(natGatewayId: scala.Option[java.lang.String] = scala.None)
final case class DescribeHostReservationsResult(hostReservationSet: scala.Option[scala.List[avias.ec2.models.HostReservation]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class AttachNetworkInterfaceRequest(deviceIndex: scala.Int, instanceId: java.lang.String, networkInterfaceId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class StaleIpPermission(ipRanges: scala.Option[scala.List[java.lang.String]] = scala.None, prefixListIds: scala.Option[scala.List[java.lang.String]] = scala.None, ipProtocol: scala.Option[java.lang.String] = scala.None, groups: scala.Option[scala.List[avias.ec2.models.UserIdGroupPair]] = scala.None, fromPort: scala.Option[scala.Int] = scala.None, toPort: scala.Option[scala.Int] = scala.None)
final case class DescribeScheduledInstancesRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, slotStartTimeRange: scala.Option[avias.ec2.models.SlotStartTimeRangeRequest] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, scheduledInstanceId: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribePrefixListsResult(nextToken: scala.Option[java.lang.String] = scala.None, prefixListSet: scala.Option[scala.List[avias.ec2.models.PrefixList]] = scala.None)
final case class DescribeVpcClassicLinkDnsSupportResult(nextToken: scala.Option[java.lang.String] = scala.None, vpcs: scala.Option[scala.List[avias.ec2.models.ClassicLinkDnsSupport]] = scala.None)
final case class DescribeReservedInstancesListingsResult(reservedInstancesListingsSet: scala.Option[scala.List[avias.ec2.models.ReservedInstancesListing]] = scala.None)
final case class DeleteVpcPeeringConnectionResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class DescribeScheduledInstancesResult(nextToken: scala.Option[java.lang.String] = scala.None, scheduledInstanceSet: scala.Option[scala.List[avias.ec2.models.ScheduledInstance]] = scala.None)
final case class InstanceIpv6Address(ipv6Address: scala.Option[java.lang.String] = scala.None)
final case class SpotPrice(availabilityZone: scala.Option[java.lang.String] = scala.None, spotPrice: scala.Option[java.lang.String] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None, productDescription: scala.Option[java.lang.String] = scala.None, timestamp: scala.Option[java.time.Instant] = scala.None)
final case class AttachClassicLinkVpcResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class CopyImageRequest(name: java.lang.String, sourceImageId: java.lang.String, sourceRegion: java.lang.String, clientToken: scala.Option[java.lang.String] = scala.None, kmsKeyId: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, encrypted: scala.Option[scala.Boolean] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class NatGatewayAddress(allocationId: scala.Option[java.lang.String] = scala.None, networkInterfaceId: scala.Option[java.lang.String] = scala.None, privateIp: scala.Option[java.lang.String] = scala.None, publicIp: scala.Option[java.lang.String] = scala.None)
final case class DescribeSpotPriceHistoryResult(nextToken: scala.Option[java.lang.String] = scala.None, spotPriceHistorySet: scala.Option[scala.List[avias.ec2.models.SpotPrice]] = scala.None)
final case class MonitorInstancesResult(instancesSet: scala.Option[scala.List[avias.ec2.models.InstanceMonitoring]] = scala.None)
final case class DescribeSnapshotAttributeRequest(attribute: java.lang.String, snapshotId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeVpcClassicLinkDnsSupportRequest(maxResults: scala.Option[scala.Int] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, vpcIds: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class PurchaseScheduledInstancesResult(scheduledInstanceSet: scala.Option[scala.List[avias.ec2.models.ScheduledInstance]] = scala.None)
final case class ImageDiskContainer(format: scala.Option[java.lang.String] = scala.None, deviceName: scala.Option[java.lang.String] = scala.None, url: scala.Option[java.lang.String] = scala.None, snapshotId: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, userBucket: scala.Option[avias.ec2.models.UserBucket] = scala.None)
final case class CreateFlowLogsRequest(deliverLogsPermissionArn: java.lang.String, logGroupName: java.lang.String, resourceId: scala.List[java.lang.String], resourceType: java.lang.String, trafficType: java.lang.String, clientToken: scala.Option[java.lang.String] = scala.None)
final case class HostReservation(paymentOption: scala.Option[java.lang.String] = scala.None, hostIdSet: scala.Option[scala.List[java.lang.String]] = scala.None, offeringId: scala.Option[java.lang.String] = scala.None, hostReservationId: scala.Option[java.lang.String] = scala.None, instanceFamily: scala.Option[java.lang.String] = scala.None, hourlyPrice: scala.Option[java.lang.String] = scala.None, upfrontPrice: scala.Option[java.lang.String] = scala.None, end: scala.Option[java.time.Instant] = scala.None, start: scala.Option[java.time.Instant] = scala.None, state: scala.Option[java.lang.String] = scala.None, count: scala.Option[scala.Int] = scala.None, duration: scala.Option[scala.Int] = scala.None, currencyCode: scala.Option[java.lang.String] = scala.None)
final case class DescribeSpotDatafeedSubscriptionRequest(dryRun: scala.Option[scala.Boolean] = scala.None)
final case class RegisterImageRequest(name: java.lang.String, architecture: scala.Option[java.lang.String] = scala.None, rootDeviceName: scala.Option[java.lang.String] = scala.None, ramdiskId: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, imageLocation: scala.Option[java.lang.String] = scala.None, kernelId: scala.Option[java.lang.String] = scala.None, virtualizationType: scala.Option[java.lang.String] = scala.None, sriovNetSupport: scala.Option[java.lang.String] = scala.None, billingProduct: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, enaSupport: scala.Option[scala.Boolean] = scala.None, blockDeviceMapping: scala.Option[scala.List[avias.ec2.models.BlockDeviceMapping]] = scala.None)
final case class NetworkInterfacePrivateIpAddress(association: scala.Option[avias.ec2.models.NetworkInterfaceAssociation] = scala.None, primary: scala.Option[scala.Boolean] = scala.None, privateDnsName: scala.Option[java.lang.String] = scala.None, privateIpAddress: scala.Option[java.lang.String] = scala.None)
final case class StopInstancesRequest(instanceId: scala.List[java.lang.String], dryRun: scala.Option[scala.Boolean] = scala.None, force: scala.Option[scala.Boolean] = scala.None)
final case class StopInstancesResult(instancesSet: scala.Option[scala.List[avias.ec2.models.InstanceStateChange]] = scala.None)
final case class AcceptReservedInstancesExchangeQuoteRequest(reservedInstanceId: scala.List[java.lang.String], dryRun: scala.Option[scala.Boolean] = scala.None, targetConfiguration: scala.Option[scala.List[avias.ec2.models.TargetConfigurationRequest]] = scala.None)
final case class InstanceBlockDeviceMapping(deviceName: scala.Option[java.lang.String] = scala.None, ebs: scala.Option[avias.ec2.models.EbsInstanceBlockDevice] = scala.None)
final case class DescribeRouteTablesResult(routeTableSet: scala.Option[scala.List[avias.ec2.models.RouteTable]] = scala.None)
final case class ScheduledInstanceAvailability(networkPlatform: scala.Option[java.lang.String] = scala.None, platform: scala.Option[java.lang.String] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, hourlyPrice: scala.Option[java.lang.String] = scala.None, purchaseToken: scala.Option[java.lang.String] = scala.None, availableInstanceCount: scala.Option[scala.Int] = scala.None, minTermDurationInDays: scala.Option[scala.Int] = scala.None, maxTermDurationInDays: scala.Option[scala.Int] = scala.None, totalScheduledInstanceHours: scala.Option[scala.Int] = scala.None, slotDurationInHours: scala.Option[scala.Int] = scala.None, firstSlotStartTime: scala.Option[java.time.Instant] = scala.None, recurrence: scala.Option[avias.ec2.models.ScheduledInstanceRecurrence] = scala.None)
final case class PortRange(from: scala.Option[scala.Int] = scala.None, to: scala.Option[scala.Int] = scala.None)
final case class InternetGatewayAttachment(state: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None)
final case class VolumeStatusAction(code: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, eventId: scala.Option[java.lang.String] = scala.None, eventType: scala.Option[java.lang.String] = scala.None)
final case class AllocateAddressRequest(domain: scala.Option[java.lang.String] = scala.None, address: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class InstanceStatusSummary(details: scala.Option[scala.List[avias.ec2.models.InstanceStatusDetails]] = scala.None, status: scala.Option[java.lang.String] = scala.None)
final case class NetworkInterfaceAttachment(attachmentId: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, instanceOwnerId: scala.Option[java.lang.String] = scala.None, attachTime: scala.Option[java.time.Instant] = scala.None, deviceIndex: scala.Option[scala.Int] = scala.None, deleteOnTermination: scala.Option[scala.Boolean] = scala.None, status: scala.Option[java.lang.String] = scala.None)
final case class DeleteTagsRequest(resourceId: scala.List[java.lang.String], dryRun: scala.Option[scala.Boolean] = scala.None, tag: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None)
final case class CreateReservedInstancesListingRequest(clientToken: java.lang.String, reservedInstancesId: java.lang.String, instanceCount: scala.Int, priceSchedules: scala.List[avias.ec2.models.PriceScheduleSpecification])
final case class DescribeVpcPeeringConnectionsResult(vpcPeeringConnectionSet: scala.Option[scala.List[avias.ec2.models.VpcPeeringConnection]] = scala.None)
final case class ClassicLinkInstance(groupSet: scala.Option[scala.List[avias.ec2.models.GroupIdentifier]] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None)
final case class ReplaceRouteRequest(routeTableId: java.lang.String, networkInterfaceId: scala.Option[java.lang.String] = scala.None, natGatewayId: scala.Option[java.lang.String] = scala.None, egressOnlyInternetGatewayId: scala.Option[java.lang.String] = scala.None, destinationIpv6CidrBlock: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, vpcPeeringConnectionId: scala.Option[java.lang.String] = scala.None, destinationCidrBlock: scala.Option[java.lang.String] = scala.None, gatewayId: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class VpcClassicLink(classicLinkEnabled: scala.Option[scala.Boolean] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None)
final case class GetReservedInstancesExchangeQuoteRequest(reservedInstanceId: scala.List[java.lang.String], dryRun: scala.Option[scala.Boolean] = scala.None, targetConfiguration: scala.Option[scala.List[avias.ec2.models.TargetConfigurationRequest]] = scala.None)
final case class ImageAttribute(productCodes: scala.Option[scala.List[avias.ec2.models.ProductCode]] = scala.None, launchPermission: scala.Option[scala.List[avias.ec2.models.LaunchPermission]] = scala.None, imageId: scala.Option[java.lang.String] = scala.None, description: scala.Option[avias.ec2.models.AttributeValue] = scala.None, kernel: scala.Option[avias.ec2.models.AttributeValue] = scala.None, ramdisk: scala.Option[avias.ec2.models.AttributeValue] = scala.None, sriovNetSupport: scala.Option[avias.ec2.models.AttributeValue] = scala.None, blockDeviceMapping: scala.Option[scala.List[avias.ec2.models.BlockDeviceMapping]] = scala.None)
final case class DeleteSpotDatafeedSubscriptionRequest(dryRun: scala.Option[scala.Boolean] = scala.None)
final case class AttachInternetGatewayRequest(internetGatewayId: java.lang.String, vpcId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class TagDescription(key: scala.Option[java.lang.String] = scala.None, resourceId: scala.Option[java.lang.String] = scala.None, value: scala.Option[java.lang.String] = scala.None, resourceType: scala.Option[java.lang.String] = scala.None)
final case class CreateDhcpOptionsRequest(dhcpConfiguration: scala.List[avias.ec2.models.NewDhcpConfiguration], dryRun: scala.Option[scala.Boolean] = scala.None)
final case class StorageLocation(bucket: scala.Option[java.lang.String] = scala.None, key: scala.Option[java.lang.String] = scala.None)
final case class DescribeFpgaImageAttributeRequest(fpgaImageId: java.lang.String, attribute: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ImportVolumeTaskDetails(availabilityZone: java.lang.String, bytesConverted: scala.Long, image: avias.ec2.models.DiskImageDescription, volume: avias.ec2.models.DiskImageVolumeDescription, description: scala.Option[java.lang.String] = scala.None)
final case class ImportSnapshotRequest(clientData: scala.Option[avias.ec2.models.ClientData] = scala.None, clientToken: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, roleName: scala.Option[java.lang.String] = scala.None, diskContainer: scala.Option[avias.ec2.models.SnapshotDiskContainer] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class RunScheduledInstancesRequest(launchSpecification: avias.ec2.models.ScheduledInstancesLaunchSpecification, scheduledInstanceId: java.lang.String, clientToken: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, instanceCount: scala.Option[scala.Int] = scala.None)
final case class RejectVpcPeeringConnectionResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class InstanceAttribute(productCodes: scala.Option[scala.List[avias.ec2.models.ProductCode]] = scala.None, blockDeviceMapping: scala.Option[scala.List[avias.ec2.models.InstanceBlockDeviceMapping]] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, groupSet: scala.Option[scala.List[avias.ec2.models.GroupIdentifier]] = scala.None, sriovNetSupport: scala.Option[avias.ec2.models.AttributeValue] = scala.None, userData: scala.Option[avias.ec2.models.AttributeValue] = scala.None, instanceType: scala.Option[avias.ec2.models.AttributeValue] = scala.None, instanceInitiatedShutdownBehavior: scala.Option[avias.ec2.models.AttributeValue] = scala.None, kernel: scala.Option[avias.ec2.models.AttributeValue] = scala.None, rootDeviceName: scala.Option[avias.ec2.models.AttributeValue] = scala.None, ramdisk: scala.Option[avias.ec2.models.AttributeValue] = scala.None, disableApiTermination: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None, enaSupport: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None, ebsOptimized: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None, sourceDestCheck: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None)
final case class StaleSecurityGroup(groupId: java.lang.String, description: scala.Option[java.lang.String] = scala.None, groupName: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, staleIpPermissions: scala.Option[scala.List[avias.ec2.models.StaleIpPermission]] = scala.None, staleIpPermissionsEgress: scala.Option[scala.List[avias.ec2.models.StaleIpPermission]] = scala.None)
final case class GetConsoleScreenshotResult(imageData: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None)
final case class DetachVpnGatewayRequest(vpcId: java.lang.String, vpnGatewayId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeVpcPeeringConnectionsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, vpcPeeringConnectionId: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class VpnConnection(customerGatewayConfiguration: scala.Option[java.lang.String] = scala.None, customerGatewayId: scala.Option[java.lang.String] = scala.None, vpnGatewayId: scala.Option[java.lang.String] = scala.None, vpnConnectionId: scala.Option[java.lang.String] = scala.None, category: scala.Option[java.lang.String] = scala.None, vgwTelemetry: scala.Option[scala.List[avias.ec2.models.VgwTelemetry]] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, options: scala.Option[avias.ec2.models.VpnConnectionOptions] = scala.None, `type`: scala.Option[java.lang.String] = scala.None, routes: scala.Option[scala.List[avias.ec2.models.VpnStaticRoute]] = scala.None, state: scala.Option[java.lang.String] = scala.None)
final case class ModifyFpgaImageAttributeResult(fpgaImageAttribute: scala.Option[avias.ec2.models.FpgaImageAttribute] = scala.None)
final case class DescribeInternetGatewaysRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, internetGatewayId: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class ModifyHostsRequest(autoPlacement: java.lang.String, hostId: scala.List[java.lang.String])
final case class BundleInstanceRequest(instanceId: java.lang.String, storage: avias.ec2.models.Storage, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeSpotFleetInstancesRequest(spotFleetRequestId: java.lang.String, nextToken: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, maxResults: scala.Option[scala.Int] = scala.None)
final case class DisableVpcClassicLinkDnsSupportResult(`return`: scala.Option[scala.Boolean] = scala.None)
final case class AttachVpnGatewayRequest(vpcId: java.lang.String, vpnGatewayId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeDhcpOptionsRequest(dhcpOptionsId: scala.Option[scala.List[java.lang.String]] = scala.None, filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class SpotPlacement(availabilityZone: scala.Option[java.lang.String] = scala.None, groupName: scala.Option[java.lang.String] = scala.None, tenancy: scala.Option[java.lang.String] = scala.None)
final case class PlacementGroup(groupName: scala.Option[java.lang.String] = scala.None, state: scala.Option[java.lang.String] = scala.None, strategy: scala.Option[java.lang.String] = scala.None)
final case class BundleInstanceResult(bundleInstanceTask: scala.Option[avias.ec2.models.BundleTask] = scala.None)
final case class DescribeVolumeAttributeResult(autoEnableIO: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None, productCodes: scala.Option[scala.List[avias.ec2.models.ProductCode]] = scala.None, volumeId: scala.Option[java.lang.String] = scala.None)
final case class NetworkInterfaceIpv6Address(ipv6Address: scala.Option[java.lang.String] = scala.None)
final case class IpPermission(ipProtocol: scala.Option[java.lang.String] = scala.None, prefixListIds: scala.Option[scala.List[avias.ec2.models.PrefixListId]] = scala.None, ipv6Ranges: scala.Option[scala.List[avias.ec2.models.Ipv6Range]] = scala.None, ipRanges: scala.Option[scala.List[avias.ec2.models.IpRange]] = scala.None, fromPort: scala.Option[scala.Int] = scala.None, toPort: scala.Option[scala.Int] = scala.None, groups: scala.Option[scala.List[avias.ec2.models.UserIdGroupPair]] = scala.None)
final case class DescribeStaleSecurityGroupsResult(nextToken: scala.Option[java.lang.String] = scala.None, staleSecurityGroupSet: scala.Option[scala.List[avias.ec2.models.StaleSecurityGroup]] = scala.None)
final case class ModifySubnetAttributeRequest(subnetId: java.lang.String, assignIpv6AddressOnCreation: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None, mapPublicIpOnLaunch: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None)
final case class GetPasswordDataResult(instanceId: scala.Option[java.lang.String] = scala.None, passwordData: scala.Option[java.lang.String] = scala.None, timestamp: scala.Option[java.time.Instant] = scala.None)
final case class PurchaseScheduledInstancesRequest(purchaseRequest: scala.List[avias.ec2.models.PurchaseRequest], clientToken: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CancelSpotFleetRequestsRequest(spotFleetRequestId: scala.List[java.lang.String], terminateInstances: scala.Boolean, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ReplaceIamInstanceProfileAssociationRequest(iamInstanceProfile: avias.ec2.models.IamInstanceProfileSpecification, associationId: java.lang.String)
final case class CancelSpotFleetRequestsError(code: java.lang.String, message: java.lang.String)
final case class S3Storage(awsaccessKeyId: scala.Option[java.lang.String] = scala.None, bucket: scala.Option[java.lang.String] = scala.None, prefix: scala.Option[java.lang.String] = scala.None, uploadPolicySignature: scala.Option[java.lang.String] = scala.None, uploadPolicy: scala.Option[scala.Array[scala.Byte]] = scala.None)
final case class ElasticGpuAssociation(elasticGpuId: scala.Option[java.lang.String] = scala.None, elasticGpuAssociationId: scala.Option[java.lang.String] = scala.None, elasticGpuAssociationState: scala.Option[java.lang.String] = scala.None, elasticGpuAssociationTime: scala.Option[java.lang.String] = scala.None)
final case class ResetInstanceAttributeRequest(attribute: java.lang.String, instanceId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeCustomerGatewaysRequest(customerGatewayId: scala.Option[scala.List[java.lang.String]] = scala.None, filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeCustomerGatewaysResult(customerGatewaySet: scala.Option[scala.List[avias.ec2.models.CustomerGateway]] = scala.None)
final case class RejectVpcPeeringConnectionRequest(vpcPeeringConnectionId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CancelExportTaskRequest(exportTaskId: java.lang.String)
final case class KeyPair(keyFingerprint: scala.Option[java.lang.String] = scala.None, keyMaterial: scala.Option[java.lang.String] = scala.None, keyName: scala.Option[java.lang.String] = scala.None)
final case class PrefixList(cidrSet: scala.Option[scala.List[java.lang.String]] = scala.None, prefixListId: scala.Option[java.lang.String] = scala.None, prefixListName: scala.Option[java.lang.String] = scala.None)
final case class ScheduledInstancesBlockDeviceMapping(deviceName: scala.Option[java.lang.String] = scala.None, noDevice: scala.Option[java.lang.String] = scala.None, virtualName: scala.Option[java.lang.String] = scala.None, ebs: scala.Option[avias.ec2.models.ScheduledInstancesEbs] = scala.None)
final case class HostProperties(cores: scala.Option[scala.Int] = scala.None, sockets: scala.Option[scala.Int] = scala.None, totalVCpus: scala.Option[scala.Int] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None)
final case class CreateInstanceExportTaskResult(exportTask: scala.Option[avias.ec2.models.ExportTask] = scala.None)
final case class InstanceStateChange(currentState: scala.Option[avias.ec2.models.InstanceState] = scala.None, previousState: scala.Option[avias.ec2.models.InstanceState] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None)
final case class CreateRouteTableRequest(vpcId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeHostsResult(hostSet: scala.Option[scala.List[avias.ec2.models.Host]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class IpRange(cidrIp: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None)
final case class DiskImageDescription(format: java.lang.String, importManifestUrl: java.lang.String, size: scala.Long, checksum: scala.Option[java.lang.String] = scala.None)
final case class SpotFleetTagSpecification(resourceType: scala.Option[java.lang.String] = scala.None, tag: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None)
final case class DescribeHostReservationsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, hostReservationIdSet: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class ModifyInstanceAttributeRequest(instanceId: java.lang.String, attribute: scala.Option[java.lang.String] = scala.None, value: scala.Option[java.lang.String] = scala.None, groupId: scala.Option[scala.List[java.lang.String]] = scala.None, sriovNetSupport: scala.Option[avias.ec2.models.AttributeValue] = scala.None, instanceType: scala.Option[avias.ec2.models.AttributeValue] = scala.None, instanceInitiatedShutdownBehavior: scala.Option[avias.ec2.models.AttributeValue] = scala.None, kernel: scala.Option[avias.ec2.models.AttributeValue] = scala.None, ramdisk: scala.Option[avias.ec2.models.AttributeValue] = scala.None, userData: scala.Option[avias.ec2.models.BlobAttributeValue] = scala.None, blockDeviceMapping: scala.Option[scala.List[avias.ec2.models.InstanceBlockDeviceMappingSpecification]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, sourceDestCheck: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None, disableApiTermination: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None, ebsOptimized: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None, enaSupport: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None)
final case class ReservedInstances(duration: scala.Option[scala.Long] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, reservedInstancesId: scala.Option[java.lang.String] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, offeringClass: scala.Option[java.lang.String] = scala.None, productDescription: scala.Option[java.lang.String] = scala.None, end: scala.Option[java.time.Instant] = scala.None, start: scala.Option[java.time.Instant] = scala.None, offeringType: scala.Option[java.lang.String] = scala.None, recurringCharges: scala.Option[scala.List[avias.ec2.models.RecurringCharge]] = scala.None, instanceTenancy: scala.Option[java.lang.String] = scala.None, scope: scala.Option[java.lang.String] = scala.None, state: scala.Option[java.lang.String] = scala.None, instanceCount: scala.Option[scala.Int] = scala.None, currencyCode: scala.Option[java.lang.String] = scala.None, fixedPrice: scala.Option[scala.Float] = scala.None, usagePrice: scala.Option[scala.Float] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None)
final case class DhcpOptions(dhcpConfigurationSet: scala.Option[scala.List[avias.ec2.models.DhcpConfiguration]] = scala.None, dhcpOptionsId: scala.Option[java.lang.String] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None)
final case class DescribeStaleSecurityGroupsRequest(vpcId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DescribeVpcEndpointsResult(vpcEndpointSet: scala.Option[scala.List[avias.ec2.models.VpcEndpoint]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class Monitoring(state: scala.Option[java.lang.String] = scala.None)
final case class AssignIpv6AddressesRequest(networkInterfaceId: java.lang.String, ipv6AddressCount: scala.Option[scala.Int] = scala.None, ipv6Addresses: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class EbsInstanceBlockDeviceSpecification(deleteOnTermination: scala.Option[scala.Boolean] = scala.None, volumeId: scala.Option[java.lang.String] = scala.None)
final case class BundleTask(bundleId: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, progress: scala.Option[java.lang.String] = scala.None, error: scala.Option[avias.ec2.models.BundleTaskError] = scala.None, storage: scala.Option[avias.ec2.models.Storage] = scala.None, startTime: scala.Option[java.time.Instant] = scala.None, updateTime: scala.Option[java.time.Instant] = scala.None, state: scala.Option[java.lang.String] = scala.None)
final case class DescribeVpcAttributeResult(vpcId: scala.Option[java.lang.String] = scala.None, enableDnsHostnames: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None, enableDnsSupport: scala.Option[avias.ec2.models.AttributeBooleanValue] = scala.None)
final case class TerminateInstancesRequest(instanceId: scala.List[java.lang.String], dryRun: scala.Option[scala.Boolean] = scala.None)
final case class AttachVpnGatewayResult(attachment: scala.Option[avias.ec2.models.VpcAttachment] = scala.None)
final case class DescribeFpgaImagesRequest(maxResults: scala.Option[scala.Int] = scala.None, owner: scala.Option[scala.List[java.lang.String]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, fpgaImageId: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class UserData(data: scala.Option[java.lang.String] = scala.None)
final case class FlowLog(creationTime: scala.Option[java.time.Instant] = scala.None, flowLogStatus: scala.Option[java.lang.String] = scala.None, flowLogId: scala.Option[java.lang.String] = scala.None, deliverLogsStatus: scala.Option[java.lang.String] = scala.None, resourceId: scala.Option[java.lang.String] = scala.None, deliverLogsErrorMessage: scala.Option[java.lang.String] = scala.None, deliverLogsPermissionArn: scala.Option[java.lang.String] = scala.None, logGroupName: scala.Option[java.lang.String] = scala.None, trafficType: scala.Option[java.lang.String] = scala.None)
final case class LaunchSpecification(ramdiskId: scala.Option[java.lang.String] = scala.None, userData: scala.Option[java.lang.String] = scala.None, keyName: scala.Option[java.lang.String] = scala.None, kernelId: scala.Option[java.lang.String] = scala.None, addressingType: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None, imageId: scala.Option[java.lang.String] = scala.None, groupSet: scala.Option[scala.List[avias.ec2.models.GroupIdentifier]] = scala.None, iamInstanceProfile: scala.Option[avias.ec2.models.IamInstanceProfileSpecification] = scala.None, monitoring: scala.Option[avias.ec2.models.RunInstancesMonitoringEnabled] = scala.None, networkInterfaceSet: scala.Option[scala.List[avias.ec2.models.InstanceNetworkInterfaceSpecification]] = scala.None, blockDeviceMapping: scala.Option[scala.List[avias.ec2.models.BlockDeviceMapping]] = scala.None, placement: scala.Option[avias.ec2.models.SpotPlacement] = scala.None, ebsOptimized: scala.Option[scala.Boolean] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None)
final case class CreateImageRequest(instanceId: java.lang.String, name: java.lang.String, description: scala.Option[java.lang.String] = scala.None, blockDeviceMapping: scala.Option[scala.List[avias.ec2.models.BlockDeviceMapping]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, noReboot: scala.Option[scala.Boolean] = scala.None)
final case class DescribeVpnGatewaysResult(vpnGatewaySet: scala.Option[scala.List[avias.ec2.models.VpnGateway]] = scala.None)
final case class PricingDetail(count: scala.Option[scala.Int] = scala.None, price: scala.Option[scala.Double] = scala.None)
final case class AssociateSubnetCidrBlockResult(ipv6CidrBlockAssociation: scala.Option[avias.ec2.models.SubnetIpv6CidrBlockAssociation] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None)
final case class CancelSpotFleetRequestsSuccessItem(currentSpotFleetRequestState: java.lang.String, previousSpotFleetRequestState: java.lang.String, spotFleetRequestId: java.lang.String)
final case class Filter(name: scala.Option[java.lang.String] = scala.None, value: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class SubnetCidrBlockState(state: scala.Option[java.lang.String] = scala.None, statusMessage: scala.Option[java.lang.String] = scala.None)
final case class SpotDatafeedSubscription(bucket: scala.Option[java.lang.String] = scala.None, ownerId: scala.Option[java.lang.String] = scala.None, prefix: scala.Option[java.lang.String] = scala.None, fault: scala.Option[avias.ec2.models.SpotInstanceStateFault] = scala.None, state: scala.Option[java.lang.String] = scala.None)
final case class CreateVpnConnectionRequest(customerGatewayId: java.lang.String, `type`: java.lang.String, vpnGatewayId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None, options: scala.Option[avias.ec2.models.VpnConnectionOptionsSpecification] = scala.None)
final case class CreateNatGatewayRequest(allocationId: java.lang.String, subnetId: java.lang.String, clientToken: scala.Option[java.lang.String] = scala.None)
final case class CancelSpotInstanceRequestsRequest(spotInstanceRequestId: scala.List[java.lang.String], dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CreateCustomerGatewayResult(customerGateway: scala.Option[avias.ec2.models.CustomerGateway] = scala.None)
final case class NetworkInterfacePermissionState(state: scala.Option[java.lang.String] = scala.None, statusMessage: scala.Option[java.lang.String] = scala.None)
final case class DescribeVpcClassicLinkRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, vpcId: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class VolumeStatusInfo(details: scala.Option[scala.List[avias.ec2.models.VolumeStatusDetails]] = scala.None, status: scala.Option[java.lang.String] = scala.None)
final case class VpcPeeringConnection(vpcPeeringConnectionId: scala.Option[java.lang.String] = scala.None, status: scala.Option[avias.ec2.models.VpcPeeringConnectionStateReason] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, accepterVpcInfo: scala.Option[avias.ec2.models.VpcPeeringConnectionVpcInfo] = scala.None, requesterVpcInfo: scala.Option[avias.ec2.models.VpcPeeringConnectionVpcInfo] = scala.None, expirationTime: scala.Option[java.time.Instant] = scala.None)
final case class ReservedInstancesListing(status: scala.Option[java.lang.String] = scala.None, clientToken: scala.Option[java.lang.String] = scala.None, reservedInstancesId: scala.Option[java.lang.String] = scala.None, reservedInstancesListingId: scala.Option[java.lang.String] = scala.None, statusMessage: scala.Option[java.lang.String] = scala.None, tagSet: scala.Option[scala.List[avias.ec2.models.Tag]] = scala.None, createDate: scala.Option[java.time.Instant] = scala.None, updateDate: scala.Option[java.time.Instant] = scala.None, instanceCounts: scala.Option[scala.List[avias.ec2.models.InstanceCount]] = scala.None, priceSchedules: scala.Option[scala.List[avias.ec2.models.PriceSchedule]] = scala.None)
final case class DescribeHostReservationOfferingsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, maxDuration: scala.Option[scala.Int] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, minDuration: scala.Option[scala.Int] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, offeringId: scala.Option[java.lang.String] = scala.None)
final case class CreateSubnetRequest(cidrBlock: java.lang.String, vpcId: java.lang.String, availabilityZone: scala.Option[java.lang.String] = scala.None, ipv6CidrBlock: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class InstanceNetworkInterface(privateIpAddressesSet: scala.Option[scala.List[avias.ec2.models.InstancePrivateIpAddress]] = scala.None, attachment: scala.Option[avias.ec2.models.InstanceNetworkInterfaceAttachment] = scala.None, privateDnsName: scala.Option[java.lang.String] = scala.None, macAddress: scala.Option[java.lang.String] = scala.None, networkInterfaceId: scala.Option[java.lang.String] = scala.None, description: scala.Option[java.lang.String] = scala.None, privateIpAddress: scala.Option[java.lang.String] = scala.None, ownerId: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None, ipv6AddressesSet: scala.Option[scala.List[avias.ec2.models.InstanceIpv6Address]] = scala.None, groupSet: scala.Option[scala.List[avias.ec2.models.GroupIdentifier]] = scala.None, association: scala.Option[avias.ec2.models.InstanceNetworkInterfaceAssociation] = scala.None, status: scala.Option[java.lang.String] = scala.None, sourceDestCheck: scala.Option[scala.Boolean] = scala.None)
final case class DhcpConfiguration(key: scala.Option[java.lang.String] = scala.None, valueSet: scala.Option[scala.List[avias.ec2.models.AttributeValue]] = scala.None)
final case class ReplaceNetworkAclAssociationRequest(associationId: java.lang.String, networkAclId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CreateNetworkAclResult(networkAcl: scala.Option[avias.ec2.models.NetworkAcl] = scala.None)
final case class DescribeSecurityGroupsResult(securityGroupInfo: scala.Option[scala.List[avias.ec2.models.SecurityGroup]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class PurchaseReservedInstancesOfferingResult(reservedInstancesId: scala.Option[java.lang.String] = scala.None)
final case class DescribeVpcEndpointServicesRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, serviceName: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CreateInternetGatewayResult(internetGateway: scala.Option[avias.ec2.models.InternetGateway] = scala.None)
final case class DeleteVpnConnectionRouteRequest(destinationCidrBlock: java.lang.String, vpnConnectionId: java.lang.String)
final case class PeeringConnectionOptionsRequest(allowDnsResolutionFromRemoteVpc: scala.Option[scala.Boolean] = scala.None, allowEgressFromLocalClassicLinkToRemoteVpc: scala.Option[scala.Boolean] = scala.None, allowEgressFromLocalVpcToRemoteClassicLink: scala.Option[scala.Boolean] = scala.None)
final case class ImportSnapshotResult(description: scala.Option[java.lang.String] = scala.None, importTaskId: scala.Option[java.lang.String] = scala.None, snapshotTaskDetail: scala.Option[avias.ec2.models.SnapshotTaskDetail] = scala.None)
final case class DeleteRouteRequest(routeTableId: java.lang.String, destinationCidrBlock: scala.Option[java.lang.String] = scala.None, destinationIpv6CidrBlock: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class CancelImportTaskRequest(cancelReason: scala.Option[java.lang.String] = scala.None, importTaskId: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ImportVolumeResult(conversionTask: scala.Option[avias.ec2.models.ConversionTask] = scala.None)
final case class ScheduledInstance(networkPlatform: scala.Option[java.lang.String] = scala.None, platform: scala.Option[java.lang.String] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None, availabilityZone: scala.Option[java.lang.String] = scala.None, scheduledInstanceId: scala.Option[java.lang.String] = scala.None, hourlyPrice: scala.Option[java.lang.String] = scala.None, previousSlotEndTime: scala.Option[java.time.Instant] = scala.None, createDate: scala.Option[java.time.Instant] = scala.None, termEndDate: scala.Option[java.time.Instant] = scala.None, termStartDate: scala.Option[java.time.Instant] = scala.None, nextSlotStartTime: scala.Option[java.time.Instant] = scala.None, instanceCount: scala.Option[scala.Int] = scala.None, slotDurationInHours: scala.Option[scala.Int] = scala.None, totalScheduledInstanceHours: scala.Option[scala.Int] = scala.None, recurrence: scala.Option[avias.ec2.models.ScheduledInstanceRecurrence] = scala.None)
final case class ModifySpotFleetRequestRequest(spotFleetRequestId: java.lang.String, excessCapacityTerminationPolicy: scala.Option[java.lang.String] = scala.None, targetCapacity: scala.Option[scala.Int] = scala.None)
final case class ReleaseHostsResult(successful: scala.Option[scala.List[java.lang.String]] = scala.None, unsuccessful: scala.Option[scala.List[avias.ec2.models.UnsuccessfulItem]] = scala.None)
final case class RunScheduledInstancesResult(instanceIdSet: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class DescribeSubnetsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, subnetId: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class RevokeSecurityGroupIngressRequest(sourceSecurityGroupName: scala.Option[java.lang.String] = scala.None, groupId: scala.Option[java.lang.String] = scala.None, ipProtocol: scala.Option[java.lang.String] = scala.None, groupName: scala.Option[java.lang.String] = scala.None, sourceSecurityGroupOwnerId: scala.Option[java.lang.String] = scala.None, cidrIp: scala.Option[java.lang.String] = scala.None, fromPort: scala.Option[scala.Int] = scala.None, toPort: scala.Option[scala.Int] = scala.None, ipPermissions: scala.Option[scala.List[avias.ec2.models.IpPermission]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class LoadBalancersConfig(classicLoadBalancersConfig: scala.Option[avias.ec2.models.ClassicLoadBalancersConfig] = scala.None, targetGroupsConfig: scala.Option[avias.ec2.models.TargetGroupsConfig] = scala.None)
final case class ModifyVpcPeeringConnectionOptionsRequest(vpcPeeringConnectionId: java.lang.String, accepterPeeringConnectionOptions: scala.Option[avias.ec2.models.PeeringConnectionOptionsRequest] = scala.None, requesterPeeringConnectionOptions: scala.Option[avias.ec2.models.PeeringConnectionOptionsRequest] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class GetConsoleOutputRequest(instanceId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ScheduledInstanceRecurrence(frequency: scala.Option[java.lang.String] = scala.None, occurrenceUnit: scala.Option[java.lang.String] = scala.None, interval: scala.Option[scala.Int] = scala.None, occurrenceDaySet: scala.Option[scala.List[scala.Int]] = scala.None, occurrenceRelativeToEnd: scala.Option[scala.Boolean] = scala.None)
final case class DescribeVpcEndpointsRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, vpcEndpointId: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class StartInstancesResult(instancesSet: scala.Option[scala.List[avias.ec2.models.InstanceStateChange]] = scala.None)
final case class DescribeExportTasksResult(exportTaskSet: scala.Option[scala.List[avias.ec2.models.ExportTask]] = scala.None)
final case class ProvisionedBandwidth(provisionTime: scala.Option[java.time.Instant] = scala.None, requestTime: scala.Option[java.time.Instant] = scala.None, provisioned: scala.Option[java.lang.String] = scala.None, requested: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None)
final case class ModifySnapshotAttributeRequest(snapshotId: java.lang.String, createVolumePermission: scala.Option[avias.ec2.models.CreateVolumePermissionModifications] = scala.None, userId: scala.Option[scala.List[java.lang.String]] = scala.None, operationType: scala.Option[java.lang.String] = scala.None, attribute: scala.Option[java.lang.String] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None, userGroup: scala.Option[scala.List[java.lang.String]] = scala.None)
final case class InstanceStatus(availabilityZone: scala.Option[java.lang.String] = scala.None, instanceId: scala.Option[java.lang.String] = scala.None, eventsSet: scala.Option[scala.List[avias.ec2.models.InstanceStatusEvent]] = scala.None, instanceState: scala.Option[avias.ec2.models.InstanceState] = scala.None, instanceStatus: scala.Option[avias.ec2.models.InstanceStatusSummary] = scala.None, systemStatus: scala.Option[avias.ec2.models.InstanceStatusSummary] = scala.None)
final case class TargetConfigurationRequest(offeringId: java.lang.String, instanceCount: scala.Option[scala.Int] = scala.None)
final case class DescribeInstanceStatusResult(instanceStatusSet: scala.Option[scala.List[avias.ec2.models.InstanceStatus]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class PciId(deviceId: scala.Option[java.lang.String] = scala.None, vendorId: scala.Option[java.lang.String] = scala.None, subsystemId: scala.Option[java.lang.String] = scala.None, subsystemVendorId: scala.Option[java.lang.String] = scala.None)
final case class InstanceState(code: scala.Option[scala.Int] = scala.None, name: scala.Option[java.lang.String] = scala.None)
final case class CreateVpcPeeringConnectionRequest(dryRun: scala.Option[scala.Boolean] = scala.None, peerOwnerId: scala.Option[java.lang.String] = scala.None, peerVpcId: scala.Option[java.lang.String] = scala.None, vpcId: scala.Option[java.lang.String] = scala.None)
final case class DescribeBundleTasksRequest(bundleId: scala.Option[scala.List[java.lang.String]] = scala.None, filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeSnapshotsRequest(owner: scala.Option[scala.List[java.lang.String]] = scala.None, snapshotId: scala.Option[scala.List[java.lang.String]] = scala.None, filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None, restorableBy: scala.Option[scala.List[java.lang.String]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class AssignPrivateIpAddressesRequest(networkInterfaceId: java.lang.String, allowReassignment: scala.Option[scala.Boolean] = scala.None, privateIpAddress: scala.Option[scala.List[java.lang.String]] = scala.None, secondaryPrivateIpAddressCount: scala.Option[scala.Int] = scala.None)
final case class PropagatingVgw(gatewayId: scala.Option[java.lang.String] = scala.None)
final case class CreateDefaultSubnetResult(subnet: scala.Option[avias.ec2.models.Subnet] = scala.None)
final case class InstanceNetworkInterfaceSpecification(privateIpAddressesSet: scala.Option[scala.List[avias.ec2.models.PrivateIpAddressSpecification]] = scala.None, description: scala.Option[java.lang.String] = scala.None, networkInterfaceId: scala.Option[java.lang.String] = scala.None, privateIpAddress: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None, ipv6AddressesSet: scala.Option[scala.List[avias.ec2.models.InstanceIpv6Address]] = scala.None, securityGroupId: scala.Option[scala.List[java.lang.String]] = scala.None, deviceIndex: scala.Option[scala.Int] = scala.None, ipv6AddressCount: scala.Option[scala.Int] = scala.None, secondaryPrivateIpAddressCount: scala.Option[scala.Int] = scala.None, associatePublicIpAddress: scala.Option[scala.Boolean] = scala.None, deleteOnTermination: scala.Option[scala.Boolean] = scala.None)
final case class ScheduledInstancesLaunchSpecification(imageId: java.lang.String, networkInterface: scala.Option[scala.List[avias.ec2.models.ScheduledInstancesNetworkInterface]] = scala.None, monitoring: scala.Option[avias.ec2.models.ScheduledInstancesMonitoring] = scala.None, ramdiskId: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None, keyName: scala.Option[java.lang.String] = scala.None, kernelId: scala.Option[java.lang.String] = scala.None, userData: scala.Option[java.lang.String] = scala.None, blockDeviceMapping: scala.Option[scala.List[avias.ec2.models.ScheduledInstancesBlockDeviceMapping]] = scala.None, placement: scala.Option[avias.ec2.models.ScheduledInstancesPlacement] = scala.None, ebsOptimized: scala.Option[scala.Boolean] = scala.None, securityGroupId: scala.Option[scala.List[java.lang.String]] = scala.None, iamInstanceProfile: scala.Option[avias.ec2.models.ScheduledInstancesIamInstanceProfile] = scala.None)
final case class DescribeInstanceAttributeRequest(attribute: java.lang.String, instanceId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class MonitorInstancesRequest(instanceId: scala.List[java.lang.String], dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeVpnGatewaysRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, vpnGatewayId: scala.Option[scala.List[java.lang.String]] = scala.None, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ScheduledInstancesIamInstanceProfile(arn: scala.Option[java.lang.String] = scala.None, name: scala.Option[java.lang.String] = scala.None)
final case class DescribeIdentityIdFormatRequest(principalArn: java.lang.String, resource: scala.Option[java.lang.String] = scala.None)
final case class ReplaceIamInstanceProfileAssociationResult(iamInstanceProfileAssociation: scala.Option[avias.ec2.models.IamInstanceProfileAssociation] = scala.None)
final case class SpotFleetLaunchSpecification(ramdiskId: scala.Option[java.lang.String] = scala.None, userData: scala.Option[java.lang.String] = scala.None, keyName: scala.Option[java.lang.String] = scala.None, kernelId: scala.Option[java.lang.String] = scala.None, addressingType: scala.Option[java.lang.String] = scala.None, subnetId: scala.Option[java.lang.String] = scala.None, imageId: scala.Option[java.lang.String] = scala.None, spotPrice: scala.Option[java.lang.String] = scala.None, monitoring: scala.Option[avias.ec2.models.SpotFleetMonitoring] = scala.None, groupSet: scala.Option[scala.List[avias.ec2.models.GroupIdentifier]] = scala.None, iamInstanceProfile: scala.Option[avias.ec2.models.IamInstanceProfileSpecification] = scala.None, networkInterfaceSet: scala.Option[scala.List[avias.ec2.models.InstanceNetworkInterfaceSpecification]] = scala.None, blockDeviceMapping: scala.Option[scala.List[avias.ec2.models.BlockDeviceMapping]] = scala.None, tagSpecificationSet: scala.Option[scala.List[avias.ec2.models.SpotFleetTagSpecification]] = scala.None, placement: scala.Option[avias.ec2.models.SpotPlacement] = scala.None, ebsOptimized: scala.Option[scala.Boolean] = scala.None, weightedCapacity: scala.Option[scala.Double] = scala.None, instanceType: scala.Option[java.lang.String] = scala.None)
final case class DescribeElasticGpusResult(elasticGpuSet: scala.Option[scala.List[avias.ec2.models.ElasticGpus]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class CreateNetworkAclRequest(vpcId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class ReplaceRouteTableAssociationRequest(associationId: java.lang.String, routeTableId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class AttachClassicLinkVpcRequest(securityGroupId: scala.List[java.lang.String], instanceId: java.lang.String, vpcId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class DescribeNatGatewaysRequest(filter: scala.Option[scala.List[avias.ec2.models.Filter]] = scala.None, maxResults: scala.Option[scala.Int] = scala.None, natGatewayId: scala.Option[scala.List[java.lang.String]] = scala.None, nextToken: scala.Option[java.lang.String] = scala.None)
final case class DescribeVpcAttributeRequest(attribute: java.lang.String, vpcId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)
final case class AttributeBooleanValue(value: scala.Option[scala.Boolean] = scala.None)
final case class VgwTelemetry(acceptedRouteCount: scala.Option[scala.Int] = scala.None, lastStatusChange: scala.Option[java.time.Instant] = scala.None, outsideIpAddress: scala.Option[java.lang.String] = scala.None, statusMessage: scala.Option[java.lang.String] = scala.None, status: scala.Option[java.lang.String] = scala.None)
final case class DeleteFpgaImageRequest(fpgaImageId: java.lang.String, dryRun: scala.Option[scala.Boolean] = scala.None)