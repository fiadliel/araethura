package avias.ec2.http4s
import org.http4s.Method._
import avias.ec2.ec2._
import avias.ec2.models
import avias.common.http4s.ClientUtils._
class Amazonec2Client[F[_]: cats.effect.Sync](client: org.http4s.client.Client[F], awsData: avias.common.AwsData[F]) extends avias.ec2.Amazonec2[F] {
  private[this] final val ServiceType: String = "ec2"
  private[this] final val ServiceAndPrefix: Option[String] = None
  override def replaceRouteTableAssociation(input: avias.ec2.models.ReplaceRouteTableAssociationRequest): F[avias.ec2.models.ReplaceRouteTableAssociationResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ReplaceRouteTableAssociationResult, avias.ec2.models.ReplaceRouteTableAssociationRequest](client, awsData, ServiceType, ServiceAndPrefix, "ReplaceRouteTableAssociation", POST, "/", input)
  override def describeNetworkInterfaces(input: avias.ec2.models.DescribeNetworkInterfacesRequest): F[avias.ec2.models.DescribeNetworkInterfacesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeNetworkInterfacesResult, avias.ec2.models.DescribeNetworkInterfacesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeNetworkInterfaces", POST, "/", input)
  override def deleteEgressOnlyInternetGateway(input: avias.ec2.models.DeleteEgressOnlyInternetGatewayRequest): F[avias.ec2.models.DeleteEgressOnlyInternetGatewayResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DeleteEgressOnlyInternetGatewayResult, avias.ec2.models.DeleteEgressOnlyInternetGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteEgressOnlyInternetGateway", POST, "/", input)
  override def monitorInstances(input: avias.ec2.models.MonitorInstancesRequest): F[avias.ec2.models.MonitorInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.MonitorInstancesResult, avias.ec2.models.MonitorInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "MonitorInstances", POST, "/", input)
  override def describeVpnGateways(input: avias.ec2.models.DescribeVpnGatewaysRequest): F[avias.ec2.models.DescribeVpnGatewaysResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeVpnGatewaysResult, avias.ec2.models.DescribeVpnGatewaysRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVpnGateways", POST, "/", input)
  override def deleteVpcEndpoints(input: avias.ec2.models.DeleteVpcEndpointsRequest): F[avias.ec2.models.DeleteVpcEndpointsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DeleteVpcEndpointsResult, avias.ec2.models.DeleteVpcEndpointsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteVpcEndpoints", POST, "/", input)
  override def createFpgaImage(input: avias.ec2.models.CreateFpgaImageRequest): F[avias.ec2.models.CreateFpgaImageResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateFpgaImageResult, avias.ec2.models.CreateFpgaImageRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateFpgaImage", POST, "/", input)
  override def enableVgwRoutePropagation(input: avias.ec2.models.EnableVgwRoutePropagationRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.EnableVgwRoutePropagationRequest](client, awsData, ServiceType, ServiceAndPrefix, "EnableVgwRoutePropagation", POST, "/", input)
  override def createVpcEndpoint(input: avias.ec2.models.CreateVpcEndpointRequest): F[avias.ec2.models.CreateVpcEndpointResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateVpcEndpointResult, avias.ec2.models.CreateVpcEndpointRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateVpcEndpoint", POST, "/", input)
  override def deleteSnapshot(input: avias.ec2.models.DeleteSnapshotRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteSnapshotRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteSnapshot", POST, "/", input)
  override def getReservedInstancesExchangeQuote(input: avias.ec2.models.GetReservedInstancesExchangeQuoteRequest): F[avias.ec2.models.GetReservedInstancesExchangeQuoteResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.GetReservedInstancesExchangeQuoteResult, avias.ec2.models.GetReservedInstancesExchangeQuoteRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetReservedInstancesExchangeQuote", POST, "/", input)
  override def revokeSecurityGroupIngress(input: avias.ec2.models.RevokeSecurityGroupIngressRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.RevokeSecurityGroupIngressRequest](client, awsData, ServiceType, ServiceAndPrefix, "RevokeSecurityGroupIngress", POST, "/", input)
  override def cancelSpotFleetRequests(input: avias.ec2.models.CancelSpotFleetRequestsRequest): F[avias.ec2.models.CancelSpotFleetRequestsResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CancelSpotFleetRequestsResponse, avias.ec2.models.CancelSpotFleetRequestsRequest](client, awsData, ServiceType, ServiceAndPrefix, "CancelSpotFleetRequests", POST, "/", input)
  override def deleteTags(input: avias.ec2.models.DeleteTagsRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteTagsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteTags", POST, "/", input)
  override def associateAddress(input: avias.ec2.models.AssociateAddressRequest): F[avias.ec2.models.AssociateAddressResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.AssociateAddressResult, avias.ec2.models.AssociateAddressRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssociateAddress", POST, "/", input)
  override def describeAccountAttributes(input: avias.ec2.models.DescribeAccountAttributesRequest): F[avias.ec2.models.DescribeAccountAttributesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeAccountAttributesResult, avias.ec2.models.DescribeAccountAttributesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeAccountAttributes", POST, "/", input)
  override def createRouteTable(input: avias.ec2.models.CreateRouteTableRequest): F[avias.ec2.models.CreateRouteTableResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateRouteTableResult, avias.ec2.models.CreateRouteTableRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateRouteTable", POST, "/", input)
  override def unassignPrivateIpAddresses(input: avias.ec2.models.UnassignPrivateIpAddressesRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.UnassignPrivateIpAddressesRequest](client, awsData, ServiceType, ServiceAndPrefix, "UnassignPrivateIpAddresses", POST, "/", input)
  override def describeExportTasks(input: avias.ec2.models.DescribeExportTasksRequest): F[avias.ec2.models.DescribeExportTasksResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeExportTasksResult, avias.ec2.models.DescribeExportTasksRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeExportTasks", POST, "/", input)
  override def createNetworkInterfacePermission(input: avias.ec2.models.CreateNetworkInterfacePermissionRequest): F[avias.ec2.models.CreateNetworkInterfacePermissionResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateNetworkInterfacePermissionResult, avias.ec2.models.CreateNetworkInterfacePermissionRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateNetworkInterfacePermission", POST, "/", input)
  override def cancelImportTask(input: avias.ec2.models.CancelImportTaskRequest): F[avias.ec2.models.CancelImportTaskResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CancelImportTaskResult, avias.ec2.models.CancelImportTaskRequest](client, awsData, ServiceType, ServiceAndPrefix, "CancelImportTask", POST, "/", input)
  override def describeNetworkInterfacePermissions(input: avias.ec2.models.DescribeNetworkInterfacePermissionsRequest): F[avias.ec2.models.DescribeNetworkInterfacePermissionsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeNetworkInterfacePermissionsResult, avias.ec2.models.DescribeNetworkInterfacePermissionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeNetworkInterfacePermissions", POST, "/", input)
  override def modifySubnetAttribute(input: avias.ec2.models.ModifySubnetAttributeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ModifySubnetAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifySubnetAttribute", POST, "/", input)
  override def disassociateIamInstanceProfile(input: avias.ec2.models.DisassociateIamInstanceProfileRequest): F[avias.ec2.models.DisassociateIamInstanceProfileResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DisassociateIamInstanceProfileResult, avias.ec2.models.DisassociateIamInstanceProfileRequest](client, awsData, ServiceType, ServiceAndPrefix, "DisassociateIamInstanceProfile", POST, "/", input)
  override def describeKeyPairs(input: avias.ec2.models.DescribeKeyPairsRequest): F[avias.ec2.models.DescribeKeyPairsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeKeyPairsResult, avias.ec2.models.DescribeKeyPairsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeKeyPairs", POST, "/", input)
  override def createDefaultSubnet(input: avias.ec2.models.CreateDefaultSubnetRequest): F[avias.ec2.models.CreateDefaultSubnetResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateDefaultSubnetResult, avias.ec2.models.CreateDefaultSubnetRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateDefaultSubnet", POST, "/", input)
  override def attachClassicLinkVpc(input: avias.ec2.models.AttachClassicLinkVpcRequest): F[avias.ec2.models.AttachClassicLinkVpcResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.AttachClassicLinkVpcResult, avias.ec2.models.AttachClassicLinkVpcRequest](client, awsData, ServiceType, ServiceAndPrefix, "AttachClassicLinkVpc", POST, "/", input)
  override def describeVpcs(input: avias.ec2.models.DescribeVpcsRequest): F[avias.ec2.models.DescribeVpcsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeVpcsResult, avias.ec2.models.DescribeVpcsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVpcs", POST, "/", input)
  override def replaceNetworkAclAssociation(input: avias.ec2.models.ReplaceNetworkAclAssociationRequest): F[avias.ec2.models.ReplaceNetworkAclAssociationResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ReplaceNetworkAclAssociationResult, avias.ec2.models.ReplaceNetworkAclAssociationRequest](client, awsData, ServiceType, ServiceAndPrefix, "ReplaceNetworkAclAssociation", POST, "/", input)
  override def enableVpcClassicLink(input: avias.ec2.models.EnableVpcClassicLinkRequest): F[avias.ec2.models.EnableVpcClassicLinkResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.EnableVpcClassicLinkResult, avias.ec2.models.EnableVpcClassicLinkRequest](client, awsData, ServiceType, ServiceAndPrefix, "EnableVpcClassicLink", POST, "/", input)
  override def copyImage(input: avias.ec2.models.CopyImageRequest): F[avias.ec2.models.CopyImageResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CopyImageResult, avias.ec2.models.CopyImageRequest](client, awsData, ServiceType, ServiceAndPrefix, "CopyImage", POST, "/", input)
  override def createVpnConnectionRoute(input: avias.ec2.models.CreateVpnConnectionRouteRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.CreateVpnConnectionRouteRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateVpnConnectionRoute", POST, "/", input)
  override def deleteNetworkInterface(input: avias.ec2.models.DeleteNetworkInterfaceRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteNetworkInterfaceRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteNetworkInterface", POST, "/", input)
  override def deleteVpnConnectionRoute(input: avias.ec2.models.DeleteVpnConnectionRouteRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteVpnConnectionRouteRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteVpnConnectionRoute", POST, "/", input)
  override def deleteDhcpOptions(input: avias.ec2.models.DeleteDhcpOptionsRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteDhcpOptionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteDhcpOptions", POST, "/", input)
  override def deleteInternetGateway(input: avias.ec2.models.DeleteInternetGatewayRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteInternetGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteInternetGateway", POST, "/", input)
  override def acceptVpcPeeringConnection(input: avias.ec2.models.AcceptVpcPeeringConnectionRequest): F[avias.ec2.models.AcceptVpcPeeringConnectionResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.AcceptVpcPeeringConnectionResult, avias.ec2.models.AcceptVpcPeeringConnectionRequest](client, awsData, ServiceType, ServiceAndPrefix, "AcceptVpcPeeringConnection", POST, "/", input)
  override def describeEgressOnlyInternetGateways(input: avias.ec2.models.DescribeEgressOnlyInternetGatewaysRequest): F[avias.ec2.models.DescribeEgressOnlyInternetGatewaysResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeEgressOnlyInternetGatewaysResult, avias.ec2.models.DescribeEgressOnlyInternetGatewaysRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeEgressOnlyInternetGateways", POST, "/", input)
  override def allocateAddress(input: avias.ec2.models.AllocateAddressRequest): F[avias.ec2.models.AllocateAddressResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.AllocateAddressResult, avias.ec2.models.AllocateAddressRequest](client, awsData, ServiceType, ServiceAndPrefix, "AllocateAddress", POST, "/", input)
  override def createTags(input: avias.ec2.models.CreateTagsRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.CreateTagsRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateTags", POST, "/", input)
  override def modifyVpcAttribute(input: avias.ec2.models.ModifyVpcAttributeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ModifyVpcAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifyVpcAttribute", POST, "/", input)
  override def describeVpcAttribute(input: avias.ec2.models.DescribeVpcAttributeRequest): F[avias.ec2.models.DescribeVpcAttributeResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeVpcAttributeResult, avias.ec2.models.DescribeVpcAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVpcAttribute", POST, "/", input)
  override def runScheduledInstances(input: avias.ec2.models.RunScheduledInstancesRequest): F[avias.ec2.models.RunScheduledInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.RunScheduledInstancesResult, avias.ec2.models.RunScheduledInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "RunScheduledInstances", POST, "/", input)
  override def deleteVolume(input: avias.ec2.models.DeleteVolumeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteVolumeRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteVolume", POST, "/", input)
  override def assignPrivateIpAddresses(input: avias.ec2.models.AssignPrivateIpAddressesRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.AssignPrivateIpAddressesRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssignPrivateIpAddresses", POST, "/", input)
  override def importInstance(input: avias.ec2.models.ImportInstanceRequest): F[avias.ec2.models.ImportInstanceResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ImportInstanceResult, avias.ec2.models.ImportInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "ImportInstance", POST, "/", input)
  override def createNetworkAclEntry(input: avias.ec2.models.CreateNetworkAclEntryRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.CreateNetworkAclEntryRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateNetworkAclEntry", POST, "/", input)
  override def restoreAddressToClassic(input: avias.ec2.models.RestoreAddressToClassicRequest): F[avias.ec2.models.RestoreAddressToClassicResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.RestoreAddressToClassicResult, avias.ec2.models.RestoreAddressToClassicRequest](client, awsData, ServiceType, ServiceAndPrefix, "RestoreAddressToClassic", POST, "/", input)
  override def unassignIpv6Addresses(input: avias.ec2.models.UnassignIpv6AddressesRequest): F[avias.ec2.models.UnassignIpv6AddressesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.UnassignIpv6AddressesResult, avias.ec2.models.UnassignIpv6AddressesRequest](client, awsData, ServiceType, ServiceAndPrefix, "UnassignIpv6Addresses", POST, "/", input)
  override def disableVgwRoutePropagation(input: avias.ec2.models.DisableVgwRoutePropagationRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DisableVgwRoutePropagationRequest](client, awsData, ServiceType, ServiceAndPrefix, "DisableVgwRoutePropagation", POST, "/", input)
  override def attachNetworkInterface(input: avias.ec2.models.AttachNetworkInterfaceRequest): F[avias.ec2.models.AttachNetworkInterfaceResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.AttachNetworkInterfaceResult, avias.ec2.models.AttachNetworkInterfaceRequest](client, awsData, ServiceType, ServiceAndPrefix, "AttachNetworkInterface", POST, "/", input)
  override def resetNetworkInterfaceAttribute(input: avias.ec2.models.ResetNetworkInterfaceAttributeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ResetNetworkInterfaceAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "ResetNetworkInterfaceAttribute", POST, "/", input)
  override def reportInstanceStatus(input: avias.ec2.models.ReportInstanceStatusRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ReportInstanceStatusRequest](client, awsData, ServiceType, ServiceAndPrefix, "ReportInstanceStatus", POST, "/", input)
  override def deleteNetworkAclEntry(input: avias.ec2.models.DeleteNetworkAclEntryRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteNetworkAclEntryRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteNetworkAclEntry", POST, "/", input)
  override def modifyVolume(input: avias.ec2.models.ModifyVolumeRequest): F[avias.ec2.models.ModifyVolumeResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ModifyVolumeResult, avias.ec2.models.ModifyVolumeRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifyVolume", POST, "/", input)
  override def detachVolume(input: avias.ec2.models.DetachVolumeRequest): F[avias.ec2.models.VolumeAttachment] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.VolumeAttachment, avias.ec2.models.DetachVolumeRequest](client, awsData, ServiceType, ServiceAndPrefix, "DetachVolume", POST, "/", input)
  override def associateIamInstanceProfile(input: avias.ec2.models.AssociateIamInstanceProfileRequest): F[avias.ec2.models.AssociateIamInstanceProfileResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.AssociateIamInstanceProfileResult, avias.ec2.models.AssociateIamInstanceProfileRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssociateIamInstanceProfile", POST, "/", input)
  override def describeSpotFleetRequests(input: avias.ec2.models.DescribeSpotFleetRequestsRequest): F[avias.ec2.models.DescribeSpotFleetRequestsResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeSpotFleetRequestsResponse, avias.ec2.models.DescribeSpotFleetRequestsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeSpotFleetRequests", POST, "/", input)
  override def describeReservedInstances(input: avias.ec2.models.DescribeReservedInstancesRequest): F[avias.ec2.models.DescribeReservedInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeReservedInstancesResult, avias.ec2.models.DescribeReservedInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeReservedInstances", POST, "/", input)
  override def resetInstanceAttribute(input: avias.ec2.models.ResetInstanceAttributeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ResetInstanceAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "ResetInstanceAttribute", POST, "/", input)
  override def createCustomerGateway(input: avias.ec2.models.CreateCustomerGatewayRequest): F[avias.ec2.models.CreateCustomerGatewayResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateCustomerGatewayResult, avias.ec2.models.CreateCustomerGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateCustomerGateway", POST, "/", input)
  override def modifyNetworkInterfaceAttribute(input: avias.ec2.models.ModifyNetworkInterfaceAttributeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ModifyNetworkInterfaceAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifyNetworkInterfaceAttribute", POST, "/", input)
  override def describeImportImageTasks(input: avias.ec2.models.DescribeImportImageTasksRequest): F[avias.ec2.models.DescribeImportImageTasksResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeImportImageTasksResult, avias.ec2.models.DescribeImportImageTasksRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeImportImageTasks", POST, "/", input)
  override def resetImageAttribute(input: avias.ec2.models.ResetImageAttributeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ResetImageAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "ResetImageAttribute", POST, "/", input)
  override def describeMovingAddresses(input: avias.ec2.models.DescribeMovingAddressesRequest): F[avias.ec2.models.DescribeMovingAddressesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeMovingAddressesResult, avias.ec2.models.DescribeMovingAddressesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeMovingAddresses", POST, "/", input)
  override def cancelConversionTask(input: avias.ec2.models.CancelConversionRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.CancelConversionRequest](client, awsData, ServiceType, ServiceAndPrefix, "CancelConversionTask", POST, "/", input)
  override def describeSecurityGroupReferences(input: avias.ec2.models.DescribeSecurityGroupReferencesRequest): F[avias.ec2.models.DescribeSecurityGroupReferencesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeSecurityGroupReferencesResult, avias.ec2.models.DescribeSecurityGroupReferencesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeSecurityGroupReferences", POST, "/", input)
  override def describeIamInstanceProfileAssociations(input: avias.ec2.models.DescribeIamInstanceProfileAssociationsRequest): F[avias.ec2.models.DescribeIamInstanceProfileAssociationsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeIamInstanceProfileAssociationsResult, avias.ec2.models.DescribeIamInstanceProfileAssociationsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeIamInstanceProfileAssociations", POST, "/", input)
  override def importVolume(input: avias.ec2.models.ImportVolumeRequest): F[avias.ec2.models.ImportVolumeResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ImportVolumeResult, avias.ec2.models.ImportVolumeRequest](client, awsData, ServiceType, ServiceAndPrefix, "ImportVolume", POST, "/", input)
  override def createNetworkInterface(input: avias.ec2.models.CreateNetworkInterfaceRequest): F[avias.ec2.models.CreateNetworkInterfaceResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateNetworkInterfaceResult, avias.ec2.models.CreateNetworkInterfaceRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateNetworkInterface", POST, "/", input)
  override def createVpnGateway(input: avias.ec2.models.CreateVpnGatewayRequest): F[avias.ec2.models.CreateVpnGatewayResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateVpnGatewayResult, avias.ec2.models.CreateVpnGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateVpnGateway", POST, "/", input)
  override def deleteVpcPeeringConnection(input: avias.ec2.models.DeleteVpcPeeringConnectionRequest): F[avias.ec2.models.DeleteVpcPeeringConnectionResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DeleteVpcPeeringConnectionResult, avias.ec2.models.DeleteVpcPeeringConnectionRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteVpcPeeringConnection", POST, "/", input)
  override def createSnapshot(input: avias.ec2.models.CreateSnapshotRequest): F[avias.ec2.models.Snapshot] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.Snapshot, avias.ec2.models.CreateSnapshotRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateSnapshot", POST, "/", input)
  override def describeVolumes(input: avias.ec2.models.DescribeVolumesRequest): F[avias.ec2.models.DescribeVolumesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeVolumesResult, avias.ec2.models.DescribeVolumesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVolumes", POST, "/", input)
  override def describeAddresses(input: avias.ec2.models.DescribeAddressesRequest): F[avias.ec2.models.DescribeAddressesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeAddressesResult, avias.ec2.models.DescribeAddressesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeAddresses", POST, "/", input)
  override def createImage(input: avias.ec2.models.CreateImageRequest): F[avias.ec2.models.CreateImageResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateImageResult, avias.ec2.models.CreateImageRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateImage", POST, "/", input)
  override def copyFpgaImage(input: avias.ec2.models.CopyFpgaImageRequest): F[avias.ec2.models.CopyFpgaImageResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CopyFpgaImageResult, avias.ec2.models.CopyFpgaImageRequest](client, awsData, ServiceType, ServiceAndPrefix, "CopyFpgaImage", POST, "/", input)
  override def disassociateVpcCidrBlock(input: avias.ec2.models.DisassociateVpcCidrBlockRequest): F[avias.ec2.models.DisassociateVpcCidrBlockResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DisassociateVpcCidrBlockResult, avias.ec2.models.DisassociateVpcCidrBlockRequest](client, awsData, ServiceType, ServiceAndPrefix, "DisassociateVpcCidrBlock", POST, "/", input)
  override def describeIdFormat(input: avias.ec2.models.DescribeIdFormatRequest): F[avias.ec2.models.DescribeIdFormatResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeIdFormatResult, avias.ec2.models.DescribeIdFormatRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeIdFormat", POST, "/", input)
  override def describeSpotFleetRequestHistory(input: avias.ec2.models.DescribeSpotFleetRequestHistoryRequest): F[avias.ec2.models.DescribeSpotFleetRequestHistoryResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeSpotFleetRequestHistoryResponse, avias.ec2.models.DescribeSpotFleetRequestHistoryRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeSpotFleetRequestHistory", POST, "/", input)
  override def createVolume(input: avias.ec2.models.CreateVolumeRequest): F[avias.ec2.models.Volume] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.Volume, avias.ec2.models.CreateVolumeRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateVolume", POST, "/", input)
  override def describeHosts(input: avias.ec2.models.DescribeHostsRequest): F[avias.ec2.models.DescribeHostsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeHostsResult, avias.ec2.models.DescribeHostsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeHosts", POST, "/", input)
  override def stopInstances(input: avias.ec2.models.StopInstancesRequest): F[avias.ec2.models.StopInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.StopInstancesResult, avias.ec2.models.StopInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "StopInstances", POST, "/", input)
  override def describeScheduledInstanceAvailability(input: avias.ec2.models.DescribeScheduledInstanceAvailabilityRequest): F[avias.ec2.models.DescribeScheduledInstanceAvailabilityResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeScheduledInstanceAvailabilityResult, avias.ec2.models.DescribeScheduledInstanceAvailabilityRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeScheduledInstanceAvailability", POST, "/", input)
  override def describeInstances(input: avias.ec2.models.DescribeInstancesRequest): F[avias.ec2.models.DescribeInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeInstancesResult, avias.ec2.models.DescribeInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeInstances", POST, "/", input)
  override def terminateInstances(input: avias.ec2.models.TerminateInstancesRequest): F[avias.ec2.models.TerminateInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.TerminateInstancesResult, avias.ec2.models.TerminateInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "TerminateInstances", POST, "/", input)
  override def describeNetworkInterfaceAttribute(input: avias.ec2.models.DescribeNetworkInterfaceAttributeRequest): F[avias.ec2.models.DescribeNetworkInterfaceAttributeResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeNetworkInterfaceAttributeResult, avias.ec2.models.DescribeNetworkInterfaceAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeNetworkInterfaceAttribute", POST, "/", input)
  override def describeVpcEndpointServices(input: avias.ec2.models.DescribeVpcEndpointServicesRequest): F[avias.ec2.models.DescribeVpcEndpointServicesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeVpcEndpointServicesResult, avias.ec2.models.DescribeVpcEndpointServicesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVpcEndpointServices", POST, "/", input)
  override def disassociateRouteTable(input: avias.ec2.models.DisassociateRouteTableRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DisassociateRouteTableRequest](client, awsData, ServiceType, ServiceAndPrefix, "DisassociateRouteTable", POST, "/", input)
  override def describeVpcPeeringConnections(input: avias.ec2.models.DescribeVpcPeeringConnectionsRequest): F[avias.ec2.models.DescribeVpcPeeringConnectionsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeVpcPeeringConnectionsResult, avias.ec2.models.DescribeVpcPeeringConnectionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVpcPeeringConnections", POST, "/", input)
  override def attachVolume(input: avias.ec2.models.AttachVolumeRequest): F[avias.ec2.models.VolumeAttachment] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.VolumeAttachment, avias.ec2.models.AttachVolumeRequest](client, awsData, ServiceType, ServiceAndPrefix, "AttachVolume", POST, "/", input)
  override def cancelBundleTask(input: avias.ec2.models.CancelBundleTaskRequest): F[avias.ec2.models.CancelBundleTaskResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CancelBundleTaskResult, avias.ec2.models.CancelBundleTaskRequest](client, awsData, ServiceType, ServiceAndPrefix, "CancelBundleTask", POST, "/", input)
  override def describeCustomerGateways(input: avias.ec2.models.DescribeCustomerGatewaysRequest): F[avias.ec2.models.DescribeCustomerGatewaysResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeCustomerGatewaysResult, avias.ec2.models.DescribeCustomerGatewaysRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeCustomerGateways", POST, "/", input)
  override def modifyVpcTenancy(input: avias.ec2.models.ModifyVpcTenancyRequest): F[avias.ec2.models.ModifyVpcTenancyResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ModifyVpcTenancyResult, avias.ec2.models.ModifyVpcTenancyRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifyVpcTenancy", POST, "/", input)
  override def describeReservedInstancesListings(input: avias.ec2.models.DescribeReservedInstancesListingsRequest): F[avias.ec2.models.DescribeReservedInstancesListingsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeReservedInstancesListingsResult, avias.ec2.models.DescribeReservedInstancesListingsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeReservedInstancesListings", POST, "/", input)
  override def replaceRoute(input: avias.ec2.models.ReplaceRouteRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ReplaceRouteRequest](client, awsData, ServiceType, ServiceAndPrefix, "ReplaceRoute", POST, "/", input)
  override def describeNatGateways(input: avias.ec2.models.DescribeNatGatewaysRequest): F[avias.ec2.models.DescribeNatGatewaysResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeNatGatewaysResult, avias.ec2.models.DescribeNatGatewaysRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeNatGateways", POST, "/", input)
  override def modifyHosts(input: avias.ec2.models.ModifyHostsRequest): F[avias.ec2.models.ModifyHostsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ModifyHostsResult, avias.ec2.models.ModifyHostsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifyHosts", POST, "/", input)
  override def deleteFlowLogs(input: avias.ec2.models.DeleteFlowLogsRequest): F[avias.ec2.models.DeleteFlowLogsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DeleteFlowLogsResult, avias.ec2.models.DeleteFlowLogsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteFlowLogs", POST, "/", input)
  override def createDefaultVpc(input: avias.ec2.models.CreateDefaultVpcRequest): F[avias.ec2.models.CreateDefaultVpcResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateDefaultVpcResult, avias.ec2.models.CreateDefaultVpcRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateDefaultVpc", POST, "/", input)
  override def describeVpcClassicLink(input: avias.ec2.models.DescribeVpcClassicLinkRequest): F[avias.ec2.models.DescribeVpcClassicLinkResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeVpcClassicLinkResult, avias.ec2.models.DescribeVpcClassicLinkRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVpcClassicLink", POST, "/", input)
  override def authorizeSecurityGroupIngress(input: avias.ec2.models.AuthorizeSecurityGroupIngressRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.AuthorizeSecurityGroupIngressRequest](client, awsData, ServiceType, ServiceAndPrefix, "AuthorizeSecurityGroupIngress", POST, "/", input)
  override def deleteSubnet(input: avias.ec2.models.DeleteSubnetRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteSubnetRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteSubnet", POST, "/", input)
  override def createEgressOnlyInternetGateway(input: avias.ec2.models.CreateEgressOnlyInternetGatewayRequest): F[avias.ec2.models.CreateEgressOnlyInternetGatewayResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateEgressOnlyInternetGatewayResult, avias.ec2.models.CreateEgressOnlyInternetGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateEgressOnlyInternetGateway", POST, "/", input)
  override def createSecurityGroup(input: avias.ec2.models.CreateSecurityGroupRequest): F[avias.ec2.models.CreateSecurityGroupResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateSecurityGroupResult, avias.ec2.models.CreateSecurityGroupRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateSecurityGroup", POST, "/", input)
  override def describeFlowLogs(input: avias.ec2.models.DescribeFlowLogsRequest): F[avias.ec2.models.DescribeFlowLogsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeFlowLogsResult, avias.ec2.models.DescribeFlowLogsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeFlowLogs", POST, "/", input)
  override def describeReservedInstancesModifications(input: avias.ec2.models.DescribeReservedInstancesModificationsRequest): F[avias.ec2.models.DescribeReservedInstancesModificationsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeReservedInstancesModificationsResult, avias.ec2.models.DescribeReservedInstancesModificationsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeReservedInstancesModifications", POST, "/", input)
  override def createInternetGateway(input: avias.ec2.models.CreateInternetGatewayRequest): F[avias.ec2.models.CreateInternetGatewayResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateInternetGatewayResult, avias.ec2.models.CreateInternetGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateInternetGateway", POST, "/", input)
  override def createSpotDatafeedSubscription(input: avias.ec2.models.CreateSpotDatafeedSubscriptionRequest): F[avias.ec2.models.CreateSpotDatafeedSubscriptionResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateSpotDatafeedSubscriptionResult, avias.ec2.models.CreateSpotDatafeedSubscriptionRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateSpotDatafeedSubscription", POST, "/", input)
  override def describeInstanceAttribute(input: avias.ec2.models.DescribeInstanceAttributeRequest): F[avias.ec2.models.InstanceAttribute] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.InstanceAttribute, avias.ec2.models.DescribeInstanceAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeInstanceAttribute", POST, "/", input)
  override def modifyInstanceAttribute(input: avias.ec2.models.ModifyInstanceAttributeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ModifyInstanceAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifyInstanceAttribute", POST, "/", input)
  override def rejectVpcPeeringConnection(input: avias.ec2.models.RejectVpcPeeringConnectionRequest): F[avias.ec2.models.RejectVpcPeeringConnectionResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.RejectVpcPeeringConnectionResult, avias.ec2.models.RejectVpcPeeringConnectionRequest](client, awsData, ServiceType, ServiceAndPrefix, "RejectVpcPeeringConnection", POST, "/", input)
  override def createNetworkAcl(input: avias.ec2.models.CreateNetworkAclRequest): F[avias.ec2.models.CreateNetworkAclResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateNetworkAclResult, avias.ec2.models.CreateNetworkAclRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateNetworkAcl", POST, "/", input)
  override def deleteNetworkInterfacePermission(input: avias.ec2.models.DeleteNetworkInterfacePermissionRequest): F[avias.ec2.models.DeleteNetworkInterfacePermissionResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DeleteNetworkInterfacePermissionResult, avias.ec2.models.DeleteNetworkInterfacePermissionRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteNetworkInterfacePermission", POST, "/", input)
  override def detachClassicLinkVpc(input: avias.ec2.models.DetachClassicLinkVpcRequest): F[avias.ec2.models.DetachClassicLinkVpcResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DetachClassicLinkVpcResult, avias.ec2.models.DetachClassicLinkVpcRequest](client, awsData, ServiceType, ServiceAndPrefix, "DetachClassicLinkVpc", POST, "/", input)
  override def registerImage(input: avias.ec2.models.RegisterImageRequest): F[avias.ec2.models.RegisterImageResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.RegisterImageResult, avias.ec2.models.RegisterImageRequest](client, awsData, ServiceType, ServiceAndPrefix, "RegisterImage", POST, "/", input)
  override def deleteSecurityGroup(input: avias.ec2.models.DeleteSecurityGroupRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteSecurityGroupRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteSecurityGroup", POST, "/", input)
  override def bundleInstance(input: avias.ec2.models.BundleInstanceRequest): F[avias.ec2.models.BundleInstanceResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.BundleInstanceResult, avias.ec2.models.BundleInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "BundleInstance", POST, "/", input)
  override def importKeyPair(input: avias.ec2.models.ImportKeyPairRequest): F[avias.ec2.models.ImportKeyPairResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ImportKeyPairResult, avias.ec2.models.ImportKeyPairRequest](client, awsData, ServiceType, ServiceAndPrefix, "ImportKeyPair", POST, "/", input)
  override def getConsoleOutput(input: avias.ec2.models.GetConsoleOutputRequest): F[avias.ec2.models.GetConsoleOutputResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.GetConsoleOutputResult, avias.ec2.models.GetConsoleOutputRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetConsoleOutput", POST, "/", input)
  override def unmonitorInstances(input: avias.ec2.models.UnmonitorInstancesRequest): F[avias.ec2.models.UnmonitorInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.UnmonitorInstancesResult, avias.ec2.models.UnmonitorInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "UnmonitorInstances", POST, "/", input)
  override def createFlowLogs(input: avias.ec2.models.CreateFlowLogsRequest): F[avias.ec2.models.CreateFlowLogsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateFlowLogsResult, avias.ec2.models.CreateFlowLogsRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateFlowLogs", POST, "/", input)
  override def createVpnConnection(input: avias.ec2.models.CreateVpnConnectionRequest): F[avias.ec2.models.CreateVpnConnectionResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateVpnConnectionResult, avias.ec2.models.CreateVpnConnectionRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateVpnConnection", POST, "/", input)
  override def describeFpgaImages(input: avias.ec2.models.DescribeFpgaImagesRequest): F[avias.ec2.models.DescribeFpgaImagesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeFpgaImagesResult, avias.ec2.models.DescribeFpgaImagesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeFpgaImages", POST, "/", input)
  override def attachInternetGateway(input: avias.ec2.models.AttachInternetGatewayRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.AttachInternetGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "AttachInternetGateway", POST, "/", input)
  override def getConsoleScreenshot(input: avias.ec2.models.GetConsoleScreenshotRequest): F[avias.ec2.models.GetConsoleScreenshotResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.GetConsoleScreenshotResult, avias.ec2.models.GetConsoleScreenshotRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetConsoleScreenshot", POST, "/", input)
  override def purchaseScheduledInstances(input: avias.ec2.models.PurchaseScheduledInstancesRequest): F[avias.ec2.models.PurchaseScheduledInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.PurchaseScheduledInstancesResult, avias.ec2.models.PurchaseScheduledInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "PurchaseScheduledInstances", POST, "/", input)
  override def purchaseReservedInstancesOffering(input: avias.ec2.models.PurchaseReservedInstancesOfferingRequest): F[avias.ec2.models.PurchaseReservedInstancesOfferingResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.PurchaseReservedInstancesOfferingResult, avias.ec2.models.PurchaseReservedInstancesOfferingRequest](client, awsData, ServiceType, ServiceAndPrefix, "PurchaseReservedInstancesOffering", POST, "/", input)
  override def disableVpcClassicLink(input: avias.ec2.models.DisableVpcClassicLinkRequest): F[avias.ec2.models.DisableVpcClassicLinkResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DisableVpcClassicLinkResult, avias.ec2.models.DisableVpcClassicLinkRequest](client, awsData, ServiceType, ServiceAndPrefix, "DisableVpcClassicLink", POST, "/", input)
  override def assignIpv6Addresses(input: avias.ec2.models.AssignIpv6AddressesRequest): F[avias.ec2.models.AssignIpv6AddressesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.AssignIpv6AddressesResult, avias.ec2.models.AssignIpv6AddressesRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssignIpv6Addresses", POST, "/", input)
  override def attachVpnGateway(input: avias.ec2.models.AttachVpnGatewayRequest): F[avias.ec2.models.AttachVpnGatewayResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.AttachVpnGatewayResult, avias.ec2.models.AttachVpnGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "AttachVpnGateway", POST, "/", input)
  override def allocateHosts(input: avias.ec2.models.AllocateHostsRequest): F[avias.ec2.models.AllocateHostsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.AllocateHostsResult, avias.ec2.models.AllocateHostsRequest](client, awsData, ServiceType, ServiceAndPrefix, "AllocateHosts", POST, "/", input)
  override def deleteVpnConnection(input: avias.ec2.models.DeleteVpnConnectionRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteVpnConnectionRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteVpnConnection", POST, "/", input)
  override def disableVpcClassicLinkDnsSupport(input: avias.ec2.models.DisableVpcClassicLinkDnsSupportRequest): F[avias.ec2.models.DisableVpcClassicLinkDnsSupportResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DisableVpcClassicLinkDnsSupportResult, avias.ec2.models.DisableVpcClassicLinkDnsSupportRequest](client, awsData, ServiceType, ServiceAndPrefix, "DisableVpcClassicLinkDnsSupport", POST, "/", input)
  override def describeScheduledInstances(input: avias.ec2.models.DescribeScheduledInstancesRequest): F[avias.ec2.models.DescribeScheduledInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeScheduledInstancesResult, avias.ec2.models.DescribeScheduledInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeScheduledInstances", POST, "/", input)
  override def describeHostReservationOfferings(input: avias.ec2.models.DescribeHostReservationOfferingsRequest): F[avias.ec2.models.DescribeHostReservationOfferingsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeHostReservationOfferingsResult, avias.ec2.models.DescribeHostReservationOfferingsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeHostReservationOfferings", POST, "/", input)
  override def cancelExportTask(input: avias.ec2.models.CancelExportTaskRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.CancelExportTaskRequest](client, awsData, ServiceType, ServiceAndPrefix, "CancelExportTask", POST, "/", input)
  override def replaceIamInstanceProfileAssociation(input: avias.ec2.models.ReplaceIamInstanceProfileAssociationRequest): F[avias.ec2.models.ReplaceIamInstanceProfileAssociationResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ReplaceIamInstanceProfileAssociationResult, avias.ec2.models.ReplaceIamInstanceProfileAssociationRequest](client, awsData, ServiceType, ServiceAndPrefix, "ReplaceIamInstanceProfileAssociation", POST, "/", input)
  override def describeClassicLinkInstances(input: avias.ec2.models.DescribeClassicLinkInstancesRequest): F[avias.ec2.models.DescribeClassicLinkInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeClassicLinkInstancesResult, avias.ec2.models.DescribeClassicLinkInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeClassicLinkInstances", POST, "/", input)
  override def describeVolumesModifications(input: avias.ec2.models.DescribeVolumesModificationsRequest): F[avias.ec2.models.DescribeVolumesModificationsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeVolumesModificationsResult, avias.ec2.models.DescribeVolumesModificationsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVolumesModifications", POST, "/", input)
  override def createVpc(input: avias.ec2.models.CreateVpcRequest): F[avias.ec2.models.CreateVpcResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateVpcResult, avias.ec2.models.CreateVpcRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateVpc", POST, "/", input)
  override def requestSpotFleet(input: avias.ec2.models.RequestSpotFleetRequest): F[avias.ec2.models.RequestSpotFleetResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.RequestSpotFleetResponse, avias.ec2.models.RequestSpotFleetRequest](client, awsData, ServiceType, ServiceAndPrefix, "RequestSpotFleet", POST, "/", input)
  override def getHostReservationPurchasePreview(input: avias.ec2.models.GetHostReservationPurchasePreviewRequest): F[avias.ec2.models.GetHostReservationPurchasePreviewResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.GetHostReservationPurchasePreviewResult, avias.ec2.models.GetHostReservationPurchasePreviewRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetHostReservationPurchasePreview", POST, "/", input)
  override def releaseAddress(input: avias.ec2.models.ReleaseAddressRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ReleaseAddressRequest](client, awsData, ServiceType, ServiceAndPrefix, "ReleaseAddress", POST, "/", input)
  override def resetFpgaImageAttribute(input: avias.ec2.models.ResetFpgaImageAttributeRequest): F[avias.ec2.models.ResetFpgaImageAttributeResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ResetFpgaImageAttributeResult, avias.ec2.models.ResetFpgaImageAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "ResetFpgaImageAttribute", POST, "/", input)
  override def describePrefixLists(input: avias.ec2.models.DescribePrefixListsRequest): F[avias.ec2.models.DescribePrefixListsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribePrefixListsResult, avias.ec2.models.DescribePrefixListsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribePrefixLists", POST, "/", input)
  override def modifyVpcEndpoint(input: avias.ec2.models.ModifyVpcEndpointRequest): F[avias.ec2.models.ModifyVpcEndpointResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ModifyVpcEndpointResult, avias.ec2.models.ModifyVpcEndpointRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifyVpcEndpoint", POST, "/", input)
  override def describeSnapshotAttribute(input: avias.ec2.models.DescribeSnapshotAttributeRequest): F[avias.ec2.models.DescribeSnapshotAttributeResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeSnapshotAttributeResult, avias.ec2.models.DescribeSnapshotAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeSnapshotAttribute", POST, "/", input)
  override def deleteCustomerGateway(input: avias.ec2.models.DeleteCustomerGatewayRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteCustomerGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteCustomerGateway", POST, "/", input)
  override def describeVpcEndpoints(input: avias.ec2.models.DescribeVpcEndpointsRequest): F[avias.ec2.models.DescribeVpcEndpointsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeVpcEndpointsResult, avias.ec2.models.DescribeVpcEndpointsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVpcEndpoints", POST, "/", input)
  override def disassociateSubnetCidrBlock(input: avias.ec2.models.DisassociateSubnetCidrBlockRequest): F[avias.ec2.models.DisassociateSubnetCidrBlockResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DisassociateSubnetCidrBlockResult, avias.ec2.models.DisassociateSubnetCidrBlockRequest](client, awsData, ServiceType, ServiceAndPrefix, "DisassociateSubnetCidrBlock", POST, "/", input)
  override def describeSubnets(input: avias.ec2.models.DescribeSubnetsRequest): F[avias.ec2.models.DescribeSubnetsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeSubnetsResult, avias.ec2.models.DescribeSubnetsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeSubnets", POST, "/", input)
  override def requestSpotInstances(input: avias.ec2.models.RequestSpotInstancesRequest): F[avias.ec2.models.RequestSpotInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.RequestSpotInstancesResult, avias.ec2.models.RequestSpotInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "RequestSpotInstances", POST, "/", input)
  override def modifyImageAttribute(input: avias.ec2.models.ModifyImageAttributeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ModifyImageAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifyImageAttribute", POST, "/", input)
  override def startInstances(input: avias.ec2.models.StartInstancesRequest): F[avias.ec2.models.StartInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.StartInstancesResult, avias.ec2.models.StartInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "StartInstances", POST, "/", input)
  override def createDhcpOptions(input: avias.ec2.models.CreateDhcpOptionsRequest): F[avias.ec2.models.CreateDhcpOptionsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateDhcpOptionsResult, avias.ec2.models.CreateDhcpOptionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateDhcpOptions", POST, "/", input)
  override def describeImportSnapshotTasks(input: avias.ec2.models.DescribeImportSnapshotTasksRequest): F[avias.ec2.models.DescribeImportSnapshotTasksResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeImportSnapshotTasksResult, avias.ec2.models.DescribeImportSnapshotTasksRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeImportSnapshotTasks", POST, "/", input)
  override def createRoute(input: avias.ec2.models.CreateRouteRequest): F[avias.ec2.models.CreateRouteResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateRouteResult, avias.ec2.models.CreateRouteRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateRoute", POST, "/", input)
  override def describeImageAttribute(input: avias.ec2.models.DescribeImageAttributeRequest): F[avias.ec2.models.ImageAttribute] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ImageAttribute, avias.ec2.models.DescribeImageAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeImageAttribute", POST, "/", input)
  override def modifySnapshotAttribute(input: avias.ec2.models.ModifySnapshotAttributeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ModifySnapshotAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifySnapshotAttribute", POST, "/", input)
  override def getPasswordData(input: avias.ec2.models.GetPasswordDataRequest): F[avias.ec2.models.GetPasswordDataResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.GetPasswordDataResult, avias.ec2.models.GetPasswordDataRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetPasswordData", POST, "/", input)
  override def copySnapshot(input: avias.ec2.models.CopySnapshotRequest): F[avias.ec2.models.CopySnapshotResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CopySnapshotResult, avias.ec2.models.CopySnapshotRequest](client, awsData, ServiceType, ServiceAndPrefix, "CopySnapshot", POST, "/", input)
  override def describeReservedInstancesOfferings(input: avias.ec2.models.DescribeReservedInstancesOfferingsRequest): F[avias.ec2.models.DescribeReservedInstancesOfferingsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeReservedInstancesOfferingsResult, avias.ec2.models.DescribeReservedInstancesOfferingsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeReservedInstancesOfferings", POST, "/", input)
  override def detachVpnGateway(input: avias.ec2.models.DetachVpnGatewayRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DetachVpnGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "DetachVpnGateway", POST, "/", input)
  override def modifyVolumeAttribute(input: avias.ec2.models.ModifyVolumeAttributeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ModifyVolumeAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifyVolumeAttribute", POST, "/", input)
  override def deleteNetworkAcl(input: avias.ec2.models.DeleteNetworkAclRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteNetworkAclRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteNetworkAcl", POST, "/", input)
  override def rebootInstances(input: avias.ec2.models.RebootInstancesRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.RebootInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "RebootInstances", POST, "/", input)
  override def modifyInstancePlacement(input: avias.ec2.models.ModifyInstancePlacementRequest): F[avias.ec2.models.ModifyInstancePlacementResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ModifyInstancePlacementResult, avias.ec2.models.ModifyInstancePlacementRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifyInstancePlacement", POST, "/", input)
  override def replaceNetworkAclEntry(input: avias.ec2.models.ReplaceNetworkAclEntryRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ReplaceNetworkAclEntryRequest](client, awsData, ServiceType, ServiceAndPrefix, "ReplaceNetworkAclEntry", POST, "/", input)
  override def describeSnapshots(input: avias.ec2.models.DescribeSnapshotsRequest): F[avias.ec2.models.DescribeSnapshotsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeSnapshotsResult, avias.ec2.models.DescribeSnapshotsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeSnapshots", POST, "/", input)
  override def describeVolumeAttribute(input: avias.ec2.models.DescribeVolumeAttributeRequest): F[avias.ec2.models.DescribeVolumeAttributeResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeVolumeAttributeResult, avias.ec2.models.DescribeVolumeAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVolumeAttribute", POST, "/", input)
  override def describeHostReservations(input: avias.ec2.models.DescribeHostReservationsRequest): F[avias.ec2.models.DescribeHostReservationsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeHostReservationsResult, avias.ec2.models.DescribeHostReservationsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeHostReservations", POST, "/", input)
  override def modifySpotFleetRequest(input: avias.ec2.models.ModifySpotFleetRequestRequest): F[avias.ec2.models.ModifySpotFleetRequestResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ModifySpotFleetRequestResponse, avias.ec2.models.ModifySpotFleetRequestRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifySpotFleetRequest", POST, "/", input)
  override def createSubnet(input: avias.ec2.models.CreateSubnetRequest): F[avias.ec2.models.CreateSubnetResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateSubnetResult, avias.ec2.models.CreateSubnetRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateSubnet", POST, "/", input)
  override def importSnapshot(input: avias.ec2.models.ImportSnapshotRequest): F[avias.ec2.models.ImportSnapshotResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ImportSnapshotResult, avias.ec2.models.ImportSnapshotRequest](client, awsData, ServiceType, ServiceAndPrefix, "ImportSnapshot", POST, "/", input)
  override def describeRegions(input: avias.ec2.models.DescribeRegionsRequest): F[avias.ec2.models.DescribeRegionsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeRegionsResult, avias.ec2.models.DescribeRegionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeRegions", POST, "/", input)
  override def describeRouteTables(input: avias.ec2.models.DescribeRouteTablesRequest): F[avias.ec2.models.DescribeRouteTablesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeRouteTablesResult, avias.ec2.models.DescribeRouteTablesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeRouteTables", POST, "/", input)
  override def releaseHosts(input: avias.ec2.models.ReleaseHostsRequest): F[avias.ec2.models.ReleaseHostsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ReleaseHostsResult, avias.ec2.models.ReleaseHostsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ReleaseHosts", POST, "/", input)
  override def deleteRouteTable(input: avias.ec2.models.DeleteRouteTableRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteRouteTableRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteRouteTable", POST, "/", input)
  override def deleteNatGateway(input: avias.ec2.models.DeleteNatGatewayRequest): F[avias.ec2.models.DeleteNatGatewayResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DeleteNatGatewayResult, avias.ec2.models.DeleteNatGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteNatGateway", POST, "/", input)
  override def enableVolumeIO(input: avias.ec2.models.EnableVolumeIORequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.EnableVolumeIORequest](client, awsData, ServiceType, ServiceAndPrefix, "EnableVolumeIO", POST, "/", input)
  override def describeNetworkAcls(input: avias.ec2.models.DescribeNetworkAclsRequest): F[avias.ec2.models.DescribeNetworkAclsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeNetworkAclsResult, avias.ec2.models.DescribeNetworkAclsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeNetworkAcls", POST, "/", input)
  override def revokeSecurityGroupEgress(input: avias.ec2.models.RevokeSecurityGroupEgressRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.RevokeSecurityGroupEgressRequest](client, awsData, ServiceType, ServiceAndPrefix, "RevokeSecurityGroupEgress", POST, "/", input)
  override def describeElasticGpus(input: avias.ec2.models.DescribeElasticGpusRequest): F[avias.ec2.models.DescribeElasticGpusResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeElasticGpusResult, avias.ec2.models.DescribeElasticGpusRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeElasticGpus", POST, "/", input)
  override def describeVpcClassicLinkDnsSupport(input: avias.ec2.models.DescribeVpcClassicLinkDnsSupportRequest): F[avias.ec2.models.DescribeVpcClassicLinkDnsSupportResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeVpcClassicLinkDnsSupportResult, avias.ec2.models.DescribeVpcClassicLinkDnsSupportRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVpcClassicLinkDnsSupport", POST, "/", input)
  override def modifyIdFormat(input: avias.ec2.models.ModifyIdFormatRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ModifyIdFormatRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifyIdFormat", POST, "/", input)
  override def associateVpcCidrBlock(input: avias.ec2.models.AssociateVpcCidrBlockRequest): F[avias.ec2.models.AssociateVpcCidrBlockResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.AssociateVpcCidrBlockResult, avias.ec2.models.AssociateVpcCidrBlockRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssociateVpcCidrBlock", POST, "/", input)
  override def deleteVpc(input: avias.ec2.models.DeleteVpcRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteVpcRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteVpc", POST, "/", input)
  override def associateRouteTable(input: avias.ec2.models.AssociateRouteTableRequest): F[avias.ec2.models.AssociateRouteTableResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.AssociateRouteTableResult, avias.ec2.models.AssociateRouteTableRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssociateRouteTable", POST, "/", input)
  override def modifyIdentityIdFormat(input: avias.ec2.models.ModifyIdentityIdFormatRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ModifyIdentityIdFormatRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifyIdentityIdFormat", POST, "/", input)
  override def acceptReservedInstancesExchangeQuote(input: avias.ec2.models.AcceptReservedInstancesExchangeQuoteRequest): F[avias.ec2.models.AcceptReservedInstancesExchangeQuoteResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.AcceptReservedInstancesExchangeQuoteResult, avias.ec2.models.AcceptReservedInstancesExchangeQuoteRequest](client, awsData, ServiceType, ServiceAndPrefix, "AcceptReservedInstancesExchangeQuote", POST, "/", input)
  override def deleteKeyPair(input: avias.ec2.models.DeleteKeyPairRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteKeyPairRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteKeyPair", POST, "/", input)
  override def deregisterImage(input: avias.ec2.models.DeregisterImageRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeregisterImageRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeregisterImage", POST, "/", input)
  override def resetSnapshotAttribute(input: avias.ec2.models.ResetSnapshotAttributeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.ResetSnapshotAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "ResetSnapshotAttribute", POST, "/", input)
  override def detachNetworkInterface(input: avias.ec2.models.DetachNetworkInterfaceRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DetachNetworkInterfaceRequest](client, awsData, ServiceType, ServiceAndPrefix, "DetachNetworkInterface", POST, "/", input)
  override def describeSecurityGroups(input: avias.ec2.models.DescribeSecurityGroupsRequest): F[avias.ec2.models.DescribeSecurityGroupsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeSecurityGroupsResult, avias.ec2.models.DescribeSecurityGroupsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeSecurityGroups", POST, "/", input)
  override def disassociateAddress(input: avias.ec2.models.DisassociateAddressRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DisassociateAddressRequest](client, awsData, ServiceType, ServiceAndPrefix, "DisassociateAddress", POST, "/", input)
  override def deleteVpnGateway(input: avias.ec2.models.DeleteVpnGatewayRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteVpnGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteVpnGateway", POST, "/", input)
  override def createInstanceExportTask(input: avias.ec2.models.CreateInstanceExportTaskRequest): F[avias.ec2.models.CreateInstanceExportTaskResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateInstanceExportTaskResult, avias.ec2.models.CreateInstanceExportTaskRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateInstanceExportTask", POST, "/", input)
  override def createPlacementGroup(input: avias.ec2.models.CreatePlacementGroupRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.CreatePlacementGroupRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreatePlacementGroup", POST, "/", input)
  override def createKeyPair(input: avias.ec2.models.CreateKeyPairRequest): F[avias.ec2.models.KeyPair] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.KeyPair, avias.ec2.models.CreateKeyPairRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateKeyPair", POST, "/", input)
  override def describeTags(input: avias.ec2.models.DescribeTagsRequest): F[avias.ec2.models.DescribeTagsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeTagsResult, avias.ec2.models.DescribeTagsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeTags", POST, "/", input)
  override def updateSecurityGroupRuleDescriptionsIngress(input: avias.ec2.models.UpdateSecurityGroupRuleDescriptionsIngressRequest): F[avias.ec2.models.UpdateSecurityGroupRuleDescriptionsIngressResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.UpdateSecurityGroupRuleDescriptionsIngressResult, avias.ec2.models.UpdateSecurityGroupRuleDescriptionsIngressRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateSecurityGroupRuleDescriptionsIngress", POST, "/", input)
  override def detachInternetGateway(input: avias.ec2.models.DetachInternetGatewayRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DetachInternetGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "DetachInternetGateway", POST, "/", input)
  override def cancelSpotInstanceRequests(input: avias.ec2.models.CancelSpotInstanceRequestsRequest): F[avias.ec2.models.CancelSpotInstanceRequestsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CancelSpotInstanceRequestsResult, avias.ec2.models.CancelSpotInstanceRequestsRequest](client, awsData, ServiceType, ServiceAndPrefix, "CancelSpotInstanceRequests", POST, "/", input)
  override def describeSpotPriceHistory(input: avias.ec2.models.DescribeSpotPriceHistoryRequest): F[avias.ec2.models.DescribeSpotPriceHistoryResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeSpotPriceHistoryResult, avias.ec2.models.DescribeSpotPriceHistoryRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeSpotPriceHistory", POST, "/", input)
  override def describeConversionTasks(input: avias.ec2.models.DescribeConversionTasksRequest): F[avias.ec2.models.DescribeConversionTasksResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeConversionTasksResult, avias.ec2.models.DescribeConversionTasksRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeConversionTasks", POST, "/", input)
  override def describeSpotInstanceRequests(input: avias.ec2.models.DescribeSpotInstanceRequestsRequest): F[avias.ec2.models.DescribeSpotInstanceRequestsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeSpotInstanceRequestsResult, avias.ec2.models.DescribeSpotInstanceRequestsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeSpotInstanceRequests", POST, "/", input)
  override def associateDhcpOptions(input: avias.ec2.models.AssociateDhcpOptionsRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.AssociateDhcpOptionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssociateDhcpOptions", POST, "/", input)
  override def describeDhcpOptions(input: avias.ec2.models.DescribeDhcpOptionsRequest): F[avias.ec2.models.DescribeDhcpOptionsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeDhcpOptionsResult, avias.ec2.models.DescribeDhcpOptionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeDhcpOptions", POST, "/", input)
  override def deleteRoute(input: avias.ec2.models.DeleteRouteRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteRouteRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteRoute", POST, "/", input)
  override def associateSubnetCidrBlock(input: avias.ec2.models.AssociateSubnetCidrBlockRequest): F[avias.ec2.models.AssociateSubnetCidrBlockResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.AssociateSubnetCidrBlockResult, avias.ec2.models.AssociateSubnetCidrBlockRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssociateSubnetCidrBlock", POST, "/", input)
  override def authorizeSecurityGroupEgress(input: avias.ec2.models.AuthorizeSecurityGroupEgressRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.AuthorizeSecurityGroupEgressRequest](client, awsData, ServiceType, ServiceAndPrefix, "AuthorizeSecurityGroupEgress", POST, "/", input)
  override def createVpcPeeringConnection(input: avias.ec2.models.CreateVpcPeeringConnectionRequest): F[avias.ec2.models.CreateVpcPeeringConnectionResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateVpcPeeringConnectionResult, avias.ec2.models.CreateVpcPeeringConnectionRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateVpcPeeringConnection", POST, "/", input)
  override def confirmProductInstance(input: avias.ec2.models.ConfirmProductInstanceRequest): F[avias.ec2.models.ConfirmProductInstanceResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ConfirmProductInstanceResult, avias.ec2.models.ConfirmProductInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "ConfirmProductInstance", POST, "/", input)
  override def describeStaleSecurityGroups(input: avias.ec2.models.DescribeStaleSecurityGroupsRequest): F[avias.ec2.models.DescribeStaleSecurityGroupsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeStaleSecurityGroupsResult, avias.ec2.models.DescribeStaleSecurityGroupsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeStaleSecurityGroups", POST, "/", input)
  override def describeInternetGateways(input: avias.ec2.models.DescribeInternetGatewaysRequest): F[avias.ec2.models.DescribeInternetGatewaysResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeInternetGatewaysResult, avias.ec2.models.DescribeInternetGatewaysRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeInternetGateways", POST, "/", input)
  override def describeBundleTasks(input: avias.ec2.models.DescribeBundleTasksRequest): F[avias.ec2.models.DescribeBundleTasksResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeBundleTasksResult, avias.ec2.models.DescribeBundleTasksRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeBundleTasks", POST, "/", input)
  override def describeVpnConnections(input: avias.ec2.models.DescribeVpnConnectionsRequest): F[avias.ec2.models.DescribeVpnConnectionsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeVpnConnectionsResult, avias.ec2.models.DescribeVpnConnectionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVpnConnections", POST, "/", input)
  override def describeFpgaImageAttribute(input: avias.ec2.models.DescribeFpgaImageAttributeRequest): F[avias.ec2.models.DescribeFpgaImageAttributeResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeFpgaImageAttributeResult, avias.ec2.models.DescribeFpgaImageAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeFpgaImageAttribute", POST, "/", input)
  override def cancelReservedInstancesListing(input: avias.ec2.models.CancelReservedInstancesListingRequest): F[avias.ec2.models.CancelReservedInstancesListingResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CancelReservedInstancesListingResult, avias.ec2.models.CancelReservedInstancesListingRequest](client, awsData, ServiceType, ServiceAndPrefix, "CancelReservedInstancesListing", POST, "/", input)
  override def describeAvailabilityZones(input: avias.ec2.models.DescribeAvailabilityZonesRequest): F[avias.ec2.models.DescribeAvailabilityZonesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeAvailabilityZonesResult, avias.ec2.models.DescribeAvailabilityZonesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeAvailabilityZones", POST, "/", input)
  override def deletePlacementGroup(input: avias.ec2.models.DeletePlacementGroupRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeletePlacementGroupRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeletePlacementGroup", POST, "/", input)
  override def createReservedInstancesListing(input: avias.ec2.models.CreateReservedInstancesListingRequest): F[avias.ec2.models.CreateReservedInstancesListingResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateReservedInstancesListingResult, avias.ec2.models.CreateReservedInstancesListingRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateReservedInstancesListing", POST, "/", input)
  override def enableVpcClassicLinkDnsSupport(input: avias.ec2.models.EnableVpcClassicLinkDnsSupportRequest): F[avias.ec2.models.EnableVpcClassicLinkDnsSupportResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.EnableVpcClassicLinkDnsSupportResult, avias.ec2.models.EnableVpcClassicLinkDnsSupportRequest](client, awsData, ServiceType, ServiceAndPrefix, "EnableVpcClassicLinkDnsSupport", POST, "/", input)
  override def describeIdentityIdFormat(input: avias.ec2.models.DescribeIdentityIdFormatRequest): F[avias.ec2.models.DescribeIdentityIdFormatResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeIdentityIdFormatResult, avias.ec2.models.DescribeIdentityIdFormatRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeIdentityIdFormat", POST, "/", input)
  override def runInstances(input: avias.ec2.models.RunInstancesRequest): F[avias.ec2.models.Reservation] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.Reservation, avias.ec2.models.RunInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "RunInstances", POST, "/", input)
  override def modifyVpcPeeringConnectionOptions(input: avias.ec2.models.ModifyVpcPeeringConnectionOptionsRequest): F[avias.ec2.models.ModifyVpcPeeringConnectionOptionsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ModifyVpcPeeringConnectionOptionsResult, avias.ec2.models.ModifyVpcPeeringConnectionOptionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifyVpcPeeringConnectionOptions", POST, "/", input)
  override def describePlacementGroups(input: avias.ec2.models.DescribePlacementGroupsRequest): F[avias.ec2.models.DescribePlacementGroupsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribePlacementGroupsResult, avias.ec2.models.DescribePlacementGroupsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribePlacementGroups", POST, "/", input)
  override def purchaseHostReservation(input: avias.ec2.models.PurchaseHostReservationRequest): F[avias.ec2.models.PurchaseHostReservationResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.PurchaseHostReservationResult, avias.ec2.models.PurchaseHostReservationRequest](client, awsData, ServiceType, ServiceAndPrefix, "PurchaseHostReservation", POST, "/", input)
  override def describeInstanceStatus(input: avias.ec2.models.DescribeInstanceStatusRequest): F[avias.ec2.models.DescribeInstanceStatusResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeInstanceStatusResult, avias.ec2.models.DescribeInstanceStatusRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeInstanceStatus", POST, "/", input)
  override def deleteSpotDatafeedSubscription(input: avias.ec2.models.DeleteSpotDatafeedSubscriptionRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.ec2.models.DeleteSpotDatafeedSubscriptionRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteSpotDatafeedSubscription", POST, "/", input)
  override def updateSecurityGroupRuleDescriptionsEgress(input: avias.ec2.models.UpdateSecurityGroupRuleDescriptionsEgressRequest): F[avias.ec2.models.UpdateSecurityGroupRuleDescriptionsEgressResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.UpdateSecurityGroupRuleDescriptionsEgressResult, avias.ec2.models.UpdateSecurityGroupRuleDescriptionsEgressRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateSecurityGroupRuleDescriptionsEgress", POST, "/", input)
  override def modifyFpgaImageAttribute(input: avias.ec2.models.ModifyFpgaImageAttributeRequest): F[avias.ec2.models.ModifyFpgaImageAttributeResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ModifyFpgaImageAttributeResult, avias.ec2.models.ModifyFpgaImageAttributeRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifyFpgaImageAttribute", POST, "/", input)
  override def describeSpotDatafeedSubscription(input: avias.ec2.models.DescribeSpotDatafeedSubscriptionRequest): F[avias.ec2.models.DescribeSpotDatafeedSubscriptionResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeSpotDatafeedSubscriptionResult, avias.ec2.models.DescribeSpotDatafeedSubscriptionRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeSpotDatafeedSubscription", POST, "/", input)
  override def describeImages(input: avias.ec2.models.DescribeImagesRequest): F[avias.ec2.models.DescribeImagesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeImagesResult, avias.ec2.models.DescribeImagesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeImages", POST, "/", input)
  override def importImage(input: avias.ec2.models.ImportImageRequest): F[avias.ec2.models.ImportImageResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ImportImageResult, avias.ec2.models.ImportImageRequest](client, awsData, ServiceType, ServiceAndPrefix, "ImportImage", POST, "/", input)
  override def moveAddressToVpc(input: avias.ec2.models.MoveAddressToVpcRequest): F[avias.ec2.models.MoveAddressToVpcResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.MoveAddressToVpcResult, avias.ec2.models.MoveAddressToVpcRequest](client, awsData, ServiceType, ServiceAndPrefix, "MoveAddressToVpc", POST, "/", input)
  override def describeVolumeStatus(input: avias.ec2.models.DescribeVolumeStatusRequest): F[avias.ec2.models.DescribeVolumeStatusResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeVolumeStatusResult, avias.ec2.models.DescribeVolumeStatusRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVolumeStatus", POST, "/", input)
  override def modifyReservedInstances(input: avias.ec2.models.ModifyReservedInstancesRequest): F[avias.ec2.models.ModifyReservedInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.ModifyReservedInstancesResult, avias.ec2.models.ModifyReservedInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "ModifyReservedInstances", POST, "/", input)
  override def deleteFpgaImage(input: avias.ec2.models.DeleteFpgaImageRequest): F[avias.ec2.models.DeleteFpgaImageResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DeleteFpgaImageResult, avias.ec2.models.DeleteFpgaImageRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteFpgaImage", POST, "/", input)
  override def describeSpotFleetInstances(input: avias.ec2.models.DescribeSpotFleetInstancesRequest): F[avias.ec2.models.DescribeSpotFleetInstancesResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.DescribeSpotFleetInstancesResponse, avias.ec2.models.DescribeSpotFleetInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeSpotFleetInstances", POST, "/", input)
  override def createNatGateway(input: avias.ec2.models.CreateNatGatewayRequest): F[avias.ec2.models.CreateNatGatewayResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.ec2.models.CreateNatGatewayResult, avias.ec2.models.CreateNatGatewayRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateNatGateway", POST, "/", input)
}