package avias.opsworks.http4s
import org.http4s.Method._
import avias.opsworks.circe._
import avias.opsworks.models
import avias.common.http4s.ClientUtils._
class AmazonopsworksClient[F[_]: cats.effect.Sync](client: org.http4s.client.Client[F], awsData: avias.common.AwsData[F]) extends avias.opsworks.Amazonopsworks[F] {
  private[this] final val ServiceType: String = "opsworks"
  private[this] final val ServiceAndPrefix: Option[String] = Some("OpsWorks_20130218")
  override def describeElasticIps(input: avias.opsworks.models.DescribeElasticIpsRequest): F[avias.opsworks.models.DescribeElasticIpsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeElasticIpsResult, avias.opsworks.models.DescribeElasticIpsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeElasticIps", POST, "/", input)
  override def untagResource(input: avias.opsworks.models.UntagResourceRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.UntagResourceRequest](client, awsData, ServiceType, ServiceAndPrefix, "UntagResource", POST, "/", input)
  override def setTimeBasedAutoScaling(input: avias.opsworks.models.SetTimeBasedAutoScalingRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.SetTimeBasedAutoScalingRequest](client, awsData, ServiceType, ServiceAndPrefix, "SetTimeBasedAutoScaling", POST, "/", input)
  override def describeInstances(input: avias.opsworks.models.DescribeInstancesRequest): F[avias.opsworks.models.DescribeInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeInstancesResult, avias.opsworks.models.DescribeInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeInstances", POST, "/", input)
  override def describeRaidArrays(input: avias.opsworks.models.DescribeRaidArraysRequest): F[avias.opsworks.models.DescribeRaidArraysResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeRaidArraysResult, avias.opsworks.models.DescribeRaidArraysRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeRaidArrays", POST, "/", input)
  override def unassignVolume(input: avias.opsworks.models.UnassignVolumeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.UnassignVolumeRequest](client, awsData, ServiceType, ServiceAndPrefix, "UnassignVolume", POST, "/", input)
  override def deleteUserProfile(input: avias.opsworks.models.DeleteUserProfileRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.DeleteUserProfileRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteUserProfile", POST, "/", input)
  override def setPermission(input: avias.opsworks.models.SetPermissionRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.SetPermissionRequest](client, awsData, ServiceType, ServiceAndPrefix, "SetPermission", POST, "/", input)
  override def updateElasticIp(input: avias.opsworks.models.UpdateElasticIpRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.UpdateElasticIpRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateElasticIp", POST, "/", input)
  override def describeApps(input: avias.opsworks.models.DescribeAppsRequest): F[avias.opsworks.models.DescribeAppsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeAppsResult, avias.opsworks.models.DescribeAppsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeApps", POST, "/", input)
  override def deregisterInstance(input: avias.opsworks.models.DeregisterInstanceRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.DeregisterInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeregisterInstance", POST, "/", input)
  override def disassociateElasticIp(input: avias.opsworks.models.DisassociateElasticIpRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.DisassociateElasticIpRequest](client, awsData, ServiceType, ServiceAndPrefix, "DisassociateElasticIp", POST, "/", input)
  override def deregisterVolume(input: avias.opsworks.models.DeregisterVolumeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.DeregisterVolumeRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeregisterVolume", POST, "/", input)
  override def updateStack(input: avias.opsworks.models.UpdateStackRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.UpdateStackRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateStack", POST, "/", input)
  override def deleteInstance(input: avias.opsworks.models.DeleteInstanceRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.DeleteInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteInstance", POST, "/", input)
  override def deregisterRdsDbInstance(input: avias.opsworks.models.DeregisterRdsDbInstanceRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.DeregisterRdsDbInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeregisterRdsDbInstance", POST, "/", input)
  override def describeMyUserProfile: F[avias.opsworks.models.DescribeMyUserProfileResult] = avias.common.http4s.ClientUtils.doRequestWithoutBody[F, avias.opsworks.models.DescribeMyUserProfileResult](client, awsData, ServiceType, ServiceAndPrefix, "DescribeMyUserProfile", POST, "/")
  override def describeAgentVersions(input: avias.opsworks.models.DescribeAgentVersionsRequest): F[avias.opsworks.models.DescribeAgentVersionsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeAgentVersionsResult, avias.opsworks.models.DescribeAgentVersionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeAgentVersions", POST, "/", input)
  override def deregisterElasticIp(input: avias.opsworks.models.DeregisterElasticIpRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.DeregisterElasticIpRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeregisterElasticIp", POST, "/", input)
  override def describePermissions(input: avias.opsworks.models.DescribePermissionsRequest): F[avias.opsworks.models.DescribePermissionsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribePermissionsResult, avias.opsworks.models.DescribePermissionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribePermissions", POST, "/", input)
  override def describeUserProfiles(input: avias.opsworks.models.DescribeUserProfilesRequest): F[avias.opsworks.models.DescribeUserProfilesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeUserProfilesResult, avias.opsworks.models.DescribeUserProfilesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeUserProfiles", POST, "/", input)
  override def rebootInstance(input: avias.opsworks.models.RebootInstanceRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.RebootInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "RebootInstance", POST, "/", input)
  override def updateUserProfile(input: avias.opsworks.models.UpdateUserProfileRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.UpdateUserProfileRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateUserProfile", POST, "/", input)
  override def startInstance(input: avias.opsworks.models.StartInstanceRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.StartInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "StartInstance", POST, "/", input)
  override def tagResource(input: avias.opsworks.models.TagResourceRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.TagResourceRequest](client, awsData, ServiceType, ServiceAndPrefix, "TagResource", POST, "/", input)
  override def stopInstance(input: avias.opsworks.models.StopInstanceRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.StopInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "StopInstance", POST, "/", input)
  override def describeServiceErrors(input: avias.opsworks.models.DescribeServiceErrorsRequest): F[avias.opsworks.models.DescribeServiceErrorsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeServiceErrorsResult, avias.opsworks.models.DescribeServiceErrorsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeServiceErrors", POST, "/", input)
  override def describeVolumes(input: avias.opsworks.models.DescribeVolumesRequest): F[avias.opsworks.models.DescribeVolumesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeVolumesResult, avias.opsworks.models.DescribeVolumesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVolumes", POST, "/", input)
  override def assignInstance(input: avias.opsworks.models.AssignInstanceRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.AssignInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssignInstance", POST, "/", input)
  override def attachElasticLoadBalancer(input: avias.opsworks.models.AttachElasticLoadBalancerRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.AttachElasticLoadBalancerRequest](client, awsData, ServiceType, ServiceAndPrefix, "AttachElasticLoadBalancer", POST, "/", input)
  override def createUserProfile(input: avias.opsworks.models.CreateUserProfileRequest): F[avias.opsworks.models.CreateUserProfileResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.CreateUserProfileResult, avias.opsworks.models.CreateUserProfileRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateUserProfile", POST, "/", input)
  override def describeElasticLoadBalancers(input: avias.opsworks.models.DescribeElasticLoadBalancersRequest): F[avias.opsworks.models.DescribeElasticLoadBalancersResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeElasticLoadBalancersResult, avias.opsworks.models.DescribeElasticLoadBalancersRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeElasticLoadBalancers", POST, "/", input)
  override def describeCommands(input: avias.opsworks.models.DescribeCommandsRequest): F[avias.opsworks.models.DescribeCommandsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeCommandsResult, avias.opsworks.models.DescribeCommandsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeCommands", POST, "/", input)
  override def deleteStack(input: avias.opsworks.models.DeleteStackRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.DeleteStackRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteStack", POST, "/", input)
  override def registerInstance(input: avias.opsworks.models.RegisterInstanceRequest): F[avias.opsworks.models.RegisterInstanceResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.RegisterInstanceResult, avias.opsworks.models.RegisterInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "RegisterInstance", POST, "/", input)
  override def registerEcsCluster(input: avias.opsworks.models.RegisterEcsClusterRequest): F[avias.opsworks.models.RegisterEcsClusterResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.RegisterEcsClusterResult, avias.opsworks.models.RegisterEcsClusterRequest](client, awsData, ServiceType, ServiceAndPrefix, "RegisterEcsCluster", POST, "/", input)
  override def associateElasticIp(input: avias.opsworks.models.AssociateElasticIpRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.AssociateElasticIpRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssociateElasticIp", POST, "/", input)
  override def updateRdsDbInstance(input: avias.opsworks.models.UpdateRdsDbInstanceRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.UpdateRdsDbInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateRdsDbInstance", POST, "/", input)
  override def detachElasticLoadBalancer(input: avias.opsworks.models.DetachElasticLoadBalancerRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.DetachElasticLoadBalancerRequest](client, awsData, ServiceType, ServiceAndPrefix, "DetachElasticLoadBalancer", POST, "/", input)
  override def deleteApp(input: avias.opsworks.models.DeleteAppRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.DeleteAppRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteApp", POST, "/", input)
  override def deregisterEcsCluster(input: avias.opsworks.models.DeregisterEcsClusterRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.DeregisterEcsClusterRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeregisterEcsCluster", POST, "/", input)
  override def createDeployment(input: avias.opsworks.models.CreateDeploymentRequest): F[avias.opsworks.models.CreateDeploymentResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.CreateDeploymentResult, avias.opsworks.models.CreateDeploymentRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateDeployment", POST, "/", input)
  override def describeStackSummary(input: avias.opsworks.models.DescribeStackSummaryRequest): F[avias.opsworks.models.DescribeStackSummaryResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeStackSummaryResult, avias.opsworks.models.DescribeStackSummaryRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeStackSummary", POST, "/", input)
  override def listTags(input: avias.opsworks.models.ListTagsRequest): F[avias.opsworks.models.ListTagsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.ListTagsResult, avias.opsworks.models.ListTagsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListTags", POST, "/", input)
  override def deleteLayer(input: avias.opsworks.models.DeleteLayerRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.DeleteLayerRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteLayer", POST, "/", input)
  override def getHostnameSuggestion(input: avias.opsworks.models.GetHostnameSuggestionRequest): F[avias.opsworks.models.GetHostnameSuggestionResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.GetHostnameSuggestionResult, avias.opsworks.models.GetHostnameSuggestionRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetHostnameSuggestion", POST, "/", input)
  override def createInstance(input: avias.opsworks.models.CreateInstanceRequest): F[avias.opsworks.models.CreateInstanceResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.CreateInstanceResult, avias.opsworks.models.CreateInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateInstance", POST, "/", input)
  override def registerVolume(input: avias.opsworks.models.RegisterVolumeRequest): F[avias.opsworks.models.RegisterVolumeResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.RegisterVolumeResult, avias.opsworks.models.RegisterVolumeRequest](client, awsData, ServiceType, ServiceAndPrefix, "RegisterVolume", POST, "/", input)
  override def stopStack(input: avias.opsworks.models.StopStackRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.StopStackRequest](client, awsData, ServiceType, ServiceAndPrefix, "StopStack", POST, "/", input)
  override def describeLayers(input: avias.opsworks.models.DescribeLayersRequest): F[avias.opsworks.models.DescribeLayersResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeLayersResult, avias.opsworks.models.DescribeLayersRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeLayers", POST, "/", input)
  override def createApp(input: avias.opsworks.models.CreateAppRequest): F[avias.opsworks.models.CreateAppResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.CreateAppResult, avias.opsworks.models.CreateAppRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateApp", POST, "/", input)
  override def describeStackProvisioningParameters(input: avias.opsworks.models.DescribeStackProvisioningParametersRequest): F[avias.opsworks.models.DescribeStackProvisioningParametersResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeStackProvisioningParametersResult, avias.opsworks.models.DescribeStackProvisioningParametersRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeStackProvisioningParameters", POST, "/", input)
  override def unassignInstance(input: avias.opsworks.models.UnassignInstanceRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.UnassignInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "UnassignInstance", POST, "/", input)
  override def assignVolume(input: avias.opsworks.models.AssignVolumeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.AssignVolumeRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssignVolume", POST, "/", input)
  override def grantAccess(input: avias.opsworks.models.GrantAccessRequest): F[avias.opsworks.models.GrantAccessResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.GrantAccessResult, avias.opsworks.models.GrantAccessRequest](client, awsData, ServiceType, ServiceAndPrefix, "GrantAccess", POST, "/", input)
  override def cloneStack(input: avias.opsworks.models.CloneStackRequest): F[avias.opsworks.models.CloneStackResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.CloneStackResult, avias.opsworks.models.CloneStackRequest](client, awsData, ServiceType, ServiceAndPrefix, "CloneStack", POST, "/", input)
  override def describeTimeBasedAutoScaling(input: avias.opsworks.models.DescribeTimeBasedAutoScalingRequest): F[avias.opsworks.models.DescribeTimeBasedAutoScalingResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeTimeBasedAutoScalingResult, avias.opsworks.models.DescribeTimeBasedAutoScalingRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeTimeBasedAutoScaling", POST, "/", input)
  override def describeRdsDbInstances(input: avias.opsworks.models.DescribeRdsDbInstancesRequest): F[avias.opsworks.models.DescribeRdsDbInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeRdsDbInstancesResult, avias.opsworks.models.DescribeRdsDbInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeRdsDbInstances", POST, "/", input)
  override def updateApp(input: avias.opsworks.models.UpdateAppRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.UpdateAppRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateApp", POST, "/", input)
  override def updateMyUserProfile(input: avias.opsworks.models.UpdateMyUserProfileRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.UpdateMyUserProfileRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateMyUserProfile", POST, "/", input)
  override def describeEcsClusters(input: avias.opsworks.models.DescribeEcsClustersRequest): F[avias.opsworks.models.DescribeEcsClustersResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeEcsClustersResult, avias.opsworks.models.DescribeEcsClustersRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeEcsClusters", POST, "/", input)
  override def updateLayer(input: avias.opsworks.models.UpdateLayerRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.UpdateLayerRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateLayer", POST, "/", input)
  override def registerRdsDbInstance(input: avias.opsworks.models.RegisterRdsDbInstanceRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.RegisterRdsDbInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "RegisterRdsDbInstance", POST, "/", input)
  override def updateInstance(input: avias.opsworks.models.UpdateInstanceRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.UpdateInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateInstance", POST, "/", input)
  override def describeStacks(input: avias.opsworks.models.DescribeStacksRequest): F[avias.opsworks.models.DescribeStacksResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeStacksResult, avias.opsworks.models.DescribeStacksRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeStacks", POST, "/", input)
  override def setLoadBasedAutoScaling(input: avias.opsworks.models.SetLoadBasedAutoScalingRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.SetLoadBasedAutoScalingRequest](client, awsData, ServiceType, ServiceAndPrefix, "SetLoadBasedAutoScaling", POST, "/", input)
  override def startStack(input: avias.opsworks.models.StartStackRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.StartStackRequest](client, awsData, ServiceType, ServiceAndPrefix, "StartStack", POST, "/", input)
  override def describeLoadBasedAutoScaling(input: avias.opsworks.models.DescribeLoadBasedAutoScalingRequest): F[avias.opsworks.models.DescribeLoadBasedAutoScalingResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeLoadBasedAutoScalingResult, avias.opsworks.models.DescribeLoadBasedAutoScalingRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeLoadBasedAutoScaling", POST, "/", input)
  override def createLayer(input: avias.opsworks.models.CreateLayerRequest): F[avias.opsworks.models.CreateLayerResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.CreateLayerResult, avias.opsworks.models.CreateLayerRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateLayer", POST, "/", input)
  override def updateVolume(input: avias.opsworks.models.UpdateVolumeRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.opsworks.models.UpdateVolumeRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateVolume", POST, "/", input)
  override def createStack(input: avias.opsworks.models.CreateStackRequest): F[avias.opsworks.models.CreateStackResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.CreateStackResult, avias.opsworks.models.CreateStackRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateStack", POST, "/", input)
  override def describeDeployments(input: avias.opsworks.models.DescribeDeploymentsRequest): F[avias.opsworks.models.DescribeDeploymentsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.DescribeDeploymentsResult, avias.opsworks.models.DescribeDeploymentsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeDeployments", POST, "/", input)
  override def registerElasticIp(input: avias.opsworks.models.RegisterElasticIpRequest): F[avias.opsworks.models.RegisterElasticIpResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.opsworks.models.RegisterElasticIpResult, avias.opsworks.models.RegisterElasticIpRequest](client, awsData, ServiceType, ServiceAndPrefix, "RegisterElasticIp", POST, "/", input)
}