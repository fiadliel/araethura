package avias.lightsail.http4s
import org.http4s.Method._
import avias.lightsail.circe._
import avias.lightsail.models
import avias.common.http4s.ClientUtils._
class AmazonlightsailClient[F[_]: cats.effect.Sync](client: org.http4s.client.Client[F], awsData: avias.common.AwsData[F]) extends avias.lightsail.Amazonlightsail[F] {
  private[this] final val ServiceType: String = "lightsail"
  private[this] final val ServiceAndPrefix: Option[String] = Some("Lightsail_20161128")
  override def deleteInstance(input: avias.lightsail.models.DeleteInstanceRequest): F[avias.lightsail.models.DeleteInstanceResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.DeleteInstanceResult, avias.lightsail.models.DeleteInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteInstance", POST, "/", input)
  override def deleteDomainEntry(input: avias.lightsail.models.DeleteDomainEntryRequest): F[avias.lightsail.models.DeleteDomainEntryResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.DeleteDomainEntryResult, avias.lightsail.models.DeleteDomainEntryRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteDomainEntry", POST, "/", input)
  override def createDomainEntry(input: avias.lightsail.models.CreateDomainEntryRequest): F[avias.lightsail.models.CreateDomainEntryResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.CreateDomainEntryResult, avias.lightsail.models.CreateDomainEntryRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateDomainEntry", POST, "/", input)
  override def allocateStaticIp(input: avias.lightsail.models.AllocateStaticIpRequest): F[avias.lightsail.models.AllocateStaticIpResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.AllocateStaticIpResult, avias.lightsail.models.AllocateStaticIpRequest](client, awsData, ServiceType, ServiceAndPrefix, "AllocateStaticIp", POST, "/", input)
  override def attachDisk(input: avias.lightsail.models.AttachDiskRequest): F[avias.lightsail.models.AttachDiskResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.AttachDiskResult, avias.lightsail.models.AttachDiskRequest](client, awsData, ServiceType, ServiceAndPrefix, "AttachDisk", POST, "/", input)
  override def createDiskFromSnapshot(input: avias.lightsail.models.CreateDiskFromSnapshotRequest): F[avias.lightsail.models.CreateDiskFromSnapshotResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.CreateDiskFromSnapshotResult, avias.lightsail.models.CreateDiskFromSnapshotRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateDiskFromSnapshot", POST, "/", input)
  override def createInstancesFromSnapshot(input: avias.lightsail.models.CreateInstancesFromSnapshotRequest): F[avias.lightsail.models.CreateInstancesFromSnapshotResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.CreateInstancesFromSnapshotResult, avias.lightsail.models.CreateInstancesFromSnapshotRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateInstancesFromSnapshot", POST, "/", input)
  override def getInstanceAccessDetails(input: avias.lightsail.models.GetInstanceAccessDetailsRequest): F[avias.lightsail.models.GetInstanceAccessDetailsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetInstanceAccessDetailsResult, avias.lightsail.models.GetInstanceAccessDetailsRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetInstanceAccessDetails", POST, "/", input)
  override def getInstances(input: avias.lightsail.models.GetInstancesRequest): F[avias.lightsail.models.GetInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetInstancesResult, avias.lightsail.models.GetInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetInstances", POST, "/", input)
  override def getKeyPair(input: avias.lightsail.models.GetKeyPairRequest): F[avias.lightsail.models.GetKeyPairResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetKeyPairResult, avias.lightsail.models.GetKeyPairRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetKeyPair", POST, "/", input)
  override def unpeerVpc: F[avias.lightsail.models.UnpeerVpcResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.UnpeerVpcResult, scala.Unit](client, awsData, ServiceType, ServiceAndPrefix, "UnpeerVpc", POST, "/", ())
  override def getDomains(input: avias.lightsail.models.GetDomainsRequest): F[avias.lightsail.models.GetDomainsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetDomainsResult, avias.lightsail.models.GetDomainsRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetDomains", POST, "/", input)
  override def deleteDiskSnapshot(input: avias.lightsail.models.DeleteDiskSnapshotRequest): F[avias.lightsail.models.DeleteDiskSnapshotResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.DeleteDiskSnapshotResult, avias.lightsail.models.DeleteDiskSnapshotRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteDiskSnapshot", POST, "/", input)
  override def closeInstancePublicPorts(input: avias.lightsail.models.CloseInstancePublicPortsRequest): F[avias.lightsail.models.CloseInstancePublicPortsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.CloseInstancePublicPortsResult, avias.lightsail.models.CloseInstancePublicPortsRequest](client, awsData, ServiceType, ServiceAndPrefix, "CloseInstancePublicPorts", POST, "/", input)
  override def getDisks(input: avias.lightsail.models.GetDisksRequest): F[avias.lightsail.models.GetDisksResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetDisksResult, avias.lightsail.models.GetDisksRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetDisks", POST, "/", input)
  override def putInstancePublicPorts(input: avias.lightsail.models.PutInstancePublicPortsRequest): F[avias.lightsail.models.PutInstancePublicPortsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.PutInstancePublicPortsResult, avias.lightsail.models.PutInstancePublicPortsRequest](client, awsData, ServiceType, ServiceAndPrefix, "PutInstancePublicPorts", POST, "/", input)
  override def createDiskSnapshot(input: avias.lightsail.models.CreateDiskSnapshotRequest): F[avias.lightsail.models.CreateDiskSnapshotResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.CreateDiskSnapshotResult, avias.lightsail.models.CreateDiskSnapshotRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateDiskSnapshot", POST, "/", input)
  override def getInstanceSnapshot(input: avias.lightsail.models.GetInstanceSnapshotRequest): F[avias.lightsail.models.GetInstanceSnapshotResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetInstanceSnapshotResult, avias.lightsail.models.GetInstanceSnapshotRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetInstanceSnapshot", POST, "/", input)
  override def updateDomainEntry(input: avias.lightsail.models.UpdateDomainEntryRequest): F[avias.lightsail.models.UpdateDomainEntryResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.UpdateDomainEntryResult, avias.lightsail.models.UpdateDomainEntryRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateDomainEntry", POST, "/", input)
  override def deleteDomain(input: avias.lightsail.models.DeleteDomainRequest): F[avias.lightsail.models.DeleteDomainResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.DeleteDomainResult, avias.lightsail.models.DeleteDomainRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteDomain", POST, "/", input)
  override def getOperation(input: avias.lightsail.models.GetOperationRequest): F[avias.lightsail.models.GetOperationResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetOperationResult, avias.lightsail.models.GetOperationRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetOperation", POST, "/", input)
  override def openInstancePublicPorts(input: avias.lightsail.models.OpenInstancePublicPortsRequest): F[avias.lightsail.models.OpenInstancePublicPortsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.OpenInstancePublicPortsResult, avias.lightsail.models.OpenInstancePublicPortsRequest](client, awsData, ServiceType, ServiceAndPrefix, "OpenInstancePublicPorts", POST, "/", input)
  override def getInstancePortStates(input: avias.lightsail.models.GetInstancePortStatesRequest): F[avias.lightsail.models.GetInstancePortStatesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetInstancePortStatesResult, avias.lightsail.models.GetInstancePortStatesRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetInstancePortStates", POST, "/", input)
  override def getOperationsForResource(input: avias.lightsail.models.GetOperationsForResourceRequest): F[avias.lightsail.models.GetOperationsForResourceResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetOperationsForResourceResult, avias.lightsail.models.GetOperationsForResourceRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetOperationsForResource", POST, "/", input)
  override def peerVpc: F[avias.lightsail.models.PeerVpcResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.PeerVpcResult, scala.Unit](client, awsData, ServiceType, ServiceAndPrefix, "PeerVpc", POST, "/", ())
  override def createInstances(input: avias.lightsail.models.CreateInstancesRequest): F[avias.lightsail.models.CreateInstancesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.CreateInstancesResult, avias.lightsail.models.CreateInstancesRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateInstances", POST, "/", input)
  override def getOperations(input: avias.lightsail.models.GetOperationsRequest): F[avias.lightsail.models.GetOperationsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetOperationsResult, avias.lightsail.models.GetOperationsRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetOperations", POST, "/", input)
  override def getStaticIp(input: avias.lightsail.models.GetStaticIpRequest): F[avias.lightsail.models.GetStaticIpResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetStaticIpResult, avias.lightsail.models.GetStaticIpRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetStaticIp", POST, "/", input)
  override def detachDisk(input: avias.lightsail.models.DetachDiskRequest): F[avias.lightsail.models.DetachDiskResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.DetachDiskResult, avias.lightsail.models.DetachDiskRequest](client, awsData, ServiceType, ServiceAndPrefix, "DetachDisk", POST, "/", input)
  override def rebootInstance(input: avias.lightsail.models.RebootInstanceRequest): F[avias.lightsail.models.RebootInstanceResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.RebootInstanceResult, avias.lightsail.models.RebootInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "RebootInstance", POST, "/", input)
  override def createInstanceSnapshot(input: avias.lightsail.models.CreateInstanceSnapshotRequest): F[avias.lightsail.models.CreateInstanceSnapshotResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.CreateInstanceSnapshotResult, avias.lightsail.models.CreateInstanceSnapshotRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateInstanceSnapshot", POST, "/", input)
  override def getDiskSnapshot(input: avias.lightsail.models.GetDiskSnapshotRequest): F[avias.lightsail.models.GetDiskSnapshotResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetDiskSnapshotResult, avias.lightsail.models.GetDiskSnapshotRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetDiskSnapshot", POST, "/", input)
  override def getKeyPairs(input: avias.lightsail.models.GetKeyPairsRequest): F[avias.lightsail.models.GetKeyPairsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetKeyPairsResult, avias.lightsail.models.GetKeyPairsRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetKeyPairs", POST, "/", input)
  override def deleteDisk(input: avias.lightsail.models.DeleteDiskRequest): F[avias.lightsail.models.DeleteDiskResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.DeleteDiskResult, avias.lightsail.models.DeleteDiskRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteDisk", POST, "/", input)
  override def getRegions(input: avias.lightsail.models.GetRegionsRequest): F[avias.lightsail.models.GetRegionsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetRegionsResult, avias.lightsail.models.GetRegionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetRegions", POST, "/", input)
  override def detachStaticIp(input: avias.lightsail.models.DetachStaticIpRequest): F[avias.lightsail.models.DetachStaticIpResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.DetachStaticIpResult, avias.lightsail.models.DetachStaticIpRequest](client, awsData, ServiceType, ServiceAndPrefix, "DetachStaticIp", POST, "/", input)
  override def createKeyPair(input: avias.lightsail.models.CreateKeyPairRequest): F[avias.lightsail.models.CreateKeyPairResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.CreateKeyPairResult, avias.lightsail.models.CreateKeyPairRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateKeyPair", POST, "/", input)
  override def isVpcPeered: F[avias.lightsail.models.IsVpcPeeredResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.IsVpcPeeredResult, scala.Unit](client, awsData, ServiceType, ServiceAndPrefix, "IsVpcPeered", POST, "/", ())
  override def importKeyPair(input: avias.lightsail.models.ImportKeyPairRequest): F[avias.lightsail.models.ImportKeyPairResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.ImportKeyPairResult, avias.lightsail.models.ImportKeyPairRequest](client, awsData, ServiceType, ServiceAndPrefix, "ImportKeyPair", POST, "/", input)
  override def deleteInstanceSnapshot(input: avias.lightsail.models.DeleteInstanceSnapshotRequest): F[avias.lightsail.models.DeleteInstanceSnapshotResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.DeleteInstanceSnapshotResult, avias.lightsail.models.DeleteInstanceSnapshotRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteInstanceSnapshot", POST, "/", input)
  override def deleteKeyPair(input: avias.lightsail.models.DeleteKeyPairRequest): F[avias.lightsail.models.DeleteKeyPairResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.DeleteKeyPairResult, avias.lightsail.models.DeleteKeyPairRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteKeyPair", POST, "/", input)
  override def getStaticIps(input: avias.lightsail.models.GetStaticIpsRequest): F[avias.lightsail.models.GetStaticIpsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetStaticIpsResult, avias.lightsail.models.GetStaticIpsRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetStaticIps", POST, "/", input)
  override def getInstanceState(input: avias.lightsail.models.GetInstanceStateRequest): F[avias.lightsail.models.GetInstanceStateResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetInstanceStateResult, avias.lightsail.models.GetInstanceStateRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetInstanceState", POST, "/", input)
  override def getActiveNames(input: avias.lightsail.models.GetActiveNamesRequest): F[avias.lightsail.models.GetActiveNamesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetActiveNamesResult, avias.lightsail.models.GetActiveNamesRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetActiveNames", POST, "/", input)
  override def downloadDefaultKeyPair: F[avias.lightsail.models.DownloadDefaultKeyPairResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.DownloadDefaultKeyPairResult, scala.Unit](client, awsData, ServiceType, ServiceAndPrefix, "DownloadDefaultKeyPair", POST, "/", ())
  override def createDisk(input: avias.lightsail.models.CreateDiskRequest): F[avias.lightsail.models.CreateDiskResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.CreateDiskResult, avias.lightsail.models.CreateDiskRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateDisk", POST, "/", input)
  override def getBundles(input: avias.lightsail.models.GetBundlesRequest): F[avias.lightsail.models.GetBundlesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetBundlesResult, avias.lightsail.models.GetBundlesRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetBundles", POST, "/", input)
  override def releaseStaticIp(input: avias.lightsail.models.ReleaseStaticIpRequest): F[avias.lightsail.models.ReleaseStaticIpResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.ReleaseStaticIpResult, avias.lightsail.models.ReleaseStaticIpRequest](client, awsData, ServiceType, ServiceAndPrefix, "ReleaseStaticIp", POST, "/", input)
  override def getDiskSnapshots(input: avias.lightsail.models.GetDiskSnapshotsRequest): F[avias.lightsail.models.GetDiskSnapshotsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetDiskSnapshotsResult, avias.lightsail.models.GetDiskSnapshotsRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetDiskSnapshots", POST, "/", input)
  override def getDomain(input: avias.lightsail.models.GetDomainRequest): F[avias.lightsail.models.GetDomainResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetDomainResult, avias.lightsail.models.GetDomainRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetDomain", POST, "/", input)
  override def startInstance(input: avias.lightsail.models.StartInstanceRequest): F[avias.lightsail.models.StartInstanceResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.StartInstanceResult, avias.lightsail.models.StartInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "StartInstance", POST, "/", input)
  override def stopInstance(input: avias.lightsail.models.StopInstanceRequest): F[avias.lightsail.models.StopInstanceResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.StopInstanceResult, avias.lightsail.models.StopInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "StopInstance", POST, "/", input)
  override def getDisk(input: avias.lightsail.models.GetDiskRequest): F[avias.lightsail.models.GetDiskResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetDiskResult, avias.lightsail.models.GetDiskRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetDisk", POST, "/", input)
  override def getInstanceSnapshots(input: avias.lightsail.models.GetInstanceSnapshotsRequest): F[avias.lightsail.models.GetInstanceSnapshotsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetInstanceSnapshotsResult, avias.lightsail.models.GetInstanceSnapshotsRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetInstanceSnapshots", POST, "/", input)
  override def createDomain(input: avias.lightsail.models.CreateDomainRequest): F[avias.lightsail.models.CreateDomainResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.CreateDomainResult, avias.lightsail.models.CreateDomainRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateDomain", POST, "/", input)
  override def getInstanceMetricData(input: avias.lightsail.models.GetInstanceMetricDataRequest): F[avias.lightsail.models.GetInstanceMetricDataResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetInstanceMetricDataResult, avias.lightsail.models.GetInstanceMetricDataRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetInstanceMetricData", POST, "/", input)
  override def attachStaticIp(input: avias.lightsail.models.AttachStaticIpRequest): F[avias.lightsail.models.AttachStaticIpResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.AttachStaticIpResult, avias.lightsail.models.AttachStaticIpRequest](client, awsData, ServiceType, ServiceAndPrefix, "AttachStaticIp", POST, "/", input)
  override def getInstance(input: avias.lightsail.models.GetInstanceRequest): F[avias.lightsail.models.GetInstanceResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetInstanceResult, avias.lightsail.models.GetInstanceRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetInstance", POST, "/", input)
  override def getBlueprints(input: avias.lightsail.models.GetBlueprintsRequest): F[avias.lightsail.models.GetBlueprintsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.lightsail.models.GetBlueprintsResult, avias.lightsail.models.GetBlueprintsRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetBlueprints", POST, "/", input)
}