package avias.organizations.http4s
import org.http4s.Method._
import avias.organizations.circe._
import avias.organizations.models
import avias.common.http4s.ClientUtils._
class AmazonorganizationsClient[F[_]: cats.effect.Sync](client: org.http4s.client.Client[F], awsData: avias.common.AwsData[F]) extends avias.organizations.Amazonorganizations[F] {
  private[this] final val ServiceType: String = "organizations"
  private[this] final val ServiceAndPrefix: Option[String] = Some("AWSOrganizationsV20161128")
  override def enablePolicyType(input: avias.organizations.models.EnablePolicyTypeRequest): F[avias.organizations.models.EnablePolicyTypeResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.EnablePolicyTypeResponse, avias.organizations.models.EnablePolicyTypeRequest](client, awsData, ServiceType, ServiceAndPrefix, "EnablePolicyType", POST, "/", input)
  override def deleteOrganizationalUnit(input: avias.organizations.models.DeleteOrganizationalUnitRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.organizations.models.DeleteOrganizationalUnitRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteOrganizationalUnit", POST, "/", input)
  override def listAWSServiceAccessForOrganization(input: avias.organizations.models.ListAWSServiceAccessForOrganizationRequest): F[avias.organizations.models.ListAWSServiceAccessForOrganizationResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.ListAWSServiceAccessForOrganizationResponse, avias.organizations.models.ListAWSServiceAccessForOrganizationRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListAWSServiceAccessForOrganization", POST, "/", input)
  override def listHandshakesForAccount(input: avias.organizations.models.ListHandshakesForAccountRequest): F[avias.organizations.models.ListHandshakesForAccountResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.ListHandshakesForAccountResponse, avias.organizations.models.ListHandshakesForAccountRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListHandshakesForAccount", POST, "/", input)
  override def listRoots(input: avias.organizations.models.ListRootsRequest): F[avias.organizations.models.ListRootsResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.ListRootsResponse, avias.organizations.models.ListRootsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListRoots", POST, "/", input)
  override def detachPolicy(input: avias.organizations.models.DetachPolicyRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.organizations.models.DetachPolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "DetachPolicy", POST, "/", input)
  override def createPolicy(input: avias.organizations.models.CreatePolicyRequest): F[avias.organizations.models.CreatePolicyResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.CreatePolicyResponse, avias.organizations.models.CreatePolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreatePolicy", POST, "/", input)
  override def listAccounts(input: avias.organizations.models.ListAccountsRequest): F[avias.organizations.models.ListAccountsResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.ListAccountsResponse, avias.organizations.models.ListAccountsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListAccounts", POST, "/", input)
  override def inviteAccountToOrganization(input: avias.organizations.models.InviteAccountToOrganizationRequest): F[avias.organizations.models.InviteAccountToOrganizationResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.InviteAccountToOrganizationResponse, avias.organizations.models.InviteAccountToOrganizationRequest](client, awsData, ServiceType, ServiceAndPrefix, "InviteAccountToOrganization", POST, "/", input)
  override def listPolicies(input: avias.organizations.models.ListPoliciesRequest): F[avias.organizations.models.ListPoliciesResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.ListPoliciesResponse, avias.organizations.models.ListPoliciesRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListPolicies", POST, "/", input)
  override def cancelHandshake(input: avias.organizations.models.CancelHandshakeRequest): F[avias.organizations.models.CancelHandshakeResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.CancelHandshakeResponse, avias.organizations.models.CancelHandshakeRequest](client, awsData, ServiceType, ServiceAndPrefix, "CancelHandshake", POST, "/", input)
  override def enableAWSServiceAccess(input: avias.organizations.models.EnableAWSServiceAccessRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.organizations.models.EnableAWSServiceAccessRequest](client, awsData, ServiceType, ServiceAndPrefix, "EnableAWSServiceAccess", POST, "/", input)
  override def removeAccountFromOrganization(input: avias.organizations.models.RemoveAccountFromOrganizationRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.organizations.models.RemoveAccountFromOrganizationRequest](client, awsData, ServiceType, ServiceAndPrefix, "RemoveAccountFromOrganization", POST, "/", input)
  override def attachPolicy(input: avias.organizations.models.AttachPolicyRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.organizations.models.AttachPolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "AttachPolicy", POST, "/", input)
  override def listOrganizationalUnitsForParent(input: avias.organizations.models.ListOrganizationalUnitsForParentRequest): F[avias.organizations.models.ListOrganizationalUnitsForParentResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.ListOrganizationalUnitsForParentResponse, avias.organizations.models.ListOrganizationalUnitsForParentRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListOrganizationalUnitsForParent", POST, "/", input)
  override def moveAccount(input: avias.organizations.models.MoveAccountRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.organizations.models.MoveAccountRequest](client, awsData, ServiceType, ServiceAndPrefix, "MoveAccount", POST, "/", input)
  override def deletePolicy(input: avias.organizations.models.DeletePolicyRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.organizations.models.DeletePolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeletePolicy", POST, "/", input)
  override def describeOrganizationalUnit(input: avias.organizations.models.DescribeOrganizationalUnitRequest): F[avias.organizations.models.DescribeOrganizationalUnitResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.DescribeOrganizationalUnitResponse, avias.organizations.models.DescribeOrganizationalUnitRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeOrganizationalUnit", POST, "/", input)
  override def updatePolicy(input: avias.organizations.models.UpdatePolicyRequest): F[avias.organizations.models.UpdatePolicyResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.UpdatePolicyResponse, avias.organizations.models.UpdatePolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdatePolicy", POST, "/", input)
  override def listChildren(input: avias.organizations.models.ListChildrenRequest): F[avias.organizations.models.ListChildrenResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.ListChildrenResponse, avias.organizations.models.ListChildrenRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListChildren", POST, "/", input)
  override def listAccountsForParent(input: avias.organizations.models.ListAccountsForParentRequest): F[avias.organizations.models.ListAccountsForParentResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.ListAccountsForParentResponse, avias.organizations.models.ListAccountsForParentRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListAccountsForParent", POST, "/", input)
  override def disablePolicyType(input: avias.organizations.models.DisablePolicyTypeRequest): F[avias.organizations.models.DisablePolicyTypeResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.DisablePolicyTypeResponse, avias.organizations.models.DisablePolicyTypeRequest](client, awsData, ServiceType, ServiceAndPrefix, "DisablePolicyType", POST, "/", input)
  override def createOrganization(input: avias.organizations.models.CreateOrganizationRequest): F[avias.organizations.models.CreateOrganizationResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.CreateOrganizationResponse, avias.organizations.models.CreateOrganizationRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateOrganization", POST, "/", input)
  override def deleteOrganization: F[scala.Unit] = avias.common.http4s.ClientUtils.doRequestWithoutBody[F, scala.Unit](client, awsData, ServiceType, ServiceAndPrefix, "DeleteOrganization", POST, "/")
  override def describeAccount(input: avias.organizations.models.DescribeAccountRequest): F[avias.organizations.models.DescribeAccountResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.DescribeAccountResponse, avias.organizations.models.DescribeAccountRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeAccount", POST, "/", input)
  override def createOrganizationalUnit(input: avias.organizations.models.CreateOrganizationalUnitRequest): F[avias.organizations.models.CreateOrganizationalUnitResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.CreateOrganizationalUnitResponse, avias.organizations.models.CreateOrganizationalUnitRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateOrganizationalUnit", POST, "/", input)
  override def createAccount(input: avias.organizations.models.CreateAccountRequest): F[avias.organizations.models.CreateAccountResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.CreateAccountResponse, avias.organizations.models.CreateAccountRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateAccount", POST, "/", input)
  override def leaveOrganization: F[scala.Unit] = avias.common.http4s.ClientUtils.doRequestWithoutBody[F, scala.Unit](client, awsData, ServiceType, ServiceAndPrefix, "LeaveOrganization", POST, "/")
  override def describeHandshake(input: avias.organizations.models.DescribeHandshakeRequest): F[avias.organizations.models.DescribeHandshakeResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.DescribeHandshakeResponse, avias.organizations.models.DescribeHandshakeRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeHandshake", POST, "/", input)
  override def enableAllFeatures: F[avias.organizations.models.EnableAllFeaturesResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.EnableAllFeaturesResponse, scala.Unit](client, awsData, ServiceType, ServiceAndPrefix, "EnableAllFeatures", POST, "/", ())
  override def listParents(input: avias.organizations.models.ListParentsRequest): F[avias.organizations.models.ListParentsResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.ListParentsResponse, avias.organizations.models.ListParentsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListParents", POST, "/", input)
  override def listPoliciesForTarget(input: avias.organizations.models.ListPoliciesForTargetRequest): F[avias.organizations.models.ListPoliciesForTargetResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.ListPoliciesForTargetResponse, avias.organizations.models.ListPoliciesForTargetRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListPoliciesForTarget", POST, "/", input)
  override def describeCreateAccountStatus(input: avias.organizations.models.DescribeCreateAccountStatusRequest): F[avias.organizations.models.DescribeCreateAccountStatusResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.DescribeCreateAccountStatusResponse, avias.organizations.models.DescribeCreateAccountStatusRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeCreateAccountStatus", POST, "/", input)
  override def listTargetsForPolicy(input: avias.organizations.models.ListTargetsForPolicyRequest): F[avias.organizations.models.ListTargetsForPolicyResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.ListTargetsForPolicyResponse, avias.organizations.models.ListTargetsForPolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListTargetsForPolicy", POST, "/", input)
  override def acceptHandshake(input: avias.organizations.models.AcceptHandshakeRequest): F[avias.organizations.models.AcceptHandshakeResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.AcceptHandshakeResponse, avias.organizations.models.AcceptHandshakeRequest](client, awsData, ServiceType, ServiceAndPrefix, "AcceptHandshake", POST, "/", input)
  override def declineHandshake(input: avias.organizations.models.DeclineHandshakeRequest): F[avias.organizations.models.DeclineHandshakeResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.DeclineHandshakeResponse, avias.organizations.models.DeclineHandshakeRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeclineHandshake", POST, "/", input)
  override def disableAWSServiceAccess(input: avias.organizations.models.DisableAWSServiceAccessRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.organizations.models.DisableAWSServiceAccessRequest](client, awsData, ServiceType, ServiceAndPrefix, "DisableAWSServiceAccess", POST, "/", input)
  override def updateOrganizationalUnit(input: avias.organizations.models.UpdateOrganizationalUnitRequest): F[avias.organizations.models.UpdateOrganizationalUnitResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.UpdateOrganizationalUnitResponse, avias.organizations.models.UpdateOrganizationalUnitRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateOrganizationalUnit", POST, "/", input)
  override def listHandshakesForOrganization(input: avias.organizations.models.ListHandshakesForOrganizationRequest): F[avias.organizations.models.ListHandshakesForOrganizationResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.ListHandshakesForOrganizationResponse, avias.organizations.models.ListHandshakesForOrganizationRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListHandshakesForOrganization", POST, "/", input)
  override def describePolicy(input: avias.organizations.models.DescribePolicyRequest): F[avias.organizations.models.DescribePolicyResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.DescribePolicyResponse, avias.organizations.models.DescribePolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribePolicy", POST, "/", input)
  override def describeOrganization: F[avias.organizations.models.DescribeOrganizationResponse] = avias.common.http4s.ClientUtils.doRequestWithoutBody[F, avias.organizations.models.DescribeOrganizationResponse](client, awsData, ServiceType, ServiceAndPrefix, "DescribeOrganization", POST, "/")
  override def listCreateAccountStatus(input: avias.organizations.models.ListCreateAccountStatusRequest): F[avias.organizations.models.ListCreateAccountStatusResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.organizations.models.ListCreateAccountStatusResponse, avias.organizations.models.ListCreateAccountStatusRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListCreateAccountStatus", POST, "/", input)
}