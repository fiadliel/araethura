package avias.appstream.http4s
import org.http4s.Method._
import avias.appstream.circe._
import avias.appstream.models
import avias.common.http4s.ClientUtils._
class AmazonappstreamClient[F[_]: cats.effect.Sync](client: org.http4s.client.Client[F], awsData: avias.common.AwsData[F]) extends avias.appstream.Amazonappstream[F] {
  private[this] final val ServiceType: String = "appstream2"
  private[this] final val ServiceAndPrefix: Option[String] = Some("PhotonAdminProxyService")
  override def createStreamingURL(input: avias.appstream.models.CreateStreamingURLRequest): F[avias.appstream.models.CreateStreamingURLResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.CreateStreamingURLResult, avias.appstream.models.CreateStreamingURLRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateStreamingURL", POST, "/", input)
  override def describeSessions(input: avias.appstream.models.DescribeSessionsRequest): F[avias.appstream.models.DescribeSessionsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.DescribeSessionsResult, avias.appstream.models.DescribeSessionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeSessions", POST, "/", input)
  override def describeStacks(input: avias.appstream.models.DescribeStacksRequest): F[avias.appstream.models.DescribeStacksResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.DescribeStacksResult, avias.appstream.models.DescribeStacksRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeStacks", POST, "/", input)
  override def associateFleet(input: avias.appstream.models.AssociateFleetRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.appstream.models.AssociateFleetRequest](client, awsData, ServiceType, ServiceAndPrefix, "AssociateFleet", POST, "/", input)
  override def deleteStack(input: avias.appstream.models.DeleteStackRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.appstream.models.DeleteStackRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteStack", POST, "/", input)
  override def disassociateFleet(input: avias.appstream.models.DisassociateFleetRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.appstream.models.DisassociateFleetRequest](client, awsData, ServiceType, ServiceAndPrefix, "DisassociateFleet", POST, "/", input)
  override def stopImageBuilder(input: avias.appstream.models.StopImageBuilderRequest): F[avias.appstream.models.StopImageBuilderResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.StopImageBuilderResult, avias.appstream.models.StopImageBuilderRequest](client, awsData, ServiceType, ServiceAndPrefix, "StopImageBuilder", POST, "/", input)
  override def describeImages(input: avias.appstream.models.DescribeImagesRequest): F[avias.appstream.models.DescribeImagesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.DescribeImagesResult, avias.appstream.models.DescribeImagesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeImages", POST, "/", input)
  override def describeDirectoryConfigs(input: avias.appstream.models.DescribeDirectoryConfigsRequest): F[avias.appstream.models.DescribeDirectoryConfigsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.DescribeDirectoryConfigsResult, avias.appstream.models.DescribeDirectoryConfigsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeDirectoryConfigs", POST, "/", input)
  override def updateStack(input: avias.appstream.models.UpdateStackRequest): F[avias.appstream.models.UpdateStackResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.UpdateStackResult, avias.appstream.models.UpdateStackRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateStack", POST, "/", input)
  override def listAssociatedFleets(input: avias.appstream.models.ListAssociatedFleetsRequest): F[avias.appstream.models.ListAssociatedFleetsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.ListAssociatedFleetsResult, avias.appstream.models.ListAssociatedFleetsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListAssociatedFleets", POST, "/", input)
  override def updateDirectoryConfig(input: avias.appstream.models.UpdateDirectoryConfigRequest): F[avias.appstream.models.UpdateDirectoryConfigResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.UpdateDirectoryConfigResult, avias.appstream.models.UpdateDirectoryConfigRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateDirectoryConfig", POST, "/", input)
  override def createStack(input: avias.appstream.models.CreateStackRequest): F[avias.appstream.models.CreateStackResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.CreateStackResult, avias.appstream.models.CreateStackRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateStack", POST, "/", input)
  override def listAssociatedStacks(input: avias.appstream.models.ListAssociatedStacksRequest): F[avias.appstream.models.ListAssociatedStacksResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.ListAssociatedStacksResult, avias.appstream.models.ListAssociatedStacksRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListAssociatedStacks", POST, "/", input)
  override def deleteImage(input: avias.appstream.models.DeleteImageRequest): F[avias.appstream.models.DeleteImageResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.DeleteImageResult, avias.appstream.models.DeleteImageRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteImage", POST, "/", input)
  override def updateFleet(input: avias.appstream.models.UpdateFleetRequest): F[avias.appstream.models.UpdateFleetResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.UpdateFleetResult, avias.appstream.models.UpdateFleetRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateFleet", POST, "/", input)
  override def createDirectoryConfig(input: avias.appstream.models.CreateDirectoryConfigRequest): F[avias.appstream.models.CreateDirectoryConfigResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.CreateDirectoryConfigResult, avias.appstream.models.CreateDirectoryConfigRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateDirectoryConfig", POST, "/", input)
  override def deleteImageBuilder(input: avias.appstream.models.DeleteImageBuilderRequest): F[avias.appstream.models.DeleteImageBuilderResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.DeleteImageBuilderResult, avias.appstream.models.DeleteImageBuilderRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteImageBuilder", POST, "/", input)
  override def deleteFleet(input: avias.appstream.models.DeleteFleetRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.appstream.models.DeleteFleetRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteFleet", POST, "/", input)
  override def describeImageBuilders(input: avias.appstream.models.DescribeImageBuildersRequest): F[avias.appstream.models.DescribeImageBuildersResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.DescribeImageBuildersResult, avias.appstream.models.DescribeImageBuildersRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeImageBuilders", POST, "/", input)
  override def createFleet(input: avias.appstream.models.CreateFleetRequest): F[avias.appstream.models.CreateFleetResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.CreateFleetResult, avias.appstream.models.CreateFleetRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateFleet", POST, "/", input)
  override def createImageBuilder(input: avias.appstream.models.CreateImageBuilderRequest): F[avias.appstream.models.CreateImageBuilderResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.CreateImageBuilderResult, avias.appstream.models.CreateImageBuilderRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateImageBuilder", POST, "/", input)
  override def startFleet(input: avias.appstream.models.StartFleetRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.appstream.models.StartFleetRequest](client, awsData, ServiceType, ServiceAndPrefix, "StartFleet", POST, "/", input)
  override def deleteDirectoryConfig(input: avias.appstream.models.DeleteDirectoryConfigRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.appstream.models.DeleteDirectoryConfigRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteDirectoryConfig", POST, "/", input)
  override def expireSession(input: avias.appstream.models.ExpireSessionRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.appstream.models.ExpireSessionRequest](client, awsData, ServiceType, ServiceAndPrefix, "ExpireSession", POST, "/", input)
  override def describeFleets(input: avias.appstream.models.DescribeFleetsRequest): F[avias.appstream.models.DescribeFleetsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.DescribeFleetsResult, avias.appstream.models.DescribeFleetsRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeFleets", POST, "/", input)
  override def createImageBuilderStreamingURL(input: avias.appstream.models.CreateImageBuilderStreamingURLRequest): F[avias.appstream.models.CreateImageBuilderStreamingURLResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.CreateImageBuilderStreamingURLResult, avias.appstream.models.CreateImageBuilderStreamingURLRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateImageBuilderStreamingURL", POST, "/", input)
  override def stopFleet(input: avias.appstream.models.StopFleetRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.appstream.models.StopFleetRequest](client, awsData, ServiceType, ServiceAndPrefix, "StopFleet", POST, "/", input)
  override def startImageBuilder(input: avias.appstream.models.StartImageBuilderRequest): F[avias.appstream.models.StartImageBuilderResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.appstream.models.StartImageBuilderResult, avias.appstream.models.StartImageBuilderRequest](client, awsData, ServiceType, ServiceAndPrefix, "StartImageBuilder", POST, "/", input)
}