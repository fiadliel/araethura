package avias.devicefarm.http4s
import org.http4s.Method._
import avias.devicefarm.circe._
import avias.devicefarm.models
import avias.common.http4s.ClientUtils._
class AmazondevicefarmClient[F[_]: cats.effect.Sync](client: org.http4s.client.Client[F], awsData: avias.common.AwsData[F]) extends avias.devicefarm.Amazondevicefarm[F] {
  private[this] final val ServiceType: String = "devicefarm"
  private[this] final val ServiceAndPrefix: Option[String] = Some("DeviceFarm_20150623")
  override def listProjects(input: avias.devicefarm.models.ListProjectsRequest): F[avias.devicefarm.models.ListProjectsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListProjectsResult, avias.devicefarm.models.ListProjectsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListProjects", POST, "/", input)
  override def deleteRemoteAccessSession(input: avias.devicefarm.models.DeleteRemoteAccessSessionRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.devicefarm.models.DeleteRemoteAccessSessionRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteRemoteAccessSession", POST, "/", input)
  override def listOfferingTransactions(input: avias.devicefarm.models.ListOfferingTransactionsRequest): F[avias.devicefarm.models.ListOfferingTransactionsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListOfferingTransactionsResult, avias.devicefarm.models.ListOfferingTransactionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListOfferingTransactions", POST, "/", input)
  override def getOfferingStatus(input: avias.devicefarm.models.GetOfferingStatusRequest): F[avias.devicefarm.models.GetOfferingStatusResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.GetOfferingStatusResult, avias.devicefarm.models.GetOfferingStatusRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetOfferingStatus", POST, "/", input)
  override def getUpload(input: avias.devicefarm.models.GetUploadRequest): F[avias.devicefarm.models.GetUploadResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.GetUploadResult, avias.devicefarm.models.GetUploadRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetUpload", POST, "/", input)
  override def listNetworkProfiles(input: avias.devicefarm.models.ListNetworkProfilesRequest): F[avias.devicefarm.models.ListNetworkProfilesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListNetworkProfilesResult, avias.devicefarm.models.ListNetworkProfilesRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListNetworkProfiles", POST, "/", input)
  override def listSuites(input: avias.devicefarm.models.ListSuitesRequest): F[avias.devicefarm.models.ListSuitesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListSuitesResult, avias.devicefarm.models.ListSuitesRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListSuites", POST, "/", input)
  override def installToRemoteAccessSession(input: avias.devicefarm.models.InstallToRemoteAccessSessionRequest): F[avias.devicefarm.models.InstallToRemoteAccessSessionResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.InstallToRemoteAccessSessionResult, avias.devicefarm.models.InstallToRemoteAccessSessionRequest](client, awsData, ServiceType, ServiceAndPrefix, "InstallToRemoteAccessSession", POST, "/", input)
  override def createRemoteAccessSession(input: avias.devicefarm.models.CreateRemoteAccessSessionRequest): F[avias.devicefarm.models.CreateRemoteAccessSessionResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.CreateRemoteAccessSessionResult, avias.devicefarm.models.CreateRemoteAccessSessionRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateRemoteAccessSession", POST, "/", input)
  override def deleteDevicePool(input: avias.devicefarm.models.DeleteDevicePoolRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.devicefarm.models.DeleteDevicePoolRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteDevicePool", POST, "/", input)
  override def updateNetworkProfile(input: avias.devicefarm.models.UpdateNetworkProfileRequest): F[avias.devicefarm.models.UpdateNetworkProfileResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.UpdateNetworkProfileResult, avias.devicefarm.models.UpdateNetworkProfileRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateNetworkProfile", POST, "/", input)
  override def getAccountSettings: F[avias.devicefarm.models.GetAccountSettingsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.GetAccountSettingsResult, scala.Unit](client, awsData, ServiceType, ServiceAndPrefix, "GetAccountSettings", POST, "/", ())
  override def deleteProject(input: avias.devicefarm.models.DeleteProjectRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.devicefarm.models.DeleteProjectRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteProject", POST, "/", input)
  override def listOfferings(input: avias.devicefarm.models.ListOfferingsRequest): F[avias.devicefarm.models.ListOfferingsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListOfferingsResult, avias.devicefarm.models.ListOfferingsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListOfferings", POST, "/", input)
  override def listDevicePools(input: avias.devicefarm.models.ListDevicePoolsRequest): F[avias.devicefarm.models.ListDevicePoolsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListDevicePoolsResult, avias.devicefarm.models.ListDevicePoolsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListDevicePools", POST, "/", input)
  override def deleteUpload(input: avias.devicefarm.models.DeleteUploadRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.devicefarm.models.DeleteUploadRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteUpload", POST, "/", input)
  override def listUniqueProblems(input: avias.devicefarm.models.ListUniqueProblemsRequest): F[avias.devicefarm.models.ListUniqueProblemsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListUniqueProblemsResult, avias.devicefarm.models.ListUniqueProblemsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListUniqueProblems", POST, "/", input)
  override def createDevicePool(input: avias.devicefarm.models.CreateDevicePoolRequest): F[avias.devicefarm.models.CreateDevicePoolResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.CreateDevicePoolResult, avias.devicefarm.models.CreateDevicePoolRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateDevicePool", POST, "/", input)
  override def getNetworkProfile(input: avias.devicefarm.models.GetNetworkProfileRequest): F[avias.devicefarm.models.GetNetworkProfileResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.GetNetworkProfileResult, avias.devicefarm.models.GetNetworkProfileRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetNetworkProfile", POST, "/", input)
  override def scheduleRun(input: avias.devicefarm.models.ScheduleRunRequest): F[avias.devicefarm.models.ScheduleRunResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ScheduleRunResult, avias.devicefarm.models.ScheduleRunRequest](client, awsData, ServiceType, ServiceAndPrefix, "ScheduleRun", POST, "/", input)
  override def stopRemoteAccessSession(input: avias.devicefarm.models.StopRemoteAccessSessionRequest): F[avias.devicefarm.models.StopRemoteAccessSessionResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.StopRemoteAccessSessionResult, avias.devicefarm.models.StopRemoteAccessSessionRequest](client, awsData, ServiceType, ServiceAndPrefix, "StopRemoteAccessSession", POST, "/", input)
  override def createNetworkProfile(input: avias.devicefarm.models.CreateNetworkProfileRequest): F[avias.devicefarm.models.CreateNetworkProfileResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.CreateNetworkProfileResult, avias.devicefarm.models.CreateNetworkProfileRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateNetworkProfile", POST, "/", input)
  override def createUpload(input: avias.devicefarm.models.CreateUploadRequest): F[avias.devicefarm.models.CreateUploadResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.CreateUploadResult, avias.devicefarm.models.CreateUploadRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateUpload", POST, "/", input)
  override def renewOffering(input: avias.devicefarm.models.RenewOfferingRequest): F[avias.devicefarm.models.RenewOfferingResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.RenewOfferingResult, avias.devicefarm.models.RenewOfferingRequest](client, awsData, ServiceType, ServiceAndPrefix, "RenewOffering", POST, "/", input)
  override def listDevices(input: avias.devicefarm.models.ListDevicesRequest): F[avias.devicefarm.models.ListDevicesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListDevicesResult, avias.devicefarm.models.ListDevicesRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListDevices", POST, "/", input)
  override def stopRun(input: avias.devicefarm.models.StopRunRequest): F[avias.devicefarm.models.StopRunResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.StopRunResult, avias.devicefarm.models.StopRunRequest](client, awsData, ServiceType, ServiceAndPrefix, "StopRun", POST, "/", input)
  override def getTest(input: avias.devicefarm.models.GetTestRequest): F[avias.devicefarm.models.GetTestResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.GetTestResult, avias.devicefarm.models.GetTestRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetTest", POST, "/", input)
  override def listRemoteAccessSessions(input: avias.devicefarm.models.ListRemoteAccessSessionsRequest): F[avias.devicefarm.models.ListRemoteAccessSessionsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListRemoteAccessSessionsResult, avias.devicefarm.models.ListRemoteAccessSessionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListRemoteAccessSessions", POST, "/", input)
  override def deleteNetworkProfile(input: avias.devicefarm.models.DeleteNetworkProfileRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.devicefarm.models.DeleteNetworkProfileRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteNetworkProfile", POST, "/", input)
  override def getRemoteAccessSession(input: avias.devicefarm.models.GetRemoteAccessSessionRequest): F[avias.devicefarm.models.GetRemoteAccessSessionResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.GetRemoteAccessSessionResult, avias.devicefarm.models.GetRemoteAccessSessionRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetRemoteAccessSession", POST, "/", input)
  override def listArtifacts(input: avias.devicefarm.models.ListArtifactsRequest): F[avias.devicefarm.models.ListArtifactsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListArtifactsResult, avias.devicefarm.models.ListArtifactsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListArtifacts", POST, "/", input)
  override def listRuns(input: avias.devicefarm.models.ListRunsRequest): F[avias.devicefarm.models.ListRunsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListRunsResult, avias.devicefarm.models.ListRunsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListRuns", POST, "/", input)
  override def updateDevicePool(input: avias.devicefarm.models.UpdateDevicePoolRequest): F[avias.devicefarm.models.UpdateDevicePoolResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.UpdateDevicePoolResult, avias.devicefarm.models.UpdateDevicePoolRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateDevicePool", POST, "/", input)
  override def getJob(input: avias.devicefarm.models.GetJobRequest): F[avias.devicefarm.models.GetJobResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.GetJobResult, avias.devicefarm.models.GetJobRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetJob", POST, "/", input)
  override def getSuite(input: avias.devicefarm.models.GetSuiteRequest): F[avias.devicefarm.models.GetSuiteResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.GetSuiteResult, avias.devicefarm.models.GetSuiteRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetSuite", POST, "/", input)
  override def listSamples(input: avias.devicefarm.models.ListSamplesRequest): F[avias.devicefarm.models.ListSamplesResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListSamplesResult, avias.devicefarm.models.ListSamplesRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListSamples", POST, "/", input)
  override def createProject(input: avias.devicefarm.models.CreateProjectRequest): F[avias.devicefarm.models.CreateProjectResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.CreateProjectResult, avias.devicefarm.models.CreateProjectRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateProject", POST, "/", input)
  override def getDevicePool(input: avias.devicefarm.models.GetDevicePoolRequest): F[avias.devicefarm.models.GetDevicePoolResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.GetDevicePoolResult, avias.devicefarm.models.GetDevicePoolRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetDevicePool", POST, "/", input)
  override def listUploads(input: avias.devicefarm.models.ListUploadsRequest): F[avias.devicefarm.models.ListUploadsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListUploadsResult, avias.devicefarm.models.ListUploadsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListUploads", POST, "/", input)
  override def listJobs(input: avias.devicefarm.models.ListJobsRequest): F[avias.devicefarm.models.ListJobsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListJobsResult, avias.devicefarm.models.ListJobsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListJobs", POST, "/", input)
  override def listOfferingPromotions(input: avias.devicefarm.models.ListOfferingPromotionsRequest): F[avias.devicefarm.models.ListOfferingPromotionsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListOfferingPromotionsResult, avias.devicefarm.models.ListOfferingPromotionsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListOfferingPromotions", POST, "/", input)
  override def listTests(input: avias.devicefarm.models.ListTestsRequest): F[avias.devicefarm.models.ListTestsResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.ListTestsResult, avias.devicefarm.models.ListTestsRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListTests", POST, "/", input)
  override def getDevicePoolCompatibility(input: avias.devicefarm.models.GetDevicePoolCompatibilityRequest): F[avias.devicefarm.models.GetDevicePoolCompatibilityResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.GetDevicePoolCompatibilityResult, avias.devicefarm.models.GetDevicePoolCompatibilityRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetDevicePoolCompatibility", POST, "/", input)
  override def purchaseOffering(input: avias.devicefarm.models.PurchaseOfferingRequest): F[avias.devicefarm.models.PurchaseOfferingResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.PurchaseOfferingResult, avias.devicefarm.models.PurchaseOfferingRequest](client, awsData, ServiceType, ServiceAndPrefix, "PurchaseOffering", POST, "/", input)
  override def getRun(input: avias.devicefarm.models.GetRunRequest): F[avias.devicefarm.models.GetRunResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.GetRunResult, avias.devicefarm.models.GetRunRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetRun", POST, "/", input)
  override def updateProject(input: avias.devicefarm.models.UpdateProjectRequest): F[avias.devicefarm.models.UpdateProjectResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.UpdateProjectResult, avias.devicefarm.models.UpdateProjectRequest](client, awsData, ServiceType, ServiceAndPrefix, "UpdateProject", POST, "/", input)
  override def getDevice(input: avias.devicefarm.models.GetDeviceRequest): F[avias.devicefarm.models.GetDeviceResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.GetDeviceResult, avias.devicefarm.models.GetDeviceRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetDevice", POST, "/", input)
  override def getProject(input: avias.devicefarm.models.GetProjectRequest): F[avias.devicefarm.models.GetProjectResult] = avias.common.http4s.ClientUtils.doRequest[F, avias.devicefarm.models.GetProjectResult, avias.devicefarm.models.GetProjectRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetProject", POST, "/", input)
  override def deleteRun(input: avias.devicefarm.models.DeleteRunRequest): F[scala.Unit] = avias.common.http4s.ClientUtils.doRequest[F, scala.Unit, avias.devicefarm.models.DeleteRunRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteRun", POST, "/", input)
}