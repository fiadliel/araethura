package avias.ecr.http4s
import org.http4s.Method._
import avias.ecr.circe._
import avias.ecr.models
import avias.common.http4s.ClientUtils._
class AmazonecrClient[F[_]: cats.effect.Sync](client: org.http4s.client.Client[F], awsData: avias.common.AwsData[F]) extends avias.ecr.Amazonecr[F] {
  private[this] final val ServiceType: String = "ecr"
  private[this] final val ServiceAndPrefix: Option[String] = Some("AmazonEC2ContainerRegistry_V20150921")
  override def initiateLayerUpload(input: avias.ecr.models.InitiateLayerUploadRequest): F[avias.ecr.models.InitiateLayerUploadResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.InitiateLayerUploadResponse, avias.ecr.models.InitiateLayerUploadRequest](client, awsData, ServiceType, ServiceAndPrefix, "InitiateLayerUpload", POST, "/", input)
  override def putImage(input: avias.ecr.models.PutImageRequest): F[avias.ecr.models.PutImageResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.PutImageResponse, avias.ecr.models.PutImageRequest](client, awsData, ServiceType, ServiceAndPrefix, "PutImage", POST, "/", input)
  override def uploadLayerPart(input: avias.ecr.models.UploadLayerPartRequest): F[avias.ecr.models.UploadLayerPartResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.UploadLayerPartResponse, avias.ecr.models.UploadLayerPartRequest](client, awsData, ServiceType, ServiceAndPrefix, "UploadLayerPart", POST, "/", input)
  override def setRepositoryPolicy(input: avias.ecr.models.SetRepositoryPolicyRequest): F[avias.ecr.models.SetRepositoryPolicyResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.SetRepositoryPolicyResponse, avias.ecr.models.SetRepositoryPolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "SetRepositoryPolicy", POST, "/", input)
  override def putLifecyclePolicy(input: avias.ecr.models.PutLifecyclePolicyRequest): F[avias.ecr.models.PutLifecyclePolicyResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.PutLifecyclePolicyResponse, avias.ecr.models.PutLifecyclePolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "PutLifecyclePolicy", POST, "/", input)
  override def batchCheckLayerAvailability(input: avias.ecr.models.BatchCheckLayerAvailabilityRequest): F[avias.ecr.models.BatchCheckLayerAvailabilityResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.BatchCheckLayerAvailabilityResponse, avias.ecr.models.BatchCheckLayerAvailabilityRequest](client, awsData, ServiceType, ServiceAndPrefix, "BatchCheckLayerAvailability", POST, "/", input)
  override def batchDeleteImage(input: avias.ecr.models.BatchDeleteImageRequest): F[avias.ecr.models.BatchDeleteImageResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.BatchDeleteImageResponse, avias.ecr.models.BatchDeleteImageRequest](client, awsData, ServiceType, ServiceAndPrefix, "BatchDeleteImage", POST, "/", input)
  override def describeImages(input: avias.ecr.models.DescribeImagesRequest): F[avias.ecr.models.DescribeImagesResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.DescribeImagesResponse, avias.ecr.models.DescribeImagesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeImages", POST, "/", input)
  override def listImages(input: avias.ecr.models.ListImagesRequest): F[avias.ecr.models.ListImagesResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.ListImagesResponse, avias.ecr.models.ListImagesRequest](client, awsData, ServiceType, ServiceAndPrefix, "ListImages", POST, "/", input)
  override def startLifecyclePolicyPreview(input: avias.ecr.models.StartLifecyclePolicyPreviewRequest): F[avias.ecr.models.StartLifecyclePolicyPreviewResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.StartLifecyclePolicyPreviewResponse, avias.ecr.models.StartLifecyclePolicyPreviewRequest](client, awsData, ServiceType, ServiceAndPrefix, "StartLifecyclePolicyPreview", POST, "/", input)
  override def completeLayerUpload(input: avias.ecr.models.CompleteLayerUploadRequest): F[avias.ecr.models.CompleteLayerUploadResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.CompleteLayerUploadResponse, avias.ecr.models.CompleteLayerUploadRequest](client, awsData, ServiceType, ServiceAndPrefix, "CompleteLayerUpload", POST, "/", input)
  override def deleteLifecyclePolicy(input: avias.ecr.models.DeleteLifecyclePolicyRequest): F[avias.ecr.models.DeleteLifecyclePolicyResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.DeleteLifecyclePolicyResponse, avias.ecr.models.DeleteLifecyclePolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteLifecyclePolicy", POST, "/", input)
  override def createRepository(input: avias.ecr.models.CreateRepositoryRequest): F[avias.ecr.models.CreateRepositoryResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.CreateRepositoryResponse, avias.ecr.models.CreateRepositoryRequest](client, awsData, ServiceType, ServiceAndPrefix, "CreateRepository", POST, "/", input)
  override def getLifecyclePolicyPreview(input: avias.ecr.models.GetLifecyclePolicyPreviewRequest): F[avias.ecr.models.GetLifecyclePolicyPreviewResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.GetLifecyclePolicyPreviewResponse, avias.ecr.models.GetLifecyclePolicyPreviewRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetLifecyclePolicyPreview", POST, "/", input)
  override def batchGetImage(input: avias.ecr.models.BatchGetImageRequest): F[avias.ecr.models.BatchGetImageResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.BatchGetImageResponse, avias.ecr.models.BatchGetImageRequest](client, awsData, ServiceType, ServiceAndPrefix, "BatchGetImage", POST, "/", input)
  override def deleteRepository(input: avias.ecr.models.DeleteRepositoryRequest): F[avias.ecr.models.DeleteRepositoryResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.DeleteRepositoryResponse, avias.ecr.models.DeleteRepositoryRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteRepository", POST, "/", input)
  override def describeRepositories(input: avias.ecr.models.DescribeRepositoriesRequest): F[avias.ecr.models.DescribeRepositoriesResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.DescribeRepositoriesResponse, avias.ecr.models.DescribeRepositoriesRequest](client, awsData, ServiceType, ServiceAndPrefix, "DescribeRepositories", POST, "/", input)
  override def getDownloadUrlForLayer(input: avias.ecr.models.GetDownloadUrlForLayerRequest): F[avias.ecr.models.GetDownloadUrlForLayerResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.GetDownloadUrlForLayerResponse, avias.ecr.models.GetDownloadUrlForLayerRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetDownloadUrlForLayer", POST, "/", input)
  override def getLifecyclePolicy(input: avias.ecr.models.GetLifecyclePolicyRequest): F[avias.ecr.models.GetLifecyclePolicyResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.GetLifecyclePolicyResponse, avias.ecr.models.GetLifecyclePolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetLifecyclePolicy", POST, "/", input)
  override def deleteRepositoryPolicy(input: avias.ecr.models.DeleteRepositoryPolicyRequest): F[avias.ecr.models.DeleteRepositoryPolicyResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.DeleteRepositoryPolicyResponse, avias.ecr.models.DeleteRepositoryPolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "DeleteRepositoryPolicy", POST, "/", input)
  override def getAuthorizationToken(input: avias.ecr.models.GetAuthorizationTokenRequest): F[avias.ecr.models.GetAuthorizationTokenResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.GetAuthorizationTokenResponse, avias.ecr.models.GetAuthorizationTokenRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetAuthorizationToken", POST, "/", input)
  override def getRepositoryPolicy(input: avias.ecr.models.GetRepositoryPolicyRequest): F[avias.ecr.models.GetRepositoryPolicyResponse] = avias.common.http4s.ClientUtils.doRequest[F, avias.ecr.models.GetRepositoryPolicyResponse, avias.ecr.models.GetRepositoryPolicyRequest](client, awsData, ServiceType, ServiceAndPrefix, "GetRepositoryPolicy", POST, "/", input)
}