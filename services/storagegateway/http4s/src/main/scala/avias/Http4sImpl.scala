package avias.storagegateway.http4s
import org.http4s.Method._
import avias.storagegateway.circe._
import avias.storagegateway.models
import avias.common.http4s.ClientUtils._
class AmazonstoragegatewayClient[F[_]: cats.effect.Sync](client: org.http4s.client.Client[F], awsData: avias.common.AwsData[F]) extends avias.storagegateway.Amazonstoragegateway[F] {
  private[this] final val ServiceType: String = "storagegateway"
  private[this] final val ServiceAndPrefix: Option[String] = Some("StorageGateway_20130630")
  override def shutdownGateway(input: avias.storagegateway.models.ShutdownGatewayInput): F[avias.storagegateway.models.ShutdownGatewayOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.ShutdownGatewayOutput, avias.storagegateway.models.ShutdownGatewayInput](client, awsData, ServiceType, ServiceAndPrefix, "ShutdownGateway", POST, "/", input)
  override def describeCachediSCSIVolumes(input: avias.storagegateway.models.DescribeCachediSCSIVolumesInput): F[avias.storagegateway.models.DescribeCachediSCSIVolumesOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DescribeCachediSCSIVolumesOutput, avias.storagegateway.models.DescribeCachediSCSIVolumesInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeCachediSCSIVolumes", POST, "/", input)
  override def updateMaintenanceStartTime(input: avias.storagegateway.models.UpdateMaintenanceStartTimeInput): F[avias.storagegateway.models.UpdateMaintenanceStartTimeOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.UpdateMaintenanceStartTimeOutput, avias.storagegateway.models.UpdateMaintenanceStartTimeInput](client, awsData, ServiceType, ServiceAndPrefix, "UpdateMaintenanceStartTime", POST, "/", input)
  override def describeCache(input: avias.storagegateway.models.DescribeCacheInput): F[avias.storagegateway.models.DescribeCacheOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DescribeCacheOutput, avias.storagegateway.models.DescribeCacheInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeCache", POST, "/", input)
  override def createCachediSCSIVolume(input: avias.storagegateway.models.CreateCachediSCSIVolumeInput): F[avias.storagegateway.models.CreateCachediSCSIVolumeOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.CreateCachediSCSIVolumeOutput, avias.storagegateway.models.CreateCachediSCSIVolumeInput](client, awsData, ServiceType, ServiceAndPrefix, "CreateCachediSCSIVolume", POST, "/", input)
  override def deleteBandwidthRateLimit(input: avias.storagegateway.models.DeleteBandwidthRateLimitInput): F[avias.storagegateway.models.DeleteBandwidthRateLimitOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DeleteBandwidthRateLimitOutput, avias.storagegateway.models.DeleteBandwidthRateLimitInput](client, awsData, ServiceType, ServiceAndPrefix, "DeleteBandwidthRateLimit", POST, "/", input)
  override def listVolumeInitiators(input: avias.storagegateway.models.ListVolumeInitiatorsInput): F[avias.storagegateway.models.ListVolumeInitiatorsOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.ListVolumeInitiatorsOutput, avias.storagegateway.models.ListVolumeInitiatorsInput](client, awsData, ServiceType, ServiceAndPrefix, "ListVolumeInitiators", POST, "/", input)
  override def deleteTapeArchive(input: avias.storagegateway.models.DeleteTapeArchiveInput): F[avias.storagegateway.models.DeleteTapeArchiveOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DeleteTapeArchiveOutput, avias.storagegateway.models.DeleteTapeArchiveInput](client, awsData, ServiceType, ServiceAndPrefix, "DeleteTapeArchive", POST, "/", input)
  override def listLocalDisks(input: avias.storagegateway.models.ListLocalDisksInput): F[avias.storagegateway.models.ListLocalDisksOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.ListLocalDisksOutput, avias.storagegateway.models.ListLocalDisksInput](client, awsData, ServiceType, ServiceAndPrefix, "ListLocalDisks", POST, "/", input)
  override def removeTagsFromResource(input: avias.storagegateway.models.RemoveTagsFromResourceInput): F[avias.storagegateway.models.RemoveTagsFromResourceOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.RemoveTagsFromResourceOutput, avias.storagegateway.models.RemoveTagsFromResourceInput](client, awsData, ServiceType, ServiceAndPrefix, "RemoveTagsFromResource", POST, "/", input)
  override def activateGateway(input: avias.storagegateway.models.ActivateGatewayInput): F[avias.storagegateway.models.ActivateGatewayOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.ActivateGatewayOutput, avias.storagegateway.models.ActivateGatewayInput](client, awsData, ServiceType, ServiceAndPrefix, "ActivateGateway", POST, "/", input)
  override def deleteTape(input: avias.storagegateway.models.DeleteTapeInput): F[avias.storagegateway.models.DeleteTapeOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DeleteTapeOutput, avias.storagegateway.models.DeleteTapeInput](client, awsData, ServiceType, ServiceAndPrefix, "DeleteTape", POST, "/", input)
  override def describeWorkingStorage(input: avias.storagegateway.models.DescribeWorkingStorageInput): F[avias.storagegateway.models.DescribeWorkingStorageOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DescribeWorkingStorageOutput, avias.storagegateway.models.DescribeWorkingStorageInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeWorkingStorage", POST, "/", input)
  override def resetCache(input: avias.storagegateway.models.ResetCacheInput): F[avias.storagegateway.models.ResetCacheOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.ResetCacheOutput, avias.storagegateway.models.ResetCacheInput](client, awsData, ServiceType, ServiceAndPrefix, "ResetCache", POST, "/", input)
  override def listVolumeRecoveryPoints(input: avias.storagegateway.models.ListVolumeRecoveryPointsInput): F[avias.storagegateway.models.ListVolumeRecoveryPointsOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.ListVolumeRecoveryPointsOutput, avias.storagegateway.models.ListVolumeRecoveryPointsInput](client, awsData, ServiceType, ServiceAndPrefix, "ListVolumeRecoveryPoints", POST, "/", input)
  override def describeNFSFileShares(input: avias.storagegateway.models.DescribeNFSFileSharesInput): F[avias.storagegateway.models.DescribeNFSFileSharesOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DescribeNFSFileSharesOutput, avias.storagegateway.models.DescribeNFSFileSharesInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeNFSFileShares", POST, "/", input)
  override def describeTapeArchives(input: avias.storagegateway.models.DescribeTapeArchivesInput): F[avias.storagegateway.models.DescribeTapeArchivesOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DescribeTapeArchivesOutput, avias.storagegateway.models.DescribeTapeArchivesInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeTapeArchives", POST, "/", input)
  override def describeMaintenanceStartTime(input: avias.storagegateway.models.DescribeMaintenanceStartTimeInput): F[avias.storagegateway.models.DescribeMaintenanceStartTimeOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DescribeMaintenanceStartTimeOutput, avias.storagegateway.models.DescribeMaintenanceStartTimeInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeMaintenanceStartTime", POST, "/", input)
  override def describeStorediSCSIVolumes(input: avias.storagegateway.models.DescribeStorediSCSIVolumesInput): F[avias.storagegateway.models.DescribeStorediSCSIVolumesOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DescribeStorediSCSIVolumesOutput, avias.storagegateway.models.DescribeStorediSCSIVolumesInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeStorediSCSIVolumes", POST, "/", input)
  override def setLocalConsolePassword(input: avias.storagegateway.models.SetLocalConsolePasswordInput): F[avias.storagegateway.models.SetLocalConsolePasswordOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.SetLocalConsolePasswordOutput, avias.storagegateway.models.SetLocalConsolePasswordInput](client, awsData, ServiceType, ServiceAndPrefix, "SetLocalConsolePassword", POST, "/", input)
  override def createTapeWithBarcode(input: avias.storagegateway.models.CreateTapeWithBarcodeInput): F[avias.storagegateway.models.CreateTapeWithBarcodeOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.CreateTapeWithBarcodeOutput, avias.storagegateway.models.CreateTapeWithBarcodeInput](client, awsData, ServiceType, ServiceAndPrefix, "CreateTapeWithBarcode", POST, "/", input)
  override def describeBandwidthRateLimit(input: avias.storagegateway.models.DescribeBandwidthRateLimitInput): F[avias.storagegateway.models.DescribeBandwidthRateLimitOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DescribeBandwidthRateLimitOutput, avias.storagegateway.models.DescribeBandwidthRateLimitInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeBandwidthRateLimit", POST, "/", input)
  override def listVolumes(input: avias.storagegateway.models.ListVolumesInput): F[avias.storagegateway.models.ListVolumesOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.ListVolumesOutput, avias.storagegateway.models.ListVolumesInput](client, awsData, ServiceType, ServiceAndPrefix, "ListVolumes", POST, "/", input)
  override def createStorediSCSIVolume(input: avias.storagegateway.models.CreateStorediSCSIVolumeInput): F[avias.storagegateway.models.CreateStorediSCSIVolumeOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.CreateStorediSCSIVolumeOutput, avias.storagegateway.models.CreateStorediSCSIVolumeInput](client, awsData, ServiceType, ServiceAndPrefix, "CreateStorediSCSIVolume", POST, "/", input)
  override def describeGatewayInformation(input: avias.storagegateway.models.DescribeGatewayInformationInput): F[avias.storagegateway.models.DescribeGatewayInformationOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DescribeGatewayInformationOutput, avias.storagegateway.models.DescribeGatewayInformationInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeGatewayInformation", POST, "/", input)
  override def describeUploadBuffer(input: avias.storagegateway.models.DescribeUploadBufferInput): F[avias.storagegateway.models.DescribeUploadBufferOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DescribeUploadBufferOutput, avias.storagegateway.models.DescribeUploadBufferInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeUploadBuffer", POST, "/", input)
  override def deleteSnapshotSchedule(input: avias.storagegateway.models.DeleteSnapshotScheduleInput): F[avias.storagegateway.models.DeleteSnapshotScheduleOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DeleteSnapshotScheduleOutput, avias.storagegateway.models.DeleteSnapshotScheduleInput](client, awsData, ServiceType, ServiceAndPrefix, "DeleteSnapshotSchedule", POST, "/", input)
  override def updateGatewayInformation(input: avias.storagegateway.models.UpdateGatewayInformationInput): F[avias.storagegateway.models.UpdateGatewayInformationOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.UpdateGatewayInformationOutput, avias.storagegateway.models.UpdateGatewayInformationInput](client, awsData, ServiceType, ServiceAndPrefix, "UpdateGatewayInformation", POST, "/", input)
  override def retrieveTapeArchive(input: avias.storagegateway.models.RetrieveTapeArchiveInput): F[avias.storagegateway.models.RetrieveTapeArchiveOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.RetrieveTapeArchiveOutput, avias.storagegateway.models.RetrieveTapeArchiveInput](client, awsData, ServiceType, ServiceAndPrefix, "RetrieveTapeArchive", POST, "/", input)
  override def disableGateway(input: avias.storagegateway.models.DisableGatewayInput): F[avias.storagegateway.models.DisableGatewayOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DisableGatewayOutput, avias.storagegateway.models.DisableGatewayInput](client, awsData, ServiceType, ServiceAndPrefix, "DisableGateway", POST, "/", input)
  override def listGateways(input: avias.storagegateway.models.ListGatewaysInput): F[avias.storagegateway.models.ListGatewaysOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.ListGatewaysOutput, avias.storagegateway.models.ListGatewaysInput](client, awsData, ServiceType, ServiceAndPrefix, "ListGateways", POST, "/", input)
  override def createSnapshotFromVolumeRecoveryPoint(input: avias.storagegateway.models.CreateSnapshotFromVolumeRecoveryPointInput): F[avias.storagegateway.models.CreateSnapshotFromVolumeRecoveryPointOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.CreateSnapshotFromVolumeRecoveryPointOutput, avias.storagegateway.models.CreateSnapshotFromVolumeRecoveryPointInput](client, awsData, ServiceType, ServiceAndPrefix, "CreateSnapshotFromVolumeRecoveryPoint", POST, "/", input)
  override def updateGatewaySoftwareNow(input: avias.storagegateway.models.UpdateGatewaySoftwareNowInput): F[avias.storagegateway.models.UpdateGatewaySoftwareNowOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.UpdateGatewaySoftwareNowOutput, avias.storagegateway.models.UpdateGatewaySoftwareNowInput](client, awsData, ServiceType, ServiceAndPrefix, "UpdateGatewaySoftwareNow", POST, "/", input)
  override def deleteFileShare(input: avias.storagegateway.models.DeleteFileShareInput): F[avias.storagegateway.models.DeleteFileShareOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DeleteFileShareOutput, avias.storagegateway.models.DeleteFileShareInput](client, awsData, ServiceType, ServiceAndPrefix, "DeleteFileShare", POST, "/", input)
  override def listTapes(input: avias.storagegateway.models.ListTapesInput): F[avias.storagegateway.models.ListTapesOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.ListTapesOutput, avias.storagegateway.models.ListTapesInput](client, awsData, ServiceType, ServiceAndPrefix, "ListTapes", POST, "/", input)
  override def addTagsToResource(input: avias.storagegateway.models.AddTagsToResourceInput): F[avias.storagegateway.models.AddTagsToResourceOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.AddTagsToResourceOutput, avias.storagegateway.models.AddTagsToResourceInput](client, awsData, ServiceType, ServiceAndPrefix, "AddTagsToResource", POST, "/", input)
  override def cancelArchival(input: avias.storagegateway.models.CancelArchivalInput): F[avias.storagegateway.models.CancelArchivalOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.CancelArchivalOutput, avias.storagegateway.models.CancelArchivalInput](client, awsData, ServiceType, ServiceAndPrefix, "CancelArchival", POST, "/", input)
  override def updateNFSFileShare(input: avias.storagegateway.models.UpdateNFSFileShareInput): F[avias.storagegateway.models.UpdateNFSFileShareOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.UpdateNFSFileShareOutput, avias.storagegateway.models.UpdateNFSFileShareInput](client, awsData, ServiceType, ServiceAndPrefix, "UpdateNFSFileShare", POST, "/", input)
  override def deleteGateway(input: avias.storagegateway.models.DeleteGatewayInput): F[avias.storagegateway.models.DeleteGatewayOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DeleteGatewayOutput, avias.storagegateway.models.DeleteGatewayInput](client, awsData, ServiceType, ServiceAndPrefix, "DeleteGateway", POST, "/", input)
  override def listTagsForResource(input: avias.storagegateway.models.ListTagsForResourceInput): F[avias.storagegateway.models.ListTagsForResourceOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.ListTagsForResourceOutput, avias.storagegateway.models.ListTagsForResourceInput](client, awsData, ServiceType, ServiceAndPrefix, "ListTagsForResource", POST, "/", input)
  override def addUploadBuffer(input: avias.storagegateway.models.AddUploadBufferInput): F[avias.storagegateway.models.AddUploadBufferOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.AddUploadBufferOutput, avias.storagegateway.models.AddUploadBufferInput](client, awsData, ServiceType, ServiceAndPrefix, "AddUploadBuffer", POST, "/", input)
  override def updateChapCredentials(input: avias.storagegateway.models.UpdateChapCredentialsInput): F[avias.storagegateway.models.UpdateChapCredentialsOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.UpdateChapCredentialsOutput, avias.storagegateway.models.UpdateChapCredentialsInput](client, awsData, ServiceType, ServiceAndPrefix, "UpdateChapCredentials", POST, "/", input)
  override def updateVTLDeviceType(input: avias.storagegateway.models.UpdateVTLDeviceTypeInput): F[avias.storagegateway.models.UpdateVTLDeviceTypeOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.UpdateVTLDeviceTypeOutput, avias.storagegateway.models.UpdateVTLDeviceTypeInput](client, awsData, ServiceType, ServiceAndPrefix, "UpdateVTLDeviceType", POST, "/", input)
  override def addCache(input: avias.storagegateway.models.AddCacheInput): F[avias.storagegateway.models.AddCacheOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.AddCacheOutput, avias.storagegateway.models.AddCacheInput](client, awsData, ServiceType, ServiceAndPrefix, "AddCache", POST, "/", input)
  override def deleteVolume(input: avias.storagegateway.models.DeleteVolumeInput): F[avias.storagegateway.models.DeleteVolumeOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DeleteVolumeOutput, avias.storagegateway.models.DeleteVolumeInput](client, awsData, ServiceType, ServiceAndPrefix, "DeleteVolume", POST, "/", input)
  override def refreshCache(input: avias.storagegateway.models.RefreshCacheInput): F[avias.storagegateway.models.RefreshCacheOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.RefreshCacheOutput, avias.storagegateway.models.RefreshCacheInput](client, awsData, ServiceType, ServiceAndPrefix, "RefreshCache", POST, "/", input)
  override def retrieveTapeRecoveryPoint(input: avias.storagegateway.models.RetrieveTapeRecoveryPointInput): F[avias.storagegateway.models.RetrieveTapeRecoveryPointOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.RetrieveTapeRecoveryPointOutput, avias.storagegateway.models.RetrieveTapeRecoveryPointInput](client, awsData, ServiceType, ServiceAndPrefix, "RetrieveTapeRecoveryPoint", POST, "/", input)
  override def createNFSFileShare(input: avias.storagegateway.models.CreateNFSFileShareInput): F[avias.storagegateway.models.CreateNFSFileShareOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.CreateNFSFileShareOutput, avias.storagegateway.models.CreateNFSFileShareInput](client, awsData, ServiceType, ServiceAndPrefix, "CreateNFSFileShare", POST, "/", input)
  override def updateBandwidthRateLimit(input: avias.storagegateway.models.UpdateBandwidthRateLimitInput): F[avias.storagegateway.models.UpdateBandwidthRateLimitOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.UpdateBandwidthRateLimitOutput, avias.storagegateway.models.UpdateBandwidthRateLimitInput](client, awsData, ServiceType, ServiceAndPrefix, "UpdateBandwidthRateLimit", POST, "/", input)
  override def updateSnapshotSchedule(input: avias.storagegateway.models.UpdateSnapshotScheduleInput): F[avias.storagegateway.models.UpdateSnapshotScheduleOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.UpdateSnapshotScheduleOutput, avias.storagegateway.models.UpdateSnapshotScheduleInput](client, awsData, ServiceType, ServiceAndPrefix, "UpdateSnapshotSchedule", POST, "/", input)
  override def describeTapes(input: avias.storagegateway.models.DescribeTapesInput): F[avias.storagegateway.models.DescribeTapesOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DescribeTapesOutput, avias.storagegateway.models.DescribeTapesInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeTapes", POST, "/", input)
  override def deleteChapCredentials(input: avias.storagegateway.models.DeleteChapCredentialsInput): F[avias.storagegateway.models.DeleteChapCredentialsOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DeleteChapCredentialsOutput, avias.storagegateway.models.DeleteChapCredentialsInput](client, awsData, ServiceType, ServiceAndPrefix, "DeleteChapCredentials", POST, "/", input)
  override def describeChapCredentials(input: avias.storagegateway.models.DescribeChapCredentialsInput): F[avias.storagegateway.models.DescribeChapCredentialsOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DescribeChapCredentialsOutput, avias.storagegateway.models.DescribeChapCredentialsInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeChapCredentials", POST, "/", input)
  override def describeVTLDevices(input: avias.storagegateway.models.DescribeVTLDevicesInput): F[avias.storagegateway.models.DescribeVTLDevicesOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DescribeVTLDevicesOutput, avias.storagegateway.models.DescribeVTLDevicesInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeVTLDevices", POST, "/", input)
  override def createTapes(input: avias.storagegateway.models.CreateTapesInput): F[avias.storagegateway.models.CreateTapesOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.CreateTapesOutput, avias.storagegateway.models.CreateTapesInput](client, awsData, ServiceType, ServiceAndPrefix, "CreateTapes", POST, "/", input)
  override def addWorkingStorage(input: avias.storagegateway.models.AddWorkingStorageInput): F[avias.storagegateway.models.AddWorkingStorageOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.AddWorkingStorageOutput, avias.storagegateway.models.AddWorkingStorageInput](client, awsData, ServiceType, ServiceAndPrefix, "AddWorkingStorage", POST, "/", input)
  override def startGateway(input: avias.storagegateway.models.StartGatewayInput): F[avias.storagegateway.models.StartGatewayOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.StartGatewayOutput, avias.storagegateway.models.StartGatewayInput](client, awsData, ServiceType, ServiceAndPrefix, "StartGateway", POST, "/", input)
  override def describeSnapshotSchedule(input: avias.storagegateway.models.DescribeSnapshotScheduleInput): F[avias.storagegateway.models.DescribeSnapshotScheduleOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DescribeSnapshotScheduleOutput, avias.storagegateway.models.DescribeSnapshotScheduleInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeSnapshotSchedule", POST, "/", input)
  override def createSnapshot(input: avias.storagegateway.models.CreateSnapshotInput): F[avias.storagegateway.models.CreateSnapshotOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.CreateSnapshotOutput, avias.storagegateway.models.CreateSnapshotInput](client, awsData, ServiceType, ServiceAndPrefix, "CreateSnapshot", POST, "/", input)
  override def listFileShares(input: avias.storagegateway.models.ListFileSharesInput): F[avias.storagegateway.models.ListFileSharesOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.ListFileSharesOutput, avias.storagegateway.models.ListFileSharesInput](client, awsData, ServiceType, ServiceAndPrefix, "ListFileShares", POST, "/", input)
  override def cancelRetrieval(input: avias.storagegateway.models.CancelRetrievalInput): F[avias.storagegateway.models.CancelRetrievalOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.CancelRetrievalOutput, avias.storagegateway.models.CancelRetrievalInput](client, awsData, ServiceType, ServiceAndPrefix, "CancelRetrieval", POST, "/", input)
  override def describeTapeRecoveryPoints(input: avias.storagegateway.models.DescribeTapeRecoveryPointsInput): F[avias.storagegateway.models.DescribeTapeRecoveryPointsOutput] = avias.common.http4s.ClientUtils.doRequest[F, avias.storagegateway.models.DescribeTapeRecoveryPointsOutput, avias.storagegateway.models.DescribeTapeRecoveryPointsInput](client, awsData, ServiceType, ServiceAndPrefix, "DescribeTapeRecoveryPoints", POST, "/", input)
}